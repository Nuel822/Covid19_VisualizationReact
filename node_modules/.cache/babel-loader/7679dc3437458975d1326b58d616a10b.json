{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from '../../action/countryStats.action';\nconst countryName = ['Russia', 'China', 'Japan', 'South Korea', 'Canada', 'United Kingdom', 'United States of America', 'Brazil', 'Argentina', 'Nigeria', 'France', 'Germany', 'Ukraine', 'Egypt', 'South Africa', 'India', 'Australia', 'Saudi Arabia', 'Afghanistan', 'Kazakhstan', 'Indonesia'];\nconst coutryData = [];\n\nconst CountryStats = ({\n  title\n}) => {\n  const dispatch = useDispatch();\n  const ds = new DataSet();\n\n  const onSuccess = data => {\n    coutryData.push(data);\n  };\n\n  useEffect(() => {\n    countryName.map(country => {\n      dispatch(action.fetch(country, onSuccess));\n    });\n    const userDv = ds.createView().source(coutryData, {\n      type: 'GeoJSON'\n    }).transform({\n      geoDataView: dv,\n      field: 'confirmed',\n      type: 'geo.centroid',\n      as: ['longitude', 'latitude']\n    });\n    const chart = new Chart({\n      container: 'mapChart',\n      autoFit: true,\n      height: 500\n    });\n    chart.scale({\n      longitude: {\n        sync: true\n      },\n      latitude: {\n        sync: true\n      }\n    });\n    chart.axis(false);\n    chart.legend({\n      position: 'right'\n    });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false\n    });\n    const userView = chart.createView();\n    userView.data(userDv.rows);\n    userView.point().position('longitude*latitude').color('#1890ff').shape('circle').size('confirmed', [5, 15]).style({\n      lineWidth: 1,\n      stroke: '#1890ff'\n    });\n    userView.interaction('element-active');\n    chart.render();\n  }, [dispatch, ds, dv]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pt-0\",\n    id: \"mapChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","useEffect","DataSet","Chart","CardHeader","CardBody","Card","useDispatch","useSelector","action","countryName","coutryData","CountryStats","title","dispatch","ds","onSuccess","data","push","map","country","fetch","userDv","createView","source","type","transform","geoDataView","dv","field","as","chart","container","autoFit","height","scale","longitude","sync","latitude","axis","legend","position","tooltip","showTitle","showMarkers","userView","rows","point","color","shape","size","style","lineWidth","stroke","interaction","render"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from '../../action/countryStats.action';\n\nconst countryName = [\n  'Russia',\n  'China',\n  'Japan',\n  'South Korea',\n  'Canada',\n  'United Kingdom',\n  'United States of America',\n  'Brazil',\n  'Argentina',\n  'Nigeria',\n  'France',\n  'Germany',\n  'Ukraine',\n  'Egypt',\n  'South Africa',\n  'India',\n  'Australia',\n  'Saudi Arabia',\n  'Afghanistan',\n  'Kazakhstan',\n  'Indonesia',\n];\nconst coutryData = [];\n\nconst CountryStats = ({title}) => {\n\n  const dispatch = useDispatch()\n  \n  const ds = new DataSet();\n  \n\n  const onSuccess = (data) => {\n    coutryData.push(data)\n  }\n\n  useEffect(() => {\n\n    countryName.map((country => {\n      dispatch(action.fetch(country, onSuccess));\n    }));\n\n    const userDv = ds\n      .createView()\n      .source(coutryData, {type: 'GeoJSON' })\n      .transform({\n        geoDataView: dv,\n        field: 'confirmed',\n        type: 'geo.centroid',\n        as: ['longitude', 'latitude'],\n      });\n    const chart = new Chart({\n      container: 'mapChart',\n      autoFit: true,\n      height: 500,\n    });\n    chart.scale({\n      longitude: {\n        sync: true,\n      },\n      latitude: {\n        sync: true,\n      },\n    });\n    chart.axis(false);\n\n    chart.legend({ position: 'right' });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false\n    });\n\n    const userView = chart.createView();\n    userView.data(userDv.rows);\n    userView\n      .point()\n      .position('longitude*latitude')\n      .color('#1890ff')\n      .shape('circle')\n      .size('confirmed', [5, 15])\n      .style({\n        lineWidth: 1,\n        stroke: '#1890ff',\n      });\n    userView.interaction('element-active');\n    chart.render();\n  }, [dispatch,ds,dv])\n\n  return (\n    <>\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0\">{title}</h6>\n        </CardHeader>\n        <CardBody className=\"pt-0\" id=\"mapChart\"></CardBody>\n      </Card>\n    </>\n  );\n}\n\nexport default CountryStats;"]},"metadata":{},"sourceType":"module"}