{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx\";\nimport React from 'react';\nimport { Chart } from '@antv/g2';\nlet activated = false;\n\nconst DisplayPieChart = props => {\n  const chart = new Chart();\n\n  const renderChart = () => {\n    if (activated) {\n      chart.changeData(props.chartData);\n    } else {\n      const chart = new Chart({\n        container: 'containerPieChart',\n        autoFit: true,\n        height: 500\n      });\n      chart.data(props.chartData);\n      chart.changeData(props.chartData);\n      chart.scale('percent', {\n        formatter: val => {\n          val = val * 100 + '%';\n          return val;\n        }\n      });\n      chart.coordinate('theta', {\n        radius: 0.75,\n        innerRadius: 0.6\n      });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false,\n        itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n      });\n      chart.annotation().text({\n        position: ['50%', '50%'],\n        content: \"Total Confirmed Cases\",\n        style: {\n          fontSize: 14,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetY: -20\n      }).text({\n        position: ['50%', '50%'],\n        content: props.innerChartTitle,\n        style: {\n          fontSize: 20,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetX: -10,\n        offsetY: 20\n      });\n      chart.interval().adjust('stack').position('percent').color('item').label('percent', percent => {\n        return {\n          content: data => {\n            return `${data.item}: ${percent * 100}%`;\n          }\n        };\n      }).tooltip('item*percent', (item, percent) => {\n        percent = percent * 100 + '%';\n        return {\n          name: item,\n          value: percent\n        };\n      });\n      chart.interaction('element-active');\n      activated = true;\n      chart.render();\n    } // chart.data(props.chartData);\n    // chart.changeData(props.chartData);\n    // chart.scale('percent', {\n    //     formatter: (val) => {\n    //         val = val * 100 + '%';\n    //         return val;\n    //     },\n    // });\n    // chart.coordinate('theta', {\n    //     radius: 0.75,\n    //     innerRadius: 0.6,\n    // });\n    // chart.tooltip({\n    //     showTitle: false,\n    //     showMarkers: false,\n    //     itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n    // });\n    // chart.annotation()\n    //     .text({\n    //         position: ['50%', '50%'],\n    //         content: \"Total Confirmed Cases\",\n    //         style: {\n    //             fontSize: 14,\n    //             fill: '#8c8c8c',\n    //             textAlign: 'center',\n    //         },\n    //         offsetY: -20,\n    //     })\n    //     .text({\n    //         position: ['50%', '50%'],\n    //         content: props.innerChartTitle,\n    //         style: {\n    //             fontSize: 20,\n    //             fill: '#8c8c8c',\n    //             textAlign: 'center',\n    //         },\n    //         offsetX: -10,\n    //         offsetY: 20,\n    //     });\n    // chart.interval()\n    //     .adjust('stack')\n    //     .position('percent')\n    //     .color('item')\n    //     .label('percent', (percent) => {\n    //         return {\n    //             content: (data) => {\n    //                 return `${data.item}: ${percent * 100}%`;\n    //             },\n    //         };\n    //     })\n    //     .tooltip('item*percent', (item, percent) => {\n    //         percent = percent * 100 + '%';\n    //         return {\n    //             name: item,\n    //             value: percent,\n    //         };\n    //     });\n    // chart.interaction('element-active');\n    // chart.render()\n\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"containerPieChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, props.chartData && props.chartData.length > 0 && renderChart());\n};\n\nexport default DisplayPieChart;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx"],"names":["React","Chart","activated","DisplayPieChart","props","chart","renderChart","changeData","chartData","container","autoFit","height","data","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","innerChartTitle","offsetX","interval","adjust","color","label","percent","item","name","value","interaction","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Chart } from '@antv/g2';\n\nlet activated = false;\nconst DisplayPieChart = (props) => {\n\n    const chart = new Chart();\n\n    const renderChart = () => {\n\n\n        if (activated) {\n            chart.changeData(props.chartData);\n        } else {\n\n            const chart = new Chart({\n                container: 'containerPieChart',\n                autoFit: true,\n                height: 500,\n            });\n    \n            chart.data(props.chartData);\n            chart.changeData(props.chartData);\n            chart.scale('percent', {\n                formatter: (val) => {\n                    val = val * 100 + '%';\n                    return val;\n                },\n            });\n            chart.coordinate('theta', {\n                radius: 0.75,\n                innerRadius: 0.6,\n            });\n            chart.tooltip({\n                showTitle: false,\n                showMarkers: false,\n                itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n            });\n            chart.annotation()\n                .text({\n                    position: ['50%', '50%'],\n                    content: \"Total Confirmed Cases\",\n                    style: {\n                        fontSize: 14,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetY: -20,\n                })\n                .text({\n                    position: ['50%', '50%'],\n                    content: props.innerChartTitle,\n                    style: {\n                        fontSize: 20,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetX: -10,\n                    offsetY: 20,\n                });\n            chart.interval()\n                .adjust('stack')\n                .position('percent')\n                .color('item')\n                .label('percent', (percent) => {\n                    return {\n                        content: (data) => {\n                            return `${data.item}: ${percent * 100}%`;\n                        },\n                    };\n                })\n                .tooltip('item*percent', (item, percent) => {\n                    percent = percent * 100 + '%';\n                    return {\n                        name: item,\n                        value: percent,\n                    };\n                });\n            chart.interaction('element-active');\n            activated = true;\n            chart.render()\n        }\n        // chart.data(props.chartData);\n        // chart.changeData(props.chartData);\n        // chart.scale('percent', {\n        //     formatter: (val) => {\n        //         val = val * 100 + '%';\n        //         return val;\n        //     },\n        // });\n        // chart.coordinate('theta', {\n        //     radius: 0.75,\n        //     innerRadius: 0.6,\n        // });\n        // chart.tooltip({\n        //     showTitle: false,\n        //     showMarkers: false,\n        //     itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n        // });\n        // chart.annotation()\n        //     .text({\n        //         position: ['50%', '50%'],\n        //         content: \"Total Confirmed Cases\",\n        //         style: {\n        //             fontSize: 14,\n        //             fill: '#8c8c8c',\n        //             textAlign: 'center',\n        //         },\n        //         offsetY: -20,\n        //     })\n        //     .text({\n        //         position: ['50%', '50%'],\n        //         content: props.innerChartTitle,\n        //         style: {\n        //             fontSize: 20,\n        //             fill: '#8c8c8c',\n        //             textAlign: 'center',\n        //         },\n        //         offsetX: -10,\n        //         offsetY: 20,\n        //     });\n        // chart.interval()\n        //     .adjust('stack')\n        //     .position('percent')\n        //     .color('item')\n        //     .label('percent', (percent) => {\n        //         return {\n        //             content: (data) => {\n        //                 return `${data.item}: ${percent * 100}%`;\n        //             },\n        //         };\n        //     })\n        //     .tooltip('item*percent', (item, percent) => {\n        //         percent = percent * 100 + '%';\n        //         return {\n        //             name: item,\n        //             value: percent,\n        //         };\n        //     });\n        // chart.interaction('element-active');\n        // chart.render()\n\n    }\n    return (\n\n        <div id=\"containerPieChart\">\n            {props.chartData && props.chartData.length > 0 && (\n                renderChart()\n            )}\n        </div>\n\n    );\n}\nexport default DisplayPieChart;"]},"metadata":{},"sourceType":"module"}