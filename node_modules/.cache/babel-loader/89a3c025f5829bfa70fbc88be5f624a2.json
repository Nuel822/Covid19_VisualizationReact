{"ast":null,"code":"import React from\"react\";import{Chart}from'@antv/g2';import DataSet from'@antv/data-set';var render=true;var DisplayMapChart=function DisplayMapChart(props){if(render){var chart=new Chart({container:'container',autoFit:true,height:500,padding:[0,20,40]});chart.scale({x:{sync:true},y:{sync:true}});chart.coordinate('rect').reflect('y');chart.legend(false);chart.axis(false);chart.tooltip({showTitle:false,shared:true,showMarkers:false,containerTpl:'<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',itemTpl:'<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',domStyles:{'g2-tooltip':{borderRadius:'2px',backgroundColor:'#DDDDDD',padding:0,border:'1px solid #333'}}});var ds=new DataSet();// draw the map\nvar dv=ds.createView('back').source(props.geoData,{type:'GeoJSON'}).transform({type:'geo.projection',projection:'geoMercator',as:['x','y','centroidX','centroidY']});var bgView=chart.createView();bgView.data(dv.rows);bgView.tooltip(false);bgView.polygon().position('x*y').style({fill:'#DDDDDD',stroke:'#b1b1b1',lineWidth:0.5,fillOpacity:0.85});var userData=ds.createView().source(props.countryData);userData.transform({type:'map',callback:function callback(obj){var projectedCoord=dv.geoProjectPosition([obj.longitude*1,obj.latitude*1],'geoMercator');obj.x=projectedCoord[0];obj.y=projectedCoord[1];obj.deaths=obj.totalDeaths*1;obj.magnitude=obj.totalCases*1;return obj;}});var pointView=chart.createView();pointView.data(userData.rows);pointView.point().position('x*y').size('magnitude',[2,30]).shape('circle').color('#FF2F29').tooltip('country*active*recovered*critical*totalDeaths*totalCases').style({fillOpacity:0.45}).state({active:{style:{lineWidth:1,stroke:'#FF2F29'}}});pointView.interaction('element-active');chart.render();render=false;}return/*#__PURE__*/React.createElement(React.Fragment,null);};export default DisplayMapChart;","map":{"version":3,"sources":["/Users/bobby/Desktop/Covid19_VisualizationReact/src/component/chart/mapChart.component.jsx"],"names":["React","Chart","DataSet","render","DisplayMapChart","props","chart","container","autoFit","height","padding","scale","x","sync","y","coordinate","reflect","legend","axis","tooltip","showTitle","shared","showMarkers","containerTpl","itemTpl","domStyles","borderRadius","backgroundColor","border","ds","dv","createView","source","geoData","type","transform","projection","as","bgView","data","rows","polygon","position","style","fill","stroke","lineWidth","fillOpacity","userData","countryData","callback","obj","projectedCoord","geoProjectPosition","longitude","latitude","deaths","totalDeaths","magnitude","totalCases","pointView","point","size","shape","color","state","active","interaction"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Chart } from '@antv/g2';\nimport DataSet from '@antv/data-set';\n\nlet render = true\nconst DisplayMapChart = (props) => {\n\n    if(render){\n        const chart = new Chart({\n            container: 'container',\n            autoFit: true,\n            height: 500,\n            padding: [0, 20, 40]\n          });\n      \n          chart.scale({\n            x: { sync: true },\n            y: { sync: true }\n          });\n      \n          chart.coordinate('rect').reflect('y');\n          chart.legend(false);\n          chart.axis(false);\n      \n          chart.tooltip({\n            showTitle: false,\n            shared: true,\n            showMarkers: false,\n            containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n            itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n            domStyles: {\n              'g2-tooltip': {\n                borderRadius: '2px',\n                backgroundColor: '#DDDDDD',\n                padding: 0,\n                border: '1px solid #333'\n              }\n            }\n          });\n          const ds = new DataSet();\n          // draw the map\n          const dv = ds.createView('back')\n            .source(props.geoData, {\n              type: 'GeoJSON'\n            })\n            .transform({\n              type: 'geo.projection',\n              projection: 'geoMercator',\n              as: ['x', 'y', 'centroidX', 'centroidY']\n            });\n      \n          const bgView = chart.createView();\n          bgView.data(dv.rows);\n          bgView.tooltip(false);\n          bgView.polygon()\n            .position('x*y')\n            .style({\n              fill: '#DDDDDD',\n              stroke: '#b1b1b1',\n              lineWidth: 0.5,\n              fillOpacity: 0.85\n      \n            });\n      \n          const userData = ds.createView().source(props.countryData);\n          userData.transform({\n            type: 'map',\n            callback: obj => {\n              const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n              obj.x = projectedCoord[0];\n              obj.y = projectedCoord[1];\n              obj.deaths = obj.totalDeaths * 1; \n              obj.magnitude = obj.totalCases * 1;\n              return obj;\n            }\n          });\n      \n          const pointView = chart.createView();\n          pointView.data(userData.rows);\n          pointView.point()\n            .position('x*y')\n            .size('magnitude', [2, 30])\n            .shape('circle')\n            .color('#FF2F29')\n            .tooltip('country*active*recovered*critical*totalDeaths*totalCases')\n            .style({\n              fillOpacity: 0.45,\n            })\n            .state({\n              active: {\n                style: {\n                  lineWidth: 1,\n                  stroke: '#FF2F29'\n                }\n              }\n            });\n          pointView.interaction('element-active');\n          chart.render();\n          render = false\n    }\n\n        return(\n            <></>\n        );\n}\n\nexport default DisplayMapChart;"]},"metadata":{},"sourceType":"module"}