{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport GeoLocation from '../../utils/geoCountryData';\ncountryData = [];\n\nconst CountryStats = ({\n  title\n}) => {\n  const {\n    totalFigure\n  } = useSelector(state => ({\n    totalFigure: state.TotalStats.totalFigure\n  }));\n\n  if (totalFigure && totalFigure.length > 0) {\n    totalFigure.map(data => {\n      const {\n        latitude,\n        longitude\n      } = GeoLocation(data.country);\n      countryData.push({});\n    });\n  }\n\n  const renderChart = () => {\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n      padding: [0, 20, 40]\n    });\n    chart.scale({\n      x: {\n        sync: true\n      },\n      y: {\n        sync: true\n      }\n    });\n    chart.coordinate('rect').reflect('y');\n    chart.legend(false);\n    chart.axis(false);\n    chart.tooltip({\n      showTitle: false,\n      shared: true,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n      itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n      domStyles: {\n        'g2-tooltip': {\n          borderRadius: '2px',\n          backgroundColor: '#DDDDDD',\n          padding: 0,\n          border: '1px solid #333'\n        }\n      }\n    });\n    const ds = new DataSet(); // draw the map\n\n    const dv = ds.createView('back').source(geoData, {\n      type: 'GeoJSON'\n    }).transform({\n      type: 'geo.projection',\n      projection: 'geoMercator',\n      as: ['x', 'y', 'centroidX', 'centroidY']\n    });\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon().position('x*y').style({\n      fill: '#DDDDDD',\n      stroke: '#b1b1b1',\n      lineWidth: 0.5,\n      fillOpacity: 0.85\n    });\n    const userData = ds.createView().source(countryData);\n    userData.transform({\n      type: 'map',\n      callback: obj => {\n        const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n        obj.x = projectedCoord[0];\n        obj.y = projectedCoord[1];\n        obj.deaths = obj.deaths * 1;\n        obj.magnitude = obj.critical * 1;\n        return obj;\n      }\n    });\n    const pointView = chart.createView();\n    pointView.data(userData.rows);\n    pointView.point().position('x*y').size('deaths', [2, 30]).shape('circle').color('#FF2F29').tooltip('country*confirmed*recovered*critical*deaths').style({\n      fillOpacity: 0.45\n    }).state({\n      active: {\n        style: {\n          lineWidth: 1,\n          stroke: '#FF2F29'\n        }\n      }\n    });\n    pointView.interaction('element-active');\n    chart.render();\n  };\n\n  if (countryData && countryData.length === countryName.length) {\n    renderChart();\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0 text-center text-uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","useSelector","DataSet","Chart","CardHeader","CardBody","Card","GeoLocation","countryData","CountryStats","title","totalFigure","state","TotalStats","length","map","data","latitude","longitude","country","push","renderChart","chart","container","autoFit","height","padding","scale","x","sync","y","coordinate","reflect","legend","axis","tooltip","showTitle","shared","showMarkers","containerTpl","itemTpl","domStyles","borderRadius","backgroundColor","border","ds","dv","createView","source","geoData","type","transform","projection","as","bgView","rows","polygon","position","style","fill","stroke","lineWidth","fillOpacity","userData","callback","obj","projectedCoord","geoProjectPosition","deaths","magnitude","critical","pointView","point","size","shape","color","active","interaction","render","countryName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport GeoLocation from '../../utils/geoCountryData'\n\ncountryData = [];\nconst CountryStats = ({ title }) => {\n\n  const { totalFigure } = useSelector(state => ({\n    totalFigure: state.TotalStats.totalFigure\n  }))\n \n  if(totalFigure && totalFigure.length > 0){\n     totalFigure.map(data => {\n        const {latitude, longitude} = GeoLocation(data.country);\n        countryData.push({})\n\n     })\n  }\n  const renderChart = () => {\n\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n      padding: [0, 20, 40]\n    });\n\n    chart.scale({\n      x: { sync: true },\n      y: { sync: true }\n    });\n    chart.coordinate('rect').reflect('y');\n    chart.legend(false);\n    chart.axis(false);\n\n    chart.tooltip({\n      showTitle: false,\n      shared: true,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n      itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n      domStyles: {\n        'g2-tooltip': {\n          borderRadius: '2px',\n          backgroundColor: '#DDDDDD',\n          padding: 0,\n          border: '1px solid #333'\n        }\n      }\n    });\n    const ds = new DataSet();\n    // draw the map\n    const dv = ds.createView('back')\n      .source(geoData, {\n        type: 'GeoJSON'\n      })\n      .transform({\n        type: 'geo.projection',\n        projection: 'geoMercator',\n        as: ['x', 'y', 'centroidX', 'centroidY']\n      });\n\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon()\n      .position('x*y')\n      .style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85\n      });\n\n    const userData = ds.createView().source(countryData);\n    userData.transform({\n      type: 'map',\n      callback: obj => {\n        const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n        obj.x = projectedCoord[0];\n        obj.y = projectedCoord[1];\n        obj.deaths = obj.deaths * 1;\n        obj.magnitude = obj.critical * 1;\n        return obj;\n      }\n    });\n\n    const pointView = chart.createView();\n    pointView.data(userData.rows);\n    pointView.point()\n      .position('x*y')\n      .size('deaths', [2, 30])\n      .shape('circle')\n      .color('#FF2F29')\n      .tooltip('country*confirmed*recovered*critical*deaths')\n      .style({\n        fillOpacity: 0.45,\n      })\n      .state({\n        active: {\n          style: {\n            lineWidth: 1,\n            stroke: '#FF2F29'\n          }\n        }\n      });\n    pointView.interaction('element-active');\n    chart.render();\n  }\n\n  if (countryData && countryData.length === countryName.length) {\n    renderChart();\n  }\n\n  return (\n    <>\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0 text-center text-uppercase\">{title}</h6>\n        </CardHeader>\n        <CardBody className=\"pt-0\">\n          <div id=\"container\" />\n        </CardBody>\n      </Card>\n    </>\n  );\n}\nexport default CountryStats;\n\n\n"]},"metadata":{},"sourceType":"module"}