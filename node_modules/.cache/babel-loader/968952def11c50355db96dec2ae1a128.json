{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, filter } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 矩阵分面\n */\n\nvar Rect =\n/** @class */\nfunction (_super) {\n  __extends(Rect, _super);\n\n  function Rect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Rect.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  Rect.prototype.beforeEachView = function (view, facet) {// do nothing\n  };\n\n  Rect.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'rect',\n      columnTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this)),\n      rowTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this))\n    });\n  };\n\n  Rect.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  /**\n   * 生成矩阵分面的分面数据\n   * @param data\n   */\n\n\n  Rect.prototype.generateFacets = function (data) {\n    var _this = this;\n\n    var _a = this.cfg.fields,\n        columnField = _a[0],\n        rowField = _a[1];\n    var rst = [];\n    var columnValuesLength = 1;\n    var rowValuesLength = 1;\n    var columnValues = [''];\n    var rowValues = [''];\n\n    if (columnField) {\n      columnValues = this.getFieldValues(data, columnField);\n      columnValuesLength = columnValues.length;\n    }\n\n    if (rowField) {\n      rowValues = this.getFieldValues(data, rowField);\n      rowValuesLength = rowValues.length;\n    } // 获取每个维度对应的数据配置片段\n\n\n    columnValues.forEach(function (xVal, xIndex) {\n      rowValues.forEach(function (yVal, yIndex) {\n        var conditions = [{\n          field: columnField,\n          value: xVal,\n          values: columnValues\n        }, {\n          field: rowField,\n          value: yVal,\n          values: rowValues\n        }];\n        var facetData = filter(data, _this.getFacetDataFilter(conditions));\n        var facet = {\n          type: _this.cfg.type,\n          data: facetData,\n          region: _this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),\n          columnValue: xVal,\n          rowValue: yVal,\n          columnField: columnField,\n          rowField: rowField,\n          columnIndex: xIndex,\n          rowIndex: yIndex,\n          columnValuesLength: columnValuesLength,\n          rowValuesLength: rowValuesLength\n        };\n        rst.push(facet);\n      });\n    });\n    return rst;\n  };\n\n  Rect.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet, facetIndex) {\n      var columnIndex = facet.columnIndex,\n          rowIndex = facet.rowIndex,\n          columnValuesLength = facet.columnValuesLength,\n          rowValuesLength = facet.rowValuesLength,\n          columnValue = facet.columnValue,\n          rowValue = facet.rowValue,\n          view = facet.view; // top\n\n      if (rowIndex === 0) {\n        var config = deepMix({\n          position: ['50%', '0%'],\n          content: columnValue\n        }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.columnTitle);\n        view.annotation().text(config);\n      } // right\n\n\n      if (columnIndex === columnValuesLength - 1) {\n        var config = deepMix({\n          position: ['100%', '50%'],\n          content: rowValue\n        }, getFactTitleConfig(DIRECTION.RIGHT), _this.cfg.rowTitle);\n        view.annotation().text(config);\n      }\n    });\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Rect.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 非最后一行\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    } else if (facet.columnIndex !== Math.floor((facet.columnValuesLength - 1) / 2)) {\n      // 不是中间列\n      return __assign(__assign({}, option), {\n        title: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Rect.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    } else if (facet.rowIndex !== Math.floor((facet.rowValuesLength - 1) / 2)) {\n      return __assign(__assign({}, option), {\n        title: null\n      });\n    }\n\n    return option;\n  };\n\n  return Rect;\n}(Facet);\n\nexport default Rect;","map":{"version":3,"sources":["../../src/facet/rect.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, filter } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 矩阵分面\n */\nvar Rect = /** @class */ (function (_super) {\n    __extends(Rect, _super);\n    function Rect() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rect.prototype.afterEachView = function (view, facet) {\n        this.processAxis(view, facet);\n    };\n    Rect.prototype.beforeEachView = function (view, facet) {\n        // do nothing\n    };\n    Rect.prototype.getDefaultCfg = function () {\n        return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n            type: 'rect',\n            columnTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this)),\n            rowTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this))\n        });\n    };\n    Rect.prototype.render = function () {\n        _super.prototype.render.call(this);\n        if (this.cfg.showTitle) {\n            this.renderTitle();\n        }\n    };\n    /**\n     * 生成矩阵分面的分面数据\n     * @param data\n     */\n    Rect.prototype.generateFacets = function (data) {\n        var _this = this;\n        var _a = this.cfg.fields, columnField = _a[0], rowField = _a[1];\n        var rst = [];\n        var columnValuesLength = 1;\n        var rowValuesLength = 1;\n        var columnValues = [''];\n        var rowValues = [''];\n        if (columnField) {\n            columnValues = this.getFieldValues(data, columnField);\n            columnValuesLength = columnValues.length;\n        }\n        if (rowField) {\n            rowValues = this.getFieldValues(data, rowField);\n            rowValuesLength = rowValues.length;\n        }\n        // 获取每个维度对应的数据配置片段\n        columnValues.forEach(function (xVal, xIndex) {\n            rowValues.forEach(function (yVal, yIndex) {\n                var conditions = [\n                    { field: columnField, value: xVal, values: columnValues },\n                    { field: rowField, value: yVal, values: rowValues },\n                ];\n                var facetData = filter(data, _this.getFacetDataFilter(conditions));\n                var facet = {\n                    type: _this.cfg.type,\n                    data: facetData,\n                    region: _this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),\n                    columnValue: xVal,\n                    rowValue: yVal,\n                    columnField: columnField,\n                    rowField: rowField,\n                    columnIndex: xIndex,\n                    rowIndex: yIndex,\n                    columnValuesLength: columnValuesLength,\n                    rowValuesLength: rowValuesLength,\n                };\n                rst.push(facet);\n            });\n        });\n        return rst;\n    };\n    Rect.prototype.renderTitle = function () {\n        var _this = this;\n        each(this.facets, function (facet, facetIndex) {\n            var columnIndex = facet.columnIndex, rowIndex = facet.rowIndex, columnValuesLength = facet.columnValuesLength, rowValuesLength = facet.rowValuesLength, columnValue = facet.columnValue, rowValue = facet.rowValue, view = facet.view;\n            // top\n            if (rowIndex === 0) {\n                var config = deepMix({\n                    position: ['50%', '0%'],\n                    content: columnValue,\n                }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.columnTitle);\n                view.annotation().text(config);\n            }\n            // right\n            if (columnIndex === columnValuesLength - 1) {\n                var config = deepMix({\n                    position: ['100%', '50%'],\n                    content: rowValue,\n                }, getFactTitleConfig(DIRECTION.RIGHT), _this.cfg.rowTitle);\n                view.annotation().text(config);\n            }\n        });\n    };\n    /**\n     * 设置 x 坐标轴的文本、title 是否显示\n     * @param x\n     * @param axes\n     * @param option\n     * @param facet\n     */\n    Rect.prototype.getXAxisOption = function (x, axes, option, facet) {\n        // 非最后一行\n        if (facet.rowIndex !== facet.rowValuesLength - 1) {\n            return __assign(__assign({}, option), { title: null, label: null });\n        }\n        else if (facet.columnIndex !== Math.floor((facet.columnValuesLength - 1) / 2)) {\n            // 不是中间列\n            return __assign(__assign({}, option), { title: null });\n        }\n        return option;\n    };\n    /**\n     * 设置 y 坐标轴的文本、title 是否显示\n     * @param y\n     * @param axes\n     * @param option\n     * @param facet\n     */\n    Rect.prototype.getYAxisOption = function (y, axes, option, facet) {\n        if (facet.columnIndex !== 0) {\n            return __assign(__assign({}, option), { title: null, label: null });\n        }\n        else if (facet.rowIndex !== Math.floor((facet.rowValuesLength - 1) / 2)) {\n            return __assign(__assign({}, option), { title: null });\n        }\n        return option;\n    };\n    return Rect;\n}(Facet));\nexport default Rect;\n//# sourceMappingURL=rect.js.map"]},"metadata":{},"sourceType":"module"}