{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx\";\nimport React from 'react';\nimport { Chart } from '@antv/g2';\n\nconst DisplayPieChart = props => {\n  const chart = new Chart({\n    container: 'containerPieChart',\n    autoFit: true,\n    height: 500\n  });\n  chart.data(props.chartData);\n  chart.scale('percent', {\n    formatter: val => {\n      val = val * 100 + '%';\n      return val;\n    }\n  });\n  chart.coordinate('theta', {\n    radius: 0.75,\n    innerRadius: 0.6\n  });\n  chart.tooltip({\n    showTitle: false,\n    showMarkers: false,\n    itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n  });\n  chart.annotation().text({\n    position: ['50%', '50%'],\n    content: \"Total Confirmed Cases\",\n    style: {\n      fontSize: 14,\n      fill: '#8c8c8c',\n      textAlign: 'center'\n    },\n    offsetY: -20\n  }).text({\n    position: ['50%', '50%'],\n    content: props.innerChartTitle,\n    style: {\n      fontSize: 20,\n      fill: '#8c8c8c',\n      textAlign: 'center'\n    },\n    offsetX: -10,\n    offsetY: 20\n  });\n  chart.interval().adjust('stack').position('percent').color('item').label('percent', percent => {\n    return {\n      content: data => {\n        return `${data.item}: ${percent * 100}%`;\n      }\n    };\n  }).tooltip('item*percent', (item, percent) => {\n    percent = percent * 100 + '%';\n    return {\n      name: item,\n      value: percent\n    };\n  });\n  chart.interaction('element-active');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"containerPieChart\",\n    key: props.searchInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, chart.render());\n}; // class DisplayPieChart extends React.Component {\n//     constructor(props) {\n//         super(props)\n//     }\n//     render() {\n//         if(this.props.chartData && this.props.chartData.length > 0 && this.props.innerChartTitle)\n//         {\n//             const chart = new Chart({\n//                 container: 'containerPieChart',\n//                 autoFit: true,\n//                 height: 500,\n//             });\n//             chart.data(this.props.chartData);\n//             chart.scale('percent', {\n//                 formatter: (val) => {\n//                     val = val * 100 + '%';\n//                     return val;\n//                 },\n//             });\n//             chart.coordinate('theta', {\n//                 radius: 0.75,\n//                 innerRadius: 0.6,\n//             });\n//             chart.tooltip({\n//                 showTitle: false,\n//                 showMarkers: false,\n//                 itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n//             });\n//             chart.annotation()\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: \"Total Confirmed Cases\",\n//                     style: {\n//                         fontSize: 14,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetY: -20,\n//                 })\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: this.props.innerChartTitle,\n//                     style: {\n//                         fontSize: 20,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetX: -10,\n//                     offsetY: 20,\n//                 });\n//             chart.interval()\n//                 .adjust('stack')\n//                 .position('percent')\n//                 .color('item')\n//                 .label('percent', (percent) => {\n//                     return {\n//                         content: (data) => {\n//                             return `${data.item}: ${percent * 100}%`;\n//                         },\n//                     };\n//                 })\n//                 .tooltip('item*percent', (item, percent) => {\n//                     percent = percent * 100 + '%';\n//                     return {\n//                         name: item,\n//                         value: percent,\n//                     };\n//                 });\n//             chart.interaction('element-active');\n//             chart.render();\n//             ++renderComponenKey\n//         }\n//         return (\n//             <></>\n//         );\n//     }\n// }\n\n\nexport default DisplayPieChart;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx"],"names":["React","Chart","DisplayPieChart","props","chart","container","autoFit","height","data","chartData","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","innerChartTitle","offsetX","interval","adjust","color","label","percent","item","name","value","interaction","searchInput","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Chart } from '@antv/g2';\n\n\nconst DisplayPieChart = (props) => {\n\n    const chart = new Chart({\n        container: 'containerPieChart',\n        autoFit: true,\n        height: 500,\n    });\n\n    chart.data(props.chartData);\n    chart.scale('percent', {\n        formatter: (val) => {\n            val = val * 100 + '%';\n            return val;\n        },\n    });\n    chart.coordinate('theta', {\n        radius: 0.75,\n        innerRadius: 0.6,\n    });\n    chart.tooltip({\n        showTitle: false,\n        showMarkers: false,\n        itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n    });\n    chart.annotation()\n        .text({\n            position: ['50%', '50%'],\n            content: \"Total Confirmed Cases\",\n            style: {\n                fontSize: 14,\n                fill: '#8c8c8c',\n                textAlign: 'center',\n            },\n            offsetY: -20,\n        })\n        .text({\n            position: ['50%', '50%'],\n            content: props.innerChartTitle,\n            style: {\n                fontSize: 20,\n                fill: '#8c8c8c',\n                textAlign: 'center',\n            },\n            offsetX: -10,\n            offsetY: 20,\n        });\n    chart.interval()\n        .adjust('stack')\n        .position('percent')\n        .color('item')\n        .label('percent', (percent) => {\n            return {\n                content: (data) => {\n                    return `${data.item}: ${percent * 100}%`;\n                },\n            };\n        })\n        .tooltip('item*percent', (item, percent) => {\n            percent = percent * 100 + '%';\n            return {\n                name: item,\n                value: percent,\n            };\n        });\n    chart.interaction('element-active');\n    \n    return (\n        \n        <div id=\"containerPieChart\" key={props.searchInput}>\n         {chart.render()}\n       </div>\n    );\n}\n\n// class DisplayPieChart extends React.Component {\n//     constructor(props) {\n//         super(props)\n\n//     }\n\n//     render() {\n\n//         if(this.props.chartData && this.props.chartData.length > 0 && this.props.innerChartTitle)\n//         {\n//             const chart = new Chart({\n//                 container: 'containerPieChart',\n//                 autoFit: true,\n//                 height: 500,\n//             });\n\n//             chart.data(this.props.chartData);\n//             chart.scale('percent', {\n//                 formatter: (val) => {\n//                     val = val * 100 + '%';\n//                     return val;\n//                 },\n//             });\n//             chart.coordinate('theta', {\n//                 radius: 0.75,\n//                 innerRadius: 0.6,\n//             });\n//             chart.tooltip({\n//                 showTitle: false,\n//                 showMarkers: false,\n//                 itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n//             });\n//             chart.annotation()\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: \"Total Confirmed Cases\",\n//                     style: {\n//                         fontSize: 14,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetY: -20,\n//                 })\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: this.props.innerChartTitle,\n//                     style: {\n//                         fontSize: 20,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetX: -10,\n//                     offsetY: 20,\n//                 });\n//             chart.interval()\n//                 .adjust('stack')\n//                 .position('percent')\n//                 .color('item')\n//                 .label('percent', (percent) => {\n//                     return {\n//                         content: (data) => {\n//                             return `${data.item}: ${percent * 100}%`;\n//                         },\n//                     };\n//                 })\n//                 .tooltip('item*percent', (item, percent) => {\n//                     percent = percent * 100 + '%';\n//                     return {\n//                         name: item,\n//                         value: percent,\n//                     };\n//                 });\n//             chart.interaction('element-active');\n//             chart.render();\n//             ++renderComponenKey\n//         }\n//         return (\n//             <></>\n//         );\n//     }\n\n// }\nexport default DisplayPieChart;"]},"metadata":{},"sourceType":"module"}