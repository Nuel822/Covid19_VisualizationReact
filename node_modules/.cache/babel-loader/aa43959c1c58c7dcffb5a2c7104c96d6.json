{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { isFunction, values, warn } from './utils';\nimport { SIZE } from './constants';\nvar INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\nexport var sizeType = PropTypes.oneOf(values(SIZE));\n/**\n * Allows additional warnings or messaging related to prop validation.\n */\n\nexport function checkPropType(validator, callback) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT;\n\n    PropTypes.checkPropTypes((_PropTypes$checkPropT = {}, _PropTypes$checkPropT[propName] = validator, _PropTypes$checkPropT), props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props, propName, componentName) {\n  var caseSensitive = props.caseSensitive,\n      filterBy = props.filterBy;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function defaultInputValueType(props, propName, componentName) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      multiple = props.multiple,\n      selected = props.selected;\n  var name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), \"`defaultInputValue` will be overridden by the value from `\" + name + \"`.\");\n}\nexport function defaultSelectedType(props, propName, componentName) {\n  var defaultSelected = props.defaultSelected,\n      multiple = props.multiple;\n  warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' + 'Typeahead in single-select mode. The selections will be truncated to a ' + 'single selection.');\n}\nexport function highlightOnlyResultType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      highlightOnlyResult = props.highlightOnlyResult;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props, propName, componentName) {\n  var filterBy = props.filterBy,\n      ignoreDiacritics = props.ignoreDiacritics;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(props, propName, componentName) {\n  var inputProps = props.inputProps;\n\n  if (!(inputProps && Object.prototype.toString.call(inputProps) === '[object Object]')) {\n    return;\n  } // Blacklisted properties.\n\n\n  INPUT_PROPS_BLACKLIST.forEach(function (_ref) {\n    var alt = _ref.alt,\n        prop = _ref.prop;\n    var msg = alt ? \" Use the top-level `\" + alt + \"` prop instead.\" : null;\n    warn(!inputProps[prop], \"The `\" + prop + \"` property of `inputProps` will be ignored.\" + msg);\n  });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n  warn(props[propName] != null, \"The prop `\" + propName + \"` is required to make `\" + componentName + \"` \" + 'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport var optionType = PropTypes.oneOfType([PropTypes.object, PropTypes.string]);\nexport function selectedType(props, propName, componentName) {\n  var multiple = props.multiple,\n      onChange = props.onChange,\n      selected = props.selected;\n  warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' + 'in single-select mode. This may lead to unexpected behaviors or errors.');\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/node_modules/react-bootstrap-typeahead/es/propTypes.js"],"names":["PropTypes","isFunction","values","warn","SIZE","INPUT_PROPS_BLACKLIST","alt","prop","sizeType","oneOf","checkPropType","validator","callback","props","propName","componentName","_PropTypes$checkPropT","checkPropTypes","caseSensitiveType","caseSensitive","filterBy","defaultInputValueType","defaultInputValue","defaultSelected","multiple","selected","name","length","defaultSelectedType","highlightOnlyResultType","allowNew","highlightOnlyResult","ignoreDiacriticsType","ignoreDiacritics","inputPropsType","inputProps","Object","prototype","toString","call","forEach","_ref","msg","isRequiredForA11y","labelKeyType","labelKey","optionType","oneOfType","object","string","selectedType","onChange"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { isFunction, values, warn } from './utils';\nimport { SIZE } from './constants';\nvar INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\nexport var sizeType = PropTypes.oneOf(values(SIZE));\n/**\n * Allows additional warnings or messaging related to prop validation.\n */\n\nexport function checkPropType(validator, callback) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT;\n\n    PropTypes.checkPropTypes((_PropTypes$checkPropT = {}, _PropTypes$checkPropT[propName] = validator, _PropTypes$checkPropT), props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props, propName, componentName) {\n  var caseSensitive = props.caseSensitive,\n      filterBy = props.filterBy;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function defaultInputValueType(props, propName, componentName) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      multiple = props.multiple,\n      selected = props.selected;\n  var name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), \"`defaultInputValue` will be overridden by the value from `\" + name + \"`.\");\n}\nexport function defaultSelectedType(props, propName, componentName) {\n  var defaultSelected = props.defaultSelected,\n      multiple = props.multiple;\n  warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' + 'Typeahead in single-select mode. The selections will be truncated to a ' + 'single selection.');\n}\nexport function highlightOnlyResultType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      highlightOnlyResult = props.highlightOnlyResult;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props, propName, componentName) {\n  var filterBy = props.filterBy,\n      ignoreDiacritics = props.ignoreDiacritics;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(props, propName, componentName) {\n  var inputProps = props.inputProps;\n\n  if (!(inputProps && Object.prototype.toString.call(inputProps) === '[object Object]')) {\n    return;\n  } // Blacklisted properties.\n\n\n  INPUT_PROPS_BLACKLIST.forEach(function (_ref) {\n    var alt = _ref.alt,\n        prop = _ref.prop;\n    var msg = alt ? \" Use the top-level `\" + alt + \"` prop instead.\" : null;\n    warn(!inputProps[prop], \"The `\" + prop + \"` property of `inputProps` will be ignored.\" + msg);\n  });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n  warn(props[propName] != null, \"The prop `\" + propName + \"` is required to make `\" + componentName + \"` \" + 'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport var optionType = PropTypes.oneOfType([PropTypes.object, PropTypes.string]);\nexport function selectedType(props, propName, componentName) {\n  var multiple = props.multiple,\n      onChange = props.onChange,\n      selected = props.selected;\n  warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' + 'in single-select mode. This may lead to unexpected behaviors or errors.');\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}"]},"metadata":{},"sourceType":"module"}