{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\n\nvar Chart =\n/** @class */\nfunction (_super) {\n  __extends(Chart, _super); // @ts-ignore\n\n\n  function Chart(props) {\n    var _this = this;\n\n    var container = props.container,\n        width = props.width,\n        height = props.height,\n        _a = props.autoFit,\n        autoFit = _a === void 0 ? false : _a,\n        padding = props.padding,\n        _b = props.renderer,\n        renderer = _b === void 0 ? 'canvas' : _b,\n        pixelRatio = props.pixelRatio,\n        _c = props.localRefresh,\n        localRefresh = _c === void 0 ? true : _c,\n        _d = props.visible,\n        visible = _d === void 0 ? true : _d,\n        _e = props.defaultInteractions,\n        defaultInteractions = _e === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter'] : _e,\n        options = props.options,\n        limitInPlot = props.limitInPlot,\n        theme = props.theme;\n    var ele = isString(container) ? document.getElementById(container) : container; // 生成内部正式绘制的 div 元素\n\n    var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement); // if autoFit, use the container size, to avoid the graph render twice.\n\n    var size = getChartSize(ele, autoFit, width, height);\n    var G = getEngine(renderer);\n    var canvas = new G.Canvas(__assign({\n      container: wrapperElement,\n      pixelRatio: pixelRatio,\n      localRefresh: localRefresh\n    }, size)); // 调用 view 的创建\n\n    _this = _super.call(this, {\n      parent: null,\n      canvas: canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      padding: padding,\n      visible: visible,\n      options: options,\n      limitInPlot: limitInPlot,\n      theme: theme\n    }) || this;\n    /**\n     * when container size changed, change chart size props, and re-render.\n     */\n\n    _this.onResize = debounce(function () {\n      _this.forceFit();\n    }, 300);\n    _this.ele = ele;\n    _this.canvas = canvas;\n    _this.width = size.width;\n    _this.height = size.height;\n    _this.autoFit = autoFit;\n    _this.localRefresh = localRefresh;\n    _this.renderer = renderer;\n    _this.wrapperElement = wrapperElement; // 自适应大小\n\n    _this.updateCanvasStyle();\n\n    _this.bindAutoFit();\n\n    _this.initDefaultInteractions(defaultInteractions);\n\n    return _this;\n  }\n\n  Chart.prototype.initDefaultInteractions = function (interactions) {\n    var _this = this;\n\n    each(interactions, function (interaction) {\n      _this.interaction(interaction);\n    });\n  };\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n\n\n  Chart.prototype.changeSize = function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height); // 重新渲染\n\n    this.render(true);\n    return this;\n  };\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n\n\n  Chart.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  };\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n\n\n  Chart.prototype.changeVisible = function (visible) {\n    this.wrapperElement.style.display = visible ? '' : 'none';\n    return this;\n  };\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n\n\n  Chart.prototype.forceFit = function () {\n    // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n    var _a = getChartSize(this.ele, true, this.width, this.height),\n        width = _a.width,\n        height = _a.height;\n\n    this.changeSize(width, height);\n  };\n\n  Chart.prototype.updateCanvasStyle = function () {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n\n  Chart.prototype.bindAutoFit = function () {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n\n  Chart.prototype.unbindAutoFit = function () {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n\n  return Chart;\n}(View);\n\nexport default Chart;","map":{"version":3,"sources":["../../src/chart/chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nvar Chart = /** @class */ (function (_super) {\n    __extends(Chart, _super);\n    // @ts-ignore\n    function Chart(props) {\n        var _this = this;\n        var container = props.container, width = props.width, height = props.height, _a = props.autoFit, autoFit = _a === void 0 ? false : _a, padding = props.padding, _b = props.renderer, renderer = _b === void 0 ? 'canvas' : _b, pixelRatio = props.pixelRatio, _c = props.localRefresh, localRefresh = _c === void 0 ? true : _c, _d = props.visible, visible = _d === void 0 ? true : _d, _e = props.defaultInteractions, defaultInteractions = _e === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter'] : _e, options = props.options, limitInPlot = props.limitInPlot, theme = props.theme;\n        var ele = isString(container) ? document.getElementById(container) : container;\n        // 生成内部正式绘制的 div 元素\n        var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n        ele.appendChild(wrapperElement);\n        // if autoFit, use the container size, to avoid the graph render twice.\n        var size = getChartSize(ele, autoFit, width, height);\n        var G = getEngine(renderer);\n        var canvas = new G.Canvas(__assign({ container: wrapperElement, pixelRatio: pixelRatio,\n            localRefresh: localRefresh }, size));\n        // 调用 view 的创建\n        _this = _super.call(this, {\n            parent: null,\n            canvas: canvas,\n            // create 3 group layers for views.\n            backgroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n            middleGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n            foregroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n            padding: padding,\n            visible: visible,\n            options: options,\n            limitInPlot: limitInPlot,\n            theme: theme,\n        }) || this;\n        /**\n         * when container size changed, change chart size props, and re-render.\n         */\n        _this.onResize = debounce(function () {\n            _this.forceFit();\n        }, 300);\n        _this.ele = ele;\n        _this.canvas = canvas;\n        _this.width = size.width;\n        _this.height = size.height;\n        _this.autoFit = autoFit;\n        _this.localRefresh = localRefresh;\n        _this.renderer = renderer;\n        _this.wrapperElement = wrapperElement;\n        // 自适应大小\n        _this.updateCanvasStyle();\n        _this.bindAutoFit();\n        _this.initDefaultInteractions(defaultInteractions);\n        return _this;\n    }\n    Chart.prototype.initDefaultInteractions = function (interactions) {\n        var _this = this;\n        each(interactions, function (interaction) {\n            _this.interaction(interaction);\n        });\n    };\n    /**\n     * 改变图表大小，同时重新渲染。\n     * @param width 图表宽度\n     * @param height 图表高度\n     * @returns\n     */\n    Chart.prototype.changeSize = function (width, height) {\n        this.width = width;\n        this.height = height;\n        this.canvas.changeSize(width, height);\n        // 重新渲染\n        this.render(true);\n        return this;\n    };\n    /**\n     * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n     * @returns void\n     */\n    Chart.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.unbindAutoFit();\n        this.canvas.destroy();\n        removeDom(this.wrapperElement);\n        this.wrapperElement = null;\n    };\n    /**\n     * 显示或隐藏图表\n     * @param visible 是否可见，true 表示显示，false 表示隐藏\n     * @returns\n     */\n    Chart.prototype.changeVisible = function (visible) {\n        this.wrapperElement.style.display = visible ? '' : 'none';\n        return this;\n    };\n    /**\n     * 自动根据容器大小 resize 画布\n     */\n    Chart.prototype.forceFit = function () {\n        // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n        var _a = getChartSize(this.ele, true, this.width, this.height), width = _a.width, height = _a.height;\n        this.changeSize(width, height);\n    };\n    Chart.prototype.updateCanvasStyle = function () {\n        modifyCSS(this.canvas.get('el'), {\n            display: 'inline-block',\n            verticalAlign: 'middle',\n        });\n    };\n    Chart.prototype.bindAutoFit = function () {\n        if (this.autoFit) {\n            window.addEventListener('resize', this.onResize);\n        }\n    };\n    Chart.prototype.unbindAutoFit = function () {\n        if (this.autoFit) {\n            window.removeEventListener('resize', this.onResize);\n        }\n    };\n    return Chart;\n}(View));\nexport default Chart;\n//# sourceMappingURL=chart.js.map"]},"metadata":{},"sourceType":"module"}