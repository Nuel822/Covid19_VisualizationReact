{"ast":null,"code":"/**\n * @todo Whether it can(or necessary to) keep consistent with the structure of G.Event or directly use the structure of G.Event\n * G2 事件的事件包装类，基于 G.Event\n */\nvar Event =\n/** @class */\nfunction () {\n  function Event(view, gEvent, data) {\n    this.view = view;\n    this.gEvent = gEvent;\n    this.data = data;\n    this.type = gEvent.type;\n  }\n\n  Object.defineProperty(Event.prototype, \"target\", {\n    // below props are proxy props of G.event convenient\n\n    /** the real trigger shape of the event */\n    get: function () {\n      // @todo G 中事件定义为 object 不正确，这里先 ignore\n      // @ts-ignore\n      return this.gEvent.target;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"event\", {\n    /** 获取对应的 dom 原生时间 */\n    get: function () {\n      return this.gEvent.originalEvent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"x\", {\n    /** x 画布坐标 */\n    get: function () {\n      return this.gEvent.x;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"y\", {\n    /** y 画布坐标 */\n    get: function () {\n      return this.gEvent.y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"clientX\", {\n    /** x 窗口坐标 */\n    get: function () {\n      return this.gEvent.clientX;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"clientY\", {\n    /** y 窗口坐标 */\n    get: function () {\n      return this.gEvent.clientY;\n    },\n    enumerable: true,\n    configurable: true\n  }); // end for proxy events\n\n  /**\n   * event string\n   * @returns string\n   */\n\n  Event.prototype.toString = function () {\n    return \"[Event (type=\" + this.type + \")]\";\n  };\n  /**\n   * clone a new event with same attributes\n   * @returns [[Event]]\n   */\n\n\n  Event.prototype.clone = function () {\n    return new Event(this.view, this.gEvent, this.data);\n  };\n\n  return Event;\n}();\n\nexport default Event;","map":{"version":3,"sources":["../../src/chart/event.ts"],"names":[],"mappings":"AAIA;;;;AAIA,IAAA,KAAA;AAAA;AAAA,YAAA;AAUE,WAAA,KAAA,CAAY,IAAZ,EAAwB,MAAxB,EAAwC,IAAxC,EAAoD;AAClD,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACD;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAHjB;;AAEA;SACA,YAAA;AACE;AACA;AACA,aAAO,KAAK,MAAL,CAAY,MAAnB;AACD,KAJgB;oBAAA;;AAAA,GAAjB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AADhB;SACA,YAAA;AACE,aAAO,KAAK,MAAL,CAAY,aAAnB;AACD,KAFe;oBAAA;;AAAA,GAAhB;AAKA,EAAA,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AADZ;SACA,YAAA;AACE,aAAO,KAAK,MAAL,CAAY,CAAnB;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAKA,EAAA,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AADZ;SACA,YAAA;AACE,aAAO,KAAK,MAAL,CAAY,CAAnB;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAKA,EAAA,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AADlB;SACA,YAAA;AACE,aAAO,KAAK,MAAL,CAAY,OAAnB;AACD,KAFiB;oBAAA;;AAAA,GAAlB;AAKA,EAAA,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AADlB;SACA,YAAA;AACE,aAAO,KAAK,MAAL,CAAY,OAAnB;AACD,KAFiB;oBAAA;;AAAA,GAAlB,EA/CF,CAkDE;;AAEA;;;;;AAIO,EAAA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACE,WAAO,kBAAgB,KAAK,IAArB,GAAyB,IAAhC;AACD,GAFM;AAIP;;;;;;AAIO,EAAA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,WAAO,IAAI,KAAJ,CAAU,KAAK,IAAf,EAAqB,KAAK,MAA1B,EAAkC,KAAK,IAAvC,CAAP;AACD,GAFM;;AAGT,SAAA,KAAA;AAAC,CAnED,EAAA","sourceRoot":"","sourcesContent":["/**\n * @todo Whether it can(or necessary to) keep consistent with the structure of G.Event or directly use the structure of G.Event\n * G2 事件的事件包装类，基于 G.Event\n */\nvar Event = /** @class */ (function () {\n    function Event(view, gEvent, data) {\n        this.view = view;\n        this.gEvent = gEvent;\n        this.data = data;\n        this.type = gEvent.type;\n    }\n    Object.defineProperty(Event.prototype, \"target\", {\n        // below props are proxy props of G.event convenient\n        /** the real trigger shape of the event */\n        get: function () {\n            // @todo G 中事件定义为 object 不正确，这里先 ignore\n            // @ts-ignore\n            return this.gEvent.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"event\", {\n        /** 获取对应的 dom 原生时间 */\n        get: function () {\n            return this.gEvent.originalEvent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"x\", {\n        /** x 画布坐标 */\n        get: function () {\n            return this.gEvent.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"y\", {\n        /** y 画布坐标 */\n        get: function () {\n            return this.gEvent.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"clientX\", {\n        /** x 窗口坐标 */\n        get: function () {\n            return this.gEvent.clientX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"clientY\", {\n        /** y 窗口坐标 */\n        get: function () {\n            return this.gEvent.clientY;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // end for proxy events\n    /**\n     * event string\n     * @returns string\n     */\n    Event.prototype.toString = function () {\n        return \"[Event (type=\" + this.type + \")]\";\n    };\n    /**\n     * clone a new event with same attributes\n     * @returns [[Event]]\n     */\n    Event.prototype.clone = function () {\n        return new Event(this.view, this.gEvent, this.data);\n    };\n    return Event;\n}());\nexport default Event;\n//# sourceMappingURL=event.js.map"]},"metadata":{},"sourceType":"module"}