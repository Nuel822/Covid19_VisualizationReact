{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, map, mix, remove, set, size, uniq, uniqueId } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isFullCircle, isPointInCoordinate } from '../util/coordinate';\nimport { findDataByPoint } from '../util/tooltip';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\n/**\n * G2 视图 View 类\n */\n\nvar View =\n/** @class */\nfunction (_super) {\n  __extends(View, _super);\n\n  function View(props) {\n    var _this = _super.call(this, {\n      visible: props.visible\n    }) || this;\n    /** view id，全局唯一。 */\n\n\n    _this.id = uniqueId('view');\n    /** 所有的子 view。 */\n\n    _this.views = [];\n    /** 所有的 geometry 实例。 */\n\n    _this.geometries = [];\n    /** 所有的组件 controllers。 */\n\n    _this.controllers = [];\n    /** 所有的 Interaction 实例。 */\n\n    _this.interactions = {};\n    /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n\n    _this.limitInPlot = false; // 配置信息存储\n\n    _this.options = {\n      data: [],\n      animate: true\n    }; // 初始化为空\n\n    /** 配置开启的组件插件，默认为全局配置的组件。 */\n\n    _this.usedControllers = getComponentControllerNames();\n    /** 所有的 scales */\n\n    _this.scalePool = new ScalePool();\n    /** 布局函数 */\n\n    _this.layoutFunc = defaultLayout;\n    /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n\n    _this.isPreMouseInPlot = false;\n    /** 默认标识位，用于判定数据是否更新 */\n\n    _this.isDataChanged = false;\n    /** 从当前这个 view 创建的 scale key */\n\n    _this.createdScaleKeys = new Map();\n\n    _this.onCanvasEvent = function (evt) {\n      var name = evt.name;\n\n      if (!name.includes(':')) {\n        // 非委托事件\n        var e = _this.createViewEvent(evt); // 处理 plot 事件\n\n\n        _this.doPlotEvent(e);\n\n        _this.emit(name, e);\n      }\n    };\n    /**\n     * 触发事件之后\n     * @param evt\n     */\n\n\n    _this.onDelegateEvents = function (evt) {\n      // 阻止继续冒泡，防止重复事件触发\n      // evt.preventDefault();\n      var type = evt.type,\n          name = evt.name;\n\n      if (!name.includes(':')) {\n        return;\n      } // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n\n\n      var e = _this.createViewEvent(evt); // 包含有基本事件、组合事件\n\n\n      _this.emit(name, e);\n\n      if (evt.delegateObject) {\n        var events_1 = _this.getEvents();\n\n        var currentTarget = evt.currentTarget;\n        var inhertNames = currentTarget.get('inheritNames');\n        each(inhertNames, function (subName) {\n          var eventName = subName + \":\" + type;\n\n          if (events_1[eventName]) {\n            _this.emit(eventName, e);\n          }\n        });\n      }\n    };\n\n    var parent = props.parent,\n        canvas = props.canvas,\n        backgroundGroup = props.backgroundGroup,\n        middleGroup = props.middleGroup,\n        foregroundGroup = props.foregroundGroup,\n        _a = props.region,\n        region = _a === void 0 ? {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: 1,\n        y: 1\n      }\n    } : _a,\n        padding = props.padding,\n        theme = props.theme,\n        options = props.options,\n        limitInPlot = props.limitInPlot;\n    _this.parent = parent;\n    _this.canvas = canvas;\n    _this.backgroundGroup = backgroundGroup;\n    _this.middleGroup = middleGroup;\n    _this.foregroundGroup = foregroundGroup;\n    _this.region = region;\n    _this.padding = padding; // 接受父 view 传入的参数\n\n    _this.options = __assign(__assign({}, _this.options), options);\n    _this.limitInPlot = limitInPlot; // 初始化 theme\n\n    _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), theme) : getTheme(theme);\n\n    _this.init();\n\n    return _this;\n  }\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n\n\n  View.prototype.setLayout = function (layout) {\n    this.layoutFunc = layout;\n  };\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n\n\n  View.prototype.init = function () {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox(); // 事件委托机制\n\n    this.initEvents(); // 初始化组件 controller\n\n    this.initComponentController(); // 创建 coordinate controller\n\n    this.coordinateController = new CoordinateController(this.options.coordinate);\n    this.initOptions(); // 递归初始化子 view\n\n    each(this.views, function (view) {\n      view.init();\n    });\n  };\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   */\n\n\n  View.prototype.render = function (isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER); // 递归渲染\n\n    this.paint(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n\n\n  View.prototype.clear = function () {\n    var _this = this;\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR); // 1. 清空缓存和计算数据\n\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    // 2. 清空 geometries\n\n    each(this.geometries, function (geometry) {\n      geometry.clear();\n    });\n    this.geometries = []; // 3. 清空 controllers\n\n    each(this.controllers, function (controller) {\n      controller.clear();\n    }); // 4. 删除 scale 缓存\n\n    this.createdScaleKeys.forEach(function (v, k) {\n      _this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear(); // 递归处理子 view\n\n    each(this.views, function (view) {\n      view.clear();\n    });\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  };\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n\n\n  View.prototype.destroy = function () {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    var interactions = this.interactions; // 销毁 interactions\n\n    each(interactions, function (interaction) {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n    this.clear(); // 销毁 controller 中的组件\n\n    each(this.controllers, function (controller) {\n      controller.destroy();\n    });\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    _super.prototype.destroy.call(this);\n  };\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n\n\n  View.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n\n    this.geometries.forEach(function (geometry) {\n      geometry.changeVisible(visible);\n    });\n    this.controllers.forEach(function (controller) {\n      controller.changeVisible(visible);\n    });\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible); // group.set('visible', visible) 不会触发自动刷新\n\n    this.getCanvas().draw();\n    return this;\n  };\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n\n\n  View.prototype.data = function (data) {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n\n\n  View.prototype.source = function (data) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  };\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n\n\n  View.prototype.filter = function (field, condition) {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    } // condition 为空，则表示删除过滤条件\n\n\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  };\n\n  View.prototype.axis = function (field, axisOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  };\n\n  View.prototype.legend = function (field, legendOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  };\n\n  View.prototype.scale = function (field, scaleOption) {\n    var _this = this;\n\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, function (v, k) {\n        set(_this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  };\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置\n   * @returns View\n   */\n\n\n  View.prototype.tooltip = function (cfg) {\n    set(this.options, 'tooltip', cfg);\n    return this;\n  };\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   *\n   * @returns [[Annotation]]\n   */\n\n\n  View.prototype.annotation = function () {\n    return this.getController('annotation');\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n\n\n  View.prototype.guide = function () {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  };\n\n  View.prototype.coordinate = function (type, coordinateCfg) {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', {\n        type: type,\n        cfg: coordinateCfg\n      });\n    } else {\n      set(this.options, 'coordinate', type);\n    } // 更新 coordinate 配置\n\n\n    this.coordinateController.update(this.options.coordinate);\n    return this.coordinateController;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n\n\n  View.prototype.coord = function (type, coordinateCfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.'); // @ts-ignore\n\n    return this.coordinate(type, coordinateCfg);\n  };\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n\n\n  View.prototype.facet = function (type, cfg) {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    } // 创建新的分面\n\n\n    var Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(\"facet '\" + type + \"' is not exist!\");\n    }\n\n    this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), {\n      type: type\n    }));\n    return this;\n  };\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n\n\n  View.prototype.animate = function (status) {\n    set(this.options, 'animate', status);\n    return this;\n  };\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n\n\n  View.prototype.updateOptions = function (options) {\n    this.clear(); // 清空\n\n    mix(this.options, options);\n    this.initOptions();\n    return this;\n  };\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n\n\n  View.prototype.option = function (name, opt) {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(\"Can't use built in variable name \\\"\" + name + \"\\\", please change another one.\");\n    } // 存入到 option 中\n\n\n    set(this.options, name, opt);\n    return this;\n  };\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n\n\n  View.prototype.theme = function (theme) {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, theme) : getTheme(theme);\n    return this;\n  };\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   *\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n\n\n  View.prototype.interaction = function (name, cfg) {\n    var existInteraction = this.interactions[name]; // 存在则先销毁已有的\n\n    if (existInteraction) {\n      existInteraction.destroy();\n    } // 新建交互实例\n\n\n    var interaction = createInteraction(name, this, cfg);\n\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n\n    return this;\n  };\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n\n\n  View.prototype.removeInteraction = function (name) {\n    var existInteraction = this.interactions[name]; // 存在则先销毁已有的\n\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  };\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n\n\n  View.prototype.changeData = function (data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA); // 1. 保存数据\n\n    this.data(data); // 2. 渲染\n\n    this.paint(true); // 3. 遍历子 view 进行 change data\n\n    each(this.views, function (view) {\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    });\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA);\n  };\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n\n\n  View.prototype.createView = function (cfg) {\n    // 子 view 共享 options 配置数据\n    var sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible\n    };\n    var v = new View(__assign(__assign({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: this.middleGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: this.foregroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      theme: this.themeObject,\n      padding: this.padding\n    }, cfg), {\n      options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {}))\n    }));\n    this.views.push(v);\n    return v;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n\n\n  View.prototype.view = function (cfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  };\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n\n\n  View.prototype.removeView = function (view) {\n    var removedView = remove(this.views, function (v) {\n      return v === view;\n    })[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  };\n  /* end View 管理相关的 API */\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n\n\n  View.prototype.getCoordinate = function () {\n    return this.coordinateInstance;\n  };\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n\n\n  View.prototype.getTheme = function () {\n    return this.themeObject;\n  };\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n\n\n  View.prototype.getXScale = function () {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    var g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  };\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n\n\n  View.prototype.getYScales = function () {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    return uniq(map(this.geometries, function (g) {\n      return g.getYScale();\n    }));\n  };\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n\n\n  View.prototype.getScalesByDim = function (dimType) {\n    var geometries = this.geometries;\n    var scales = {};\n\n    for (var _i = 0, geometries_1 = geometries; _i < geometries_1.length; _i++) {\n      var geometry = geometries_1[_i];\n      var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  };\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n\n\n  View.prototype.getScaleByField = function (field, key) {\n    var defaultKey = key ? key : this.getScaleKey(field); // 调用根节点 view 的方法获取\n\n    return this.getRootView().scalePool.getScale(defaultKey);\n  };\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n\n\n  View.prototype.getOptions = function () {\n    return this.options;\n  };\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n\n\n  View.prototype.getData = function () {\n    return this.filteredData;\n  };\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n\n\n  View.prototype.getLayer = function (layer) {\n    return layer === LAYER.BG ? this.backgroundGroup : layer === LAYER.MID ? this.middleGroup : layer === LAYER.FORE ? this.foregroundGroup : this.foregroundGroup;\n  };\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n\n\n  View.prototype.isPointInPlot = function (point) {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  };\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n\n\n  View.prototype.getLegendAttributes = function () {\n    return flatten(map(this.geometries, function (g) {\n      return g.getGroupAttributes();\n    }));\n  };\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n\n\n  View.prototype.getGroupScales = function () {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    var scales = map(this.geometries, function (g) {\n      return g.getGroupScales();\n    });\n    return uniq(flatten(scales));\n  };\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n\n\n  View.prototype.getCanvas = function () {\n    return this.getRootView().canvas;\n  };\n  /**\n   * 获得根节点 view。\n   */\n\n\n  View.prototype.getRootView = function () {\n    var v = this;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n\n      break;\n    }\n\n    return v;\n  };\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n\n\n  View.prototype.getXY = function (data) {\n    var coordinate = this.getCoordinate();\n    var xScales = this.getScalesByDim('x');\n    var yScales = this.getScalesByDim('y');\n    var x;\n    var y;\n    each(data, function (value, key) {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({\n        x: x,\n        y: y\n      });\n    }\n  };\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n\n\n  View.prototype.getController = function (name) {\n    return find(this.controllers, function (c) {\n      return c.name === name;\n    });\n  };\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n\n\n  View.prototype.showTooltip = function (point) {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n\n    return this;\n  };\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n\n\n  View.prototype.hideTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n\n\n  View.prototype.lockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n\n\n  View.prototype.unlockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n\n\n  View.prototype.isTooltipLocked = function () {\n    var tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  };\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n\n\n  View.prototype.getTooltipItems = function (point) {\n    var tooltip = this.getController('tooltip');\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  };\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n\n\n  View.prototype.getSnapRecords = function (point) {\n    var geometries = this.geometries;\n    var rst = [];\n    each(geometries, function (geom) {\n      var dataArray = geom.dataArray;\n      var record;\n      each(dataArray, function (data) {\n        record = findDataByPoint(point, data, geom);\n\n        if (record) {\n          rst.push(record);\n        }\n      });\n    }); // 同样递归处理子 views\n\n    each(this.views, function (view) {\n      var snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    });\n    return rst;\n  };\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n\n\n  View.prototype.getComponents = function () {\n    var components = [];\n    each(this.controllers, function (controller) {\n      components.push.apply(components, controller.getComponents());\n    });\n    return components;\n  };\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n\n\n  View.prototype.filterData = function (data) {\n    var filters = this.options.filters; // 不存在 filters，则不需要进行数据过滤\n\n    if (size(filters) === 0) {\n      return data;\n    } // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n\n\n    return filter(data, function (datum, idx) {\n      // 所有的 filter 字段\n      var fields = Object.keys(filters); // 所有的条件都通过，才算通过\n\n      return fields.every(function (field) {\n        var condition = filters[field]; // condition 返回 true，则保留\n\n        return condition(datum[field], datum, idx);\n      });\n    });\n  };\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n\n\n  View.prototype.filterFieldData = function (field, data) {\n    var filters = this.options.filters;\n    var condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n\n    return filter(data, function (datum, idx) {\n      return condition(datum[field], datum, idx);\n    });\n  };\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n\n\n  View.prototype.adjustCoordinate = function () {\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  };\n\n  View.prototype.paint = function (isUpdate) {\n    this.renderDataRecursive(isUpdate); // 处理 sync scale 的逻辑\n\n    this.syncScale();\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n    this.renderLayoutRecursive(isUpdate);\n    this.renderPaintRecursive(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n    this.isDataChanged = false; // 渲染完毕复位\n  };\n  /**\n   * 替换处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderLayoutRecursive = function (isUpdate) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox(); // 2. 更新 coordinate\n\n    this.adjustCoordinate(); // 3. 初始化组件 component\n\n    this.initComponents(isUpdate); // 4. 进行布局，计算 coordinateBBox，进行组件布局，update 位置\n\n    this.doLayout(); // 5. 布局完之后，coordinate 的范围确定了，调整 coordinate 组件\n\n    this.adjustCoordinate(); // 同样递归处理子 views\n\n    each(this.views, function (view) {\n      view.renderLayoutRecursive(isUpdate);\n    });\n  };\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderPaintRecursive = function (isUpdate) {\n    if (this.limitInPlot) {\n      var middleGroup = this.middleGroup;\n\n      var _a = getCoordinateClipCfg(this.coordinateInstance),\n          type = _a.type,\n          attrs = _a.attrs;\n\n      middleGroup.setClip({\n        type: type,\n        attrs: attrs\n      });\n    } // 1. 渲染几何标记\n\n\n    this.paintGeometries(isUpdate); // 2. 绘制组件\n\n    this.renderComponents(isUpdate); // 同样递归处理子 views\n\n    each(this.views, function (view) {\n      view.renderPaintRecursive(isUpdate);\n    });\n  }; // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n\n\n  View.prototype.createScale = function (field, data, scaleDef, key) {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    var currentScaleDef = get(this.options.scales, [field]);\n\n    var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef); // 2. 是否存在父 view，在则递归，否则创建\n\n\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    } // 3. 在根节点 view 通过 scalePool 创建\n\n\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  };\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderDataRecursive = function (isUpdate) {\n    // 1. 处理数据\n    this.doFilterData(); // 2. 创建实例\n\n    this.createCoordinate(); // 3. 初始化 Geometry\n\n    this.initGeometries(isUpdate); // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n\n    this.renderFacet(isUpdate); // 同样递归处理子 views\n\n    each(this.views, function (view) {\n      view.renderDataRecursive(isUpdate);\n    });\n  };\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n\n\n  View.prototype.calculateViewBBox = function () {\n    var x;\n    var y;\n    var width;\n    var height;\n\n    if (this.parent) {\n      var bbox = this.parent.coordinateBBox; // 存在 parent， 那么就是通过父容器大小计算\n\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    var _a = this.region,\n        start = _a.start,\n        end = _a.end; // 根据 region 计算当前 view 的 bbox 大小。\n\n    this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y)); // 初始的 coordinate bbox 大小\n\n    this.coordinateBBox = this.viewBBox;\n  };\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n\n\n  View.prototype.initEvents = function () {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n    this.canvas.on('*', this.onCanvasEvent);\n  };\n  /**\n   * 初始化插件\n   */\n\n\n  View.prototype.initComponentController = function () {\n    var _this = this;\n\n    each(this.usedControllers, function (controllerName) {\n      var Ctor = getComponentController(controllerName);\n\n      if (Ctor) {\n        _this.controllers.push(new Ctor(_this));\n      }\n    });\n  };\n\n  View.prototype.createViewEvent = function (evt) {\n    var shape = evt.shape,\n        name = evt.name;\n    var data = shape ? shape.get('origin') : null; // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n\n    var e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  };\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n\n\n  View.prototype.doPlotEvent = function (e) {\n    var type = e.type,\n        x = e.x,\n        y = e.y;\n    var point = {\n      x: x,\n      y: y\n    };\n    var ALL_EVENTS = ['mousedown', 'mouseup', 'mousemove', 'mouseleave', 'mousewheel', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'click', 'dblclick', 'contextmenu'];\n\n    if (ALL_EVENTS.includes(type)) {\n      var currentInPlot = this.isPointInPlot(point);\n\n      if (currentInPlot) {\n        var TYPE = \"plot:\" + type; // 组合 plot 事件\n\n        e.type = TYPE;\n        this.emit(TYPE, e);\n\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      } // 对于 mouseenter, mouseleave 的计算处理\n\n\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            e.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, e);\n          }\n\n          e.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, e);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            e.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, e);\n          }\n\n          e.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, e);\n        } // 赋新的状态值\n\n\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            e.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, e);\n          }\n\n          e.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, e);\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }; // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n\n\n  View.prototype.doFilterData = function () {\n    var data = this.options.data;\n    this.filteredData = this.filterData(data);\n  };\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n\n\n  View.prototype.initGeometries = function (isUpdate) {\n    var _this = this; // 初始化图形的之前，先创建 / 更新 scales\n\n\n    this.createOrUpdateScales(); // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n\n    each(this.geometries, function (geometry) {\n      // 保持 scales 引用不要变化\n      geometry.scales = _this.getGeometryScales();\n      var cfg = {\n        coordinate: _this.getCoordinate(),\n        scaleDefs: get(_this.options, 'scales', {}),\n        data: _this.filteredData,\n        theme: _this.themeObject,\n        isDataChanged: _this.isDataChanged\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }); // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n\n    this.adjustScales();\n  };\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n\n\n  View.prototype.createOrUpdateScales = function () {\n    var _this = this;\n\n    var fields = this.getScaleFields();\n    var groupedFields = this.getGroupedFields();\n\n    var _a = this.getOptions(),\n        data = _a.data,\n        scales = _a.scales;\n\n    var filteredData = this.filteredData;\n    each(fields, function (field) {\n      var scaleDef = get(scales, [field]); // 调用方法，递归去创建\n\n      var key = _this.getScaleKey(field);\n\n      _this.createScale(field, // 分组字段的 scale 使用未过滤的数据创建\n      groupedFields.includes(field) ? data : filteredData, scaleDef, key); // 缓存从当前 view 创建的 scale key\n\n\n      _this.createdScaleKeys.set(key, true);\n    });\n  };\n  /**\n   * 处理 scale 同步逻辑\n   */\n\n\n  View.prototype.syncScale = function () {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync();\n  };\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n\n\n  View.prototype.getGeometryScales = function () {\n    var _this = this;\n\n    var fields = this.getScaleFields();\n    var scales = {};\n    each(fields, function (field) {\n      scales[field] = _this.getScaleByField(field);\n    });\n    return scales;\n  };\n\n  View.prototype.getScaleFields = function () {\n    var fields = this.geometries.reduce(function (r, geometry) {\n      r.push.apply(r, geometry.getScaleFields());\n      return r;\n    }, []);\n    return uniq(fields);\n  };\n\n  View.prototype.getGroupedFields = function () {\n    var fields = this.geometries.reduce(function (r, geometry) {\n      r.push.apply(r, geometry.getGroupFields());\n      return r;\n    }, []);\n    return uniq(fields);\n  };\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n\n\n  View.prototype.adjustScales = function () {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  };\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n\n\n  View.prototype.adjustCategoryScaleRange = function () {\n    var _this = this;\n\n    var xyScales = __spreadArrays([this.getXScale()], this.getYScales()).filter(function (e) {\n      return !!e;\n    });\n\n    var coordinate = this.getCoordinate();\n    var scaleOptions = this.options.scales;\n    each(xyScales, function (scale) {\n      // @ts-ignore\n      var field = scale.field,\n          values = scale.values,\n          isCategory = scale.isCategory,\n          isIdentity = scale.isIdentity; // 分类或者 identity 的 scale 才进行处理\n\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          var count = values.length;\n          var range = void 0;\n\n          if (count === 1) {\n            range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5] 的状态\n          } else {\n            var widthRatio = 1;\n            var offset = 0;\n\n            if (isFullCircle(coordinate)) {\n              if (!coordinate.isTransposed) {\n                range = [0, 1 - 1 / count];\n              } else {\n                widthRatio = get(_this.theme, 'widthRatio.multiplePie', 1 / 1.3);\n                offset = 1 / count * widthRatio;\n                range = [offset / 2, 1 - offset / 2];\n              }\n            } else {\n              offset = 1 / count / 2; // 两边留下分类空间的一半\n\n              range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时\n            }\n          } // 更新 range\n\n\n          scale.range = range;\n        }\n      }\n    });\n  };\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n\n\n  View.prototype.initComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    each(this.controllers, function (controller) {\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    });\n  };\n\n  View.prototype.doLayout = function () {\n    this.layoutFunc(this);\n  };\n  /**\n   * 创建坐标系\n   * @private\n   */\n\n\n  View.prototype.createCoordinate = function () {\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  };\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n\n\n  View.prototype.paintGeometries = function (isUpdate) {\n    var _this = this;\n\n    var doAnimation = this.options.animate; // geometry 的 paint 阶段\n\n    this.geometries.map(function (geometry) {\n      geometry.coordinate = _this.getCoordinate();\n      geometry.canvasRegion = {\n        x: _this.viewBBox.x,\n        y: _this.viewBBox.y,\n        minX: _this.viewBBox.minX,\n        minY: _this.viewBBox.minY,\n        maxX: _this.viewBBox.maxX,\n        maxY: _this.viewBBox.maxY,\n        width: _this.viewBBox.width,\n        height: _this.viewBBox.height\n      };\n\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n\n      geometry.paint(isUpdate);\n    });\n  };\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    each(this.getComponents(), function (co) {\n      co.component.render();\n    });\n  };\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderFacet = function (isUpdate) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear(); // 计算分面数据\n\n        this.facetInstance.init(); // 渲染组件和 views\n\n        this.facetInstance.render();\n      }\n    }\n  };\n\n  View.prototype.initOptions = function () {\n    var _this = this;\n\n    var _a = this.options,\n        _b = _a.geometries,\n        geometries = _b === void 0 ? [] : _b,\n        _c = _a.interactions,\n        interactions = _c === void 0 ? [] : _c,\n        _d = _a.views,\n        views = _d === void 0 ? [] : _d,\n        _e = _a.annotations,\n        annotations = _e === void 0 ? [] : _e; // 创建 geometry 实例\n\n    geometries.forEach(function (geometryOption) {\n      _this.createGeometry(geometryOption);\n    }); // 创建 interactions 实例\n\n    interactions.forEach(function (interactionOption) {\n      var type = interactionOption.type,\n          cfg = interactionOption.cfg;\n\n      _this.interaction(type, cfg);\n    }); // 创建 view 实例\n\n    views.forEach(function (viewOption) {\n      _this.createView(viewOption);\n    }); // 设置 annotation\n\n    var annotationComponent = this.getController('annotation');\n    annotations.forEach(function (annotationOption) {\n      annotationComponent.annotation(annotationOption);\n    });\n  };\n\n  View.prototype.createGeometry = function (geometryOption) {\n    var type = geometryOption.type,\n        _a = geometryOption.cfg,\n        cfg = _a === void 0 ? {} : _a;\n\n    if (this[type]) {\n      var geometry_1 = this[type](cfg);\n      each(geometryOption, function (v, k) {\n        if (isFunction(geometry_1[k])) {\n          geometry_1[k](v);\n        }\n      });\n    }\n  };\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n\n\n  View.prototype.getScaleKey = function (field) {\n    return this.id + \"-\" + field;\n  };\n\n  return View;\n}(Base);\n\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\n\nexport function registerGeometry(name, Ctor) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    var props = __assign({\n      /** 图形容器 */\n      container: this.middleGroup.addGroup({\n        name: 'element'\n      }),\n      labelsContainer: this.foregroundGroup.addGroup({\n        name: 'element'\n      })\n    }, cfg);\n\n    var geometry = new Ctor(props);\n    this.geometries.push(geometry);\n    return geometry;\n  };\n}\nexport default View;","map":{"version":3,"sources":["../../src/chart/view.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, map, mix, remove, set, size, uniq, uniqueId, } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isFullCircle, isPointInCoordinate } from '../util/coordinate';\nimport { findDataByPoint } from '../util/tooltip';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\n/**\n * G2 视图 View 类\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(props) {\n        var _this = _super.call(this, { visible: props.visible }) || this;\n        /** view id，全局唯一。 */\n        _this.id = uniqueId('view');\n        /** 所有的子 view。 */\n        _this.views = [];\n        /** 所有的 geometry 实例。 */\n        _this.geometries = [];\n        /** 所有的组件 controllers。 */\n        _this.controllers = [];\n        /** 所有的 Interaction 实例。 */\n        _this.interactions = {};\n        /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n        _this.limitInPlot = false;\n        // 配置信息存储\n        _this.options = {\n            data: [],\n            animate: true,\n        }; // 初始化为空\n        /** 配置开启的组件插件，默认为全局配置的组件。 */\n        _this.usedControllers = getComponentControllerNames();\n        /** 所有的 scales */\n        _this.scalePool = new ScalePool();\n        /** 布局函数 */\n        _this.layoutFunc = defaultLayout;\n        /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n        _this.isPreMouseInPlot = false;\n        /** 默认标识位，用于判定数据是否更新 */\n        _this.isDataChanged = false;\n        /** 从当前这个 view 创建的 scale key */\n        _this.createdScaleKeys = new Map();\n        _this.onCanvasEvent = function (evt) {\n            var name = evt.name;\n            if (!name.includes(':')) { // 非委托事件\n                var e = _this.createViewEvent(evt);\n                // 处理 plot 事件\n                _this.doPlotEvent(e);\n                _this.emit(name, e);\n            }\n        };\n        /**\n         * 触发事件之后\n         * @param evt\n         */\n        _this.onDelegateEvents = function (evt) {\n            // 阻止继续冒泡，防止重复事件触发\n            // evt.preventDefault();\n            var type = evt.type, name = evt.name;\n            if (!name.includes(':')) {\n                return;\n            }\n            // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n            var e = _this.createViewEvent(evt);\n            // 包含有基本事件、组合事件\n            _this.emit(name, e);\n            if (evt.delegateObject) {\n                var events_1 = _this.getEvents();\n                var currentTarget = evt.currentTarget;\n                var inhertNames = currentTarget.get('inheritNames');\n                each(inhertNames, function (subName) {\n                    var eventName = subName + \":\" + type;\n                    if (events_1[eventName]) {\n                        _this.emit(eventName, e);\n                    }\n                });\n            }\n        };\n        var parent = props.parent, canvas = props.canvas, backgroundGroup = props.backgroundGroup, middleGroup = props.middleGroup, foregroundGroup = props.foregroundGroup, _a = props.region, region = _a === void 0 ? { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } } : _a, padding = props.padding, theme = props.theme, options = props.options, limitInPlot = props.limitInPlot;\n        _this.parent = parent;\n        _this.canvas = canvas;\n        _this.backgroundGroup = backgroundGroup;\n        _this.middleGroup = middleGroup;\n        _this.foregroundGroup = foregroundGroup;\n        _this.region = region;\n        _this.padding = padding;\n        // 接受父 view 传入的参数\n        _this.options = __assign(__assign({}, _this.options), options);\n        _this.limitInPlot = limitInPlot;\n        // 初始化 theme\n        _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), theme) : getTheme(theme);\n        _this.init();\n        return _this;\n    }\n    /**\n     * 设置 layout 布局函数\n     * @param layout 布局函数\n     * @returns void\n     */\n    View.prototype.setLayout = function (layout) {\n        this.layoutFunc = layout;\n    };\n    /**\n     * 生命周期：初始化\n     * @returns voids\n     */\n    View.prototype.init = function () {\n        // 计算画布的 viewBBox\n        this.calculateViewBBox();\n        // 事件委托机制\n        this.initEvents();\n        // 初始化组件 controller\n        this.initComponentController();\n        // 创建 coordinate controller\n        this.coordinateController = new CoordinateController(this.options.coordinate);\n        this.initOptions();\n        // 递归初始化子 view\n        each(this.views, function (view) {\n            view.init();\n        });\n    };\n    /**\n     * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n     * render 函数仅仅会处理 view 和子 view。\n     * @param isUpdate 是否触发更新流程。\n     */\n    View.prototype.render = function (isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER);\n        // 递归渲染\n        this.paint(isUpdate);\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER);\n        if (this.visible === false) {\n            // 用户在初始化的时候声明 visible: false\n            this.changeVisible(false);\n        }\n    };\n    /**\n     * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n     * @returns void\n     */\n    View.prototype.clear = function () {\n        var _this = this;\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n        // 1. 清空缓存和计算数据\n        this.filteredData = [];\n        this.coordinateInstance = undefined;\n        this.isDataChanged = false; // 复位\n        // 2. 清空 geometries\n        each(this.geometries, function (geometry) {\n            geometry.clear();\n        });\n        this.geometries = [];\n        // 3. 清空 controllers\n        each(this.controllers, function (controller) {\n            controller.clear();\n        });\n        // 4. 删除 scale 缓存\n        this.createdScaleKeys.forEach(function (v, k) {\n            _this.getRootView().scalePool.deleteScale(k);\n        });\n        this.createdScaleKeys.clear();\n        // 递归处理子 view\n        each(this.views, function (view) {\n            view.clear();\n        });\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n    };\n    /**\n     * 生命周期：销毁，完全无法使用。\n     * @returns void\n     */\n    View.prototype.destroy = function () {\n        // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n        var interactions = this.interactions;\n        // 销毁 interactions\n        each(interactions, function (interaction) {\n            if (interaction) {\n                // 有可能已经销毁，设置了 undefined\n                interaction.destroy();\n            }\n        });\n        this.clear();\n        // 销毁 controller 中的组件\n        each(this.controllers, function (controller) {\n            controller.destroy();\n        });\n        this.backgroundGroup.remove(true);\n        this.middleGroup.remove(true);\n        this.foregroundGroup.remove(true);\n        _super.prototype.destroy.call(this);\n    };\n    /* end 生命周期函数 */\n    /**\n     * 显示或者隐藏整个 view。\n     * @param visible 是否可见\n     * @returns View\n     */\n    View.prototype.changeVisible = function (visible) {\n        _super.prototype.changeVisible.call(this, visible);\n        this.geometries.forEach(function (geometry) {\n            geometry.changeVisible(visible);\n        });\n        this.controllers.forEach(function (controller) {\n            controller.changeVisible(visible);\n        });\n        this.foregroundGroup.set('visible', visible);\n        this.middleGroup.set('visible', visible);\n        this.backgroundGroup.set('visible', visible);\n        // group.set('visible', visible) 不会触发自动刷新\n        this.getCanvas().draw();\n        return this;\n    };\n    /**\n     * 装载数据源。\n     *\n     * ```ts\n     * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n     * ```\n     *\n     * @param data 数据源，json 数组。\n     * @returns View\n     */\n    View.prototype.data = function (data) {\n        set(this.options, 'data', data);\n        this.isDataChanged = true;\n        return this;\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n     */\n    View.prototype.source = function (data) {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n        return this.data(data);\n    };\n    /**\n     * 设置数据筛选规则。\n     *\n     * ```ts\n     * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n     *\n     * // 删除 'city' 字段对应的筛选规则。\n     * view.filter('city', null);\n     * ```\n     *\n     * @param field 数据字段\n     * @param condition 筛选规则\n     * @returns View\n     */\n    View.prototype.filter = function (field, condition) {\n        if (isFunction(condition)) {\n            set(this.options, ['filters', field], condition);\n            return this;\n        }\n        // condition 为空，则表示删除过滤条件\n        if (!condition && get(this.options, ['filters', field])) {\n            delete this.options.filters[field];\n        }\n        return this;\n    };\n    View.prototype.axis = function (field, axisOption) {\n        if (isBoolean(field)) {\n            set(this.options, ['axes'], field);\n        }\n        else {\n            set(this.options, ['axes', field], axisOption);\n        }\n        return this;\n    };\n    View.prototype.legend = function (field, legendOption) {\n        if (isBoolean(field)) {\n            set(this.options, ['legends'], field);\n        }\n        else if (isString(field)) {\n            set(this.options, ['legends', field], legendOption);\n        }\n        else {\n            // 设置全局的 legend 配置\n            set(this.options, ['legends'], field);\n        }\n        return this;\n    };\n    View.prototype.scale = function (field, scaleOption) {\n        var _this = this;\n        if (isString(field)) {\n            set(this.options, ['scales', field], scaleOption);\n        }\n        else if (isObject(field)) {\n            each(field, function (v, k) {\n                set(_this.options, ['scales', k], v);\n            });\n        }\n        return this;\n    };\n    /**\n     * tooltip 提示信息配置。\n     *\n     * ```ts\n     * view.tooltip(false); // 关闭 tooltip\n     *\n     * view.tooltip({\n     *   shared: true\n     * });\n     * ```\n     *\n     * @param cfg Tooltip 配置\n     * @returns View\n     */\n    View.prototype.tooltip = function (cfg) {\n        set(this.options, 'tooltip', cfg);\n        return this;\n    };\n    /**\n     * 辅助标记配置。\n     *\n     * ```ts\n     * view.annotation().line({\n     *   start: ['min', 85],\n     *   end: ['max', 85],\n     *   style: {\n     *     stroke: '#595959',\n     *     lineWidth: 1,\n     *     lineDash: [3, 3],\n     *   },\n     * });\n     * ```\n     *\n     * @returns [[Annotation]]\n     */\n    View.prototype.annotation = function () {\n        return this.getController('annotation');\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n     */\n    View.prototype.guide = function () {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n        return this.annotation();\n    };\n    View.prototype.coordinate = function (type, coordinateCfg) {\n        // 提供语法糖，使用更简单\n        if (isString(type)) {\n            set(this.options, 'coordinate', { type: type, cfg: coordinateCfg });\n        }\n        else {\n            set(this.options, 'coordinate', type);\n        }\n        // 更新 coordinate 配置\n        this.coordinateController.update(this.options.coordinate);\n        return this.coordinateController;\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n     */\n    View.prototype.coord = function (type, coordinateCfg) {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n        // @ts-ignore\n        return this.coordinate(type, coordinateCfg);\n    };\n    /**\n     * view 分面绘制。\n     *\n     * ```ts\n     * view.facet('rect', {\n     *   rowField: 'province',\n     *   columnField: 'category',\n     *   eachView: (innerView: View, facet?: FacetData) => {\n     *     innerView.line().position('city*sale');\n     *   },\n     * });\n     * ```\n     *\n     * @param type 分面类型\n     * @param cfg 分面配置， [[FacetCfgMap]]\n     * @returns View\n     */\n    View.prototype.facet = function (type, cfg) {\n        // 先销毁掉之前的分面\n        if (this.facetInstance) {\n            this.facetInstance.destroy();\n        }\n        // 创建新的分面\n        var Ctor = getFacet(type);\n        if (!Ctor) {\n            throw new Error(\"facet '\" + type + \"' is not exist!\");\n        }\n        this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), { type: type }));\n        return this;\n    };\n    /*\n     * 开启或者关闭动画。\n     *\n     * ```ts\n     * view.animate(false);\n     * ```\n     *\n     * @param status 动画状态，true 表示开始，false 表示关闭\n     * @returns View\n     */\n    View.prototype.animate = function (status) {\n        set(this.options, 'animate', status);\n        return this;\n    };\n    /**\n     * 更新配置项，用于配置项式声明。\n     * @param options 配置项\n     */\n    View.prototype.updateOptions = function (options) {\n        this.clear(); // 清空\n        mix(this.options, options);\n        this.initOptions();\n        return this;\n    };\n    /**\n     * 往 `view.options` 属性中存储配置项。\n     * @param name 属性名称\n     * @param opt 属性值\n     * @returns view\n     */\n    View.prototype.option = function (name, opt) {\n        // 对于内置的 option，避免覆盖。\n        // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n        if (View.prototype[name]) {\n            throw new Error(\"Can't use built in variable name \\\"\" + name + \"\\\", please change another one.\");\n        }\n        // 存入到 option 中\n        set(this.options, name, opt);\n        return this;\n    };\n    /**\n     * 设置主题。\n     *\n     * ```ts\n     * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n     *\n     * view.theme({ defaultColor: 'red' });\n     * ```\n     *\n     * @param theme 主题名或者主题配置\n     * @returns View\n     */\n    View.prototype.theme = function (theme) {\n        this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, theme) : getTheme(theme);\n        return this;\n    };\n    /* end 一系列传入配置的 API */\n    /**\n     * Call the interaction based on the interaction name\n     *\n     * ```ts\n     * view.interaction('my-interaction', { extra: 'hello world' });\n     * ```\n     *\n     * @param name interaction name\n     * @param cfg interaction config\n     * @returns\n     */\n    View.prototype.interaction = function (name, cfg) {\n        var existInteraction = this.interactions[name];\n        // 存在则先销毁已有的\n        if (existInteraction) {\n            existInteraction.destroy();\n        }\n        // 新建交互实例\n        var interaction = createInteraction(name, this, cfg);\n        if (interaction) {\n            interaction.init();\n            this.interactions[name] = interaction;\n        }\n        return this;\n    };\n    /**\n     * 移除当前 View 的 interaction\n     * ```ts\n     * view.removeInteraction('my-interaction');\n     * ```\n     * @param name interaction name\n     */\n    View.prototype.removeInteraction = function (name) {\n        var existInteraction = this.interactions[name];\n        // 存在则先销毁已有的\n        if (existInteraction) {\n            existInteraction.destroy();\n            this.interactions[name] = undefined;\n        }\n    };\n    /**\n     * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n     *\n     * ```ts\n     * view.changeData([{ city: '北京', sale: '200' }]);\n     * ```\n     *\n     * @param data\n     * @returns void\n     */\n    View.prototype.changeData = function (data) {\n        this.isDataChanged = true;\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA);\n        // 1. 保存数据\n        this.data(data);\n        // 2. 渲染\n        this.paint(true);\n        // 3. 遍历子 view 进行 change data\n        each(this.views, function (view) {\n            // FIXME 子 view 有自己的数据的情况，该如何处理？\n            view.changeData(data);\n        });\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA);\n    };\n    /* View 管理相关的 API */\n    /**\n     * 创建子 view\n     *\n     * ```ts\n     * const innerView = view.createView({\n     *   start: { x: 0, y: 0 },\n     *   end: { x: 0.5, y: 0.5 },\n     *   padding: 8,\n     * });\n     * ```\n     *\n     * @param cfg\n     * @returns View\n     */\n    View.prototype.createView = function (cfg) {\n        // 子 view 共享 options 配置数据\n        var sharedOptions = {\n            data: this.options.data,\n            scales: clone(this.options.scales),\n            axes: clone(this.options.axes),\n            coordinate: clone(this.coordinateController.getOption()),\n            tooltip: clone(this.options.tooltip),\n            legends: clone(this.options.legends),\n            animate: this.options.animate,\n            visible: this.visible,\n        };\n        var v = new View(__assign(__assign({ parent: this, canvas: this.canvas, \n            // 子 view 共用三层 group\n            backgroundGroup: this.backgroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.BG }), middleGroup: this.middleGroup.addGroup({ zIndex: GROUP_Z_INDEX.MID }), foregroundGroup: this.foregroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.FORE }), theme: this.themeObject, padding: this.padding }, cfg), { options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {})) }));\n        this.views.push(v);\n        return v;\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n     */\n    View.prototype.view = function (cfg) {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n        return this.createView(cfg);\n    };\n    /**\n     * 删除一个子 view\n     * @param view\n     * @return removedView\n     */\n    View.prototype.removeView = function (view) {\n        var removedView = remove(this.views, function (v) { return v === view; })[0];\n        if (removedView) {\n            removedView.destroy();\n        }\n        return removedView;\n    };\n    /* end View 管理相关的 API */\n    // 一些 get 方法\n    /**\n     * 获取当前坐标系实例。\n     * @returns [[Coordinate]]\n     */\n    View.prototype.getCoordinate = function () {\n        return this.coordinateInstance;\n    };\n    /**\n     * 获取当前 view 的主题配置。\n     * @returns themeObject\n     */\n    View.prototype.getTheme = function () {\n        return this.themeObject;\n    };\n    /**\n     * 获得 x 轴字段的 scale 实例。\n     * @returns view 中 Geometry 对于的 x scale\n     */\n    View.prototype.getXScale = function () {\n        // 拿第一个 Geometry 的 X scale\n        // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n        var g = this.geometries[0];\n        return g ? g.getXScale() : null;\n    };\n    /**\n     * 获取 y 轴字段的 scales 实例。\n     * @returns view 中 Geometry 对于的 y scale 数组\n     */\n    View.prototype.getYScales = function () {\n        // 拿到所有的 Geometry 的 Y scale，然后去重\n        return uniq(map(this.geometries, function (g) { return g.getYScale(); }));\n    };\n    /**\n     * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n     * @param dimType x | y\n     * @returns x 轴或者 y 轴对应的所有 scale 实例。\n     */\n    View.prototype.getScalesByDim = function (dimType) {\n        var geometries = this.geometries;\n        var scales = {};\n        for (var _i = 0, geometries_1 = geometries; _i < geometries_1.length; _i++) {\n            var geometry = geometries_1[_i];\n            var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n            if (scale && !scales[scale.field]) {\n                scales[scale.field] = scale;\n            }\n        }\n        return scales;\n    };\n    /**\n     * 根据字段名去获取 scale 实例。\n     * @param field 数据字段名称\n     * @param key id\n     */\n    View.prototype.getScaleByField = function (field, key) {\n        var defaultKey = key ? key : this.getScaleKey(field);\n        // 调用根节点 view 的方法获取\n        return this.getRootView().scalePool.getScale(defaultKey);\n    };\n    /**\n     * 返回所有配置信息。\n     * @returns 所有的 view API 配置。\n     */\n    View.prototype.getOptions = function () {\n        return this.options;\n    };\n    /**\n     * 获取 view 的数据（过滤后的数据）。\n     * @returns 处理过滤器之后的数据。\n     */\n    View.prototype.getData = function () {\n        return this.filteredData;\n    };\n    /**\n     * 获得绘制的层级 group。\n     * @param layer 层级名称。\n     * @returns 对应层级的 Group。\n     */\n    View.prototype.getLayer = function (layer) {\n        return layer === LAYER.BG\n            ? this.backgroundGroup\n            : layer === LAYER.MID\n                ? this.middleGroup\n                : layer === LAYER.FORE\n                    ? this.foregroundGroup\n                    : this.foregroundGroup;\n    };\n    /**\n     * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n     * @param point 坐标点\n     */\n    View.prototype.isPointInPlot = function (point) {\n        return isPointInCoordinate(this.getCoordinate(), point);\n    };\n    /**\n     * 获得所有的 legend 对应的 attribute 实例。\n     * @returns 维度字段的 Attribute 数组\n     */\n    View.prototype.getLegendAttributes = function () {\n        return flatten(map(this.geometries, function (g) { return g.getGroupAttributes(); }));\n    };\n    /**\n     * 获取所有的分组字段的 scale 实例。\n     * @returns 获得分组字段的 scale 实例数组。\n     */\n    View.prototype.getGroupScales = function () {\n        // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n        var scales = map(this.geometries, function (g) { return g.getGroupScales(); });\n        return uniq(flatten(scales));\n    };\n    /**\n     * 获取 G.Canvas 实例。\n     * @returns G.Canvas 画布实例。\n     */\n    View.prototype.getCanvas = function () {\n        return this.getRootView().canvas;\n    };\n    /**\n     * 获得根节点 view。\n     */\n    View.prototype.getRootView = function () {\n        var v = this;\n        while (true) {\n            if (v.parent) {\n                v = v.parent;\n                continue;\n            }\n            break;\n        }\n        return v;\n    };\n    /**\n     * 获取该数据在可视化后，对应的画布坐标点。\n     * @param data 原始数据记录\n     * @returns 对应的画布坐标点\n     */\n    View.prototype.getXY = function (data) {\n        var coordinate = this.getCoordinate();\n        var xScales = this.getScalesByDim('x');\n        var yScales = this.getScalesByDim('y');\n        var x;\n        var y;\n        each(data, function (value, key) {\n            if (xScales[key]) {\n                x = xScales[key].scale(value);\n            }\n            if (yScales[key]) {\n                y = yScales[key].scale(value);\n            }\n        });\n        if (!isNil(x) && !isNil(y)) {\n            return coordinate.convert({ x: x, y: y });\n        }\n    };\n    /**\n     * 获取 name 对应的 controller 实例\n     * @param name\n     */\n    View.prototype.getController = function (name) {\n        return find(this.controllers, function (c) { return c.name === name; });\n    };\n    /**\n     * 显示 point 坐标点对应的 tooltip。\n     * @param point 画布坐标点\n     * @returns View\n     */\n    View.prototype.showTooltip = function (point) {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.showTooltip(point);\n        }\n        return this;\n    };\n    /**\n     * 隐藏 tooltip。\n     * @returns View\n     */\n    View.prototype.hideTooltip = function () {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.hideTooltip();\n        }\n        return this;\n    };\n    /**\n     * 将 tooltip 锁定到当前位置不能移动。\n     * @returns View\n     */\n    View.prototype.lockTooltip = function () {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.lockTooltip();\n        }\n        return this;\n    };\n    /**\n     * 将 tooltip 锁定解除。\n     * @returns View\n     */\n    View.prototype.unlockTooltip = function () {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.unlockTooltip();\n        }\n        return this;\n    };\n    /**\n     * 是否锁定 tooltip。\n     * @returns 是否锁定\n     */\n    View.prototype.isTooltipLocked = function () {\n        var tooltip = this.getController('tooltip');\n        return tooltip && tooltip.isTooltipLocked();\n    };\n    /**\n     * 获取当前 point 对应的 tooltip 数据项。\n     * @param point 坐标点\n     * @returns tooltip 数据项\n     */\n    View.prototype.getTooltipItems = function (point) {\n        var tooltip = this.getController('tooltip');\n        return tooltip ? tooltip.getTooltipItems(point) : [];\n    };\n    /**\n     * 获取逼近的点的数据集合\n     * @param point 当前坐标点\n     * @returns  数据\n     */\n    View.prototype.getSnapRecords = function (point) {\n        var geometries = this.geometries;\n        var rst = [];\n        each(geometries, function (geom) {\n            var dataArray = geom.dataArray;\n            var record;\n            each(dataArray, function (data) {\n                record = findDataByPoint(point, data, geom);\n                if (record) {\n                    rst.push(record);\n                }\n            });\n        });\n        // 同样递归处理子 views\n        each(this.views, function (view) {\n            var snapRecords = view.getSnapRecords(point);\n            rst = rst.concat(snapRecords);\n        });\n        return rst;\n    };\n    /**\n     * 获取所有的 pure component 组件，用于布局。\n     */\n    View.prototype.getComponents = function () {\n        var components = [];\n        each(this.controllers, function (controller) {\n            components.push.apply(components, controller.getComponents());\n        });\n        return components;\n    };\n    /**\n     * 将 data 数据进行过滤。\n     * @param data\n     * @returns 过滤之后的数据\n     */\n    View.prototype.filterData = function (data) {\n        var filters = this.options.filters;\n        // 不存在 filters，则不需要进行数据过滤\n        if (size(filters) === 0) {\n            return data;\n        }\n        // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n        return filter(data, function (datum, idx) {\n            // 所有的 filter 字段\n            var fields = Object.keys(filters);\n            // 所有的条件都通过，才算通过\n            return fields.every(function (field) {\n                var condition = filters[field];\n                // condition 返回 true，则保留\n                return condition(datum[field], datum, idx);\n            });\n        });\n    };\n    /**\n     * 对某一个字段进行过滤\n     * @param field\n     * @param data\n     */\n    View.prototype.filterFieldData = function (field, data) {\n        var filters = this.options.filters;\n        var condition = get(filters, field);\n        if (isUndefined(condition)) {\n            return data;\n        }\n        return filter(data, function (datum, idx) { return condition(datum[field], datum, idx); });\n    };\n    /**\n     * 调整 coordinate 的坐标范围。\n     */\n    View.prototype.adjustCoordinate = function () {\n        var start = this.coordinateBBox.bl;\n        var end = this.coordinateBBox.tr;\n        this.coordinateInstance = this.coordinateController.adjust(start, end);\n    };\n    View.prototype.paint = function (isUpdate) {\n        this.renderDataRecursive(isUpdate);\n        // 处理 sync scale 的逻辑\n        this.syncScale();\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n        this.renderLayoutRecursive(isUpdate);\n        this.renderPaintRecursive(isUpdate);\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n        this.isDataChanged = false; // 渲染完毕复位\n    };\n    /**\n     * 替换处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n     * @param isUpdate\n     */\n    View.prototype.renderLayoutRecursive = function (isUpdate) {\n        // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n        this.calculateViewBBox();\n        // 2. 更新 coordinate\n        this.adjustCoordinate();\n        // 3. 初始化组件 component\n        this.initComponents(isUpdate);\n        // 4. 进行布局，计算 coordinateBBox，进行组件布局，update 位置\n        this.doLayout();\n        // 5. 布局完之后，coordinate 的范围确定了，调整 coordinate 组件\n        this.adjustCoordinate();\n        // 同样递归处理子 views\n        each(this.views, function (view) {\n            view.renderLayoutRecursive(isUpdate);\n        });\n    };\n    /**\n     * 最终递归绘制组件和图形\n     * @param isUpdate\n     */\n    View.prototype.renderPaintRecursive = function (isUpdate) {\n        if (this.limitInPlot) {\n            var middleGroup = this.middleGroup;\n            var _a = getCoordinateClipCfg(this.coordinateInstance), type = _a.type, attrs = _a.attrs;\n            middleGroup.setClip({\n                type: type,\n                attrs: attrs,\n            });\n        }\n        // 1. 渲染几何标记\n        this.paintGeometries(isUpdate);\n        // 2. 绘制组件\n        this.renderComponents(isUpdate);\n        // 同样递归处理子 views\n        each(this.views, function (view) {\n            view.renderPaintRecursive(isUpdate);\n        });\n    };\n    // end Get 方法\n    /**\n     * 创建 scale，递归到顶层 view 去创建和缓存 scale\n     * @param field\n     * @param data\n     * @param scaleDef\n     * @param key\n     */\n    View.prototype.createScale = function (field, data, scaleDef, key) {\n        // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n        var currentScaleDef = get(this.options.scales, [field]);\n        var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef);\n        // 2. 是否存在父 view，在则递归，否则创建\n        if (this.parent) {\n            return this.parent.createScale(field, data, mergedScaleDef, key);\n        }\n        // 3. 在根节点 view 通过 scalePool 创建\n        return this.scalePool.createScale(field, data, mergedScaleDef, key);\n    };\n    /**\n     * 递归渲染中的数据处理\n     * @param isUpdate\n     */\n    View.prototype.renderDataRecursive = function (isUpdate) {\n        // 1. 处理数据\n        this.doFilterData();\n        // 2. 创建实例\n        this.createCoordinate();\n        // 3. 初始化 Geometry\n        this.initGeometries(isUpdate);\n        // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n        this.renderFacet(isUpdate);\n        // 同样递归处理子 views\n        each(this.views, function (view) {\n            view.renderDataRecursive(isUpdate);\n        });\n    };\n    /**\n     * 计算 region，计算实际的像素范围坐标\n     * @private\n     */\n    View.prototype.calculateViewBBox = function () {\n        var x;\n        var y;\n        var width;\n        var height;\n        if (this.parent) {\n            var bbox = this.parent.coordinateBBox;\n            // 存在 parent， 那么就是通过父容器大小计算\n            x = bbox.x;\n            y = bbox.y;\n            width = bbox.width;\n            height = bbox.height;\n        }\n        else {\n            // 顶层容器，从 canvas 中取值 宽高\n            x = 0;\n            y = 0;\n            width = this.canvas.get('width');\n            height = this.canvas.get('height');\n        }\n        var _a = this.region, start = _a.start, end = _a.end;\n        // 根据 region 计算当前 view 的 bbox 大小。\n        this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n        // 初始的 coordinate bbox 大小\n        this.coordinateBBox = this.viewBBox;\n    };\n    /**\n     * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n     *\n     * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n     * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n     * @private\n     */\n    View.prototype.initEvents = function () {\n        // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n        this.foregroundGroup.on('*', this.onDelegateEvents);\n        this.middleGroup.on('*', this.onDelegateEvents);\n        this.backgroundGroup.on('*', this.onDelegateEvents);\n        this.canvas.on('*', this.onCanvasEvent);\n    };\n    /**\n     * 初始化插件\n     */\n    View.prototype.initComponentController = function () {\n        var _this = this;\n        each(this.usedControllers, function (controllerName) {\n            var Ctor = getComponentController(controllerName);\n            if (Ctor) {\n                _this.controllers.push(new Ctor(_this));\n            }\n        });\n    };\n    View.prototype.createViewEvent = function (evt) {\n        var shape = evt.shape, name = evt.name;\n        var data = shape ? shape.get('origin') : null;\n        // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n        var e = new Event(this, evt, data);\n        e.type = name;\n        return e;\n    };\n    /**\n     * 处理 PLOT_EVENTS\n     * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n     * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n     * @param e\n     */\n    View.prototype.doPlotEvent = function (e) {\n        var type = e.type, x = e.x, y = e.y;\n        var point = { x: x, y: y };\n        var ALL_EVENTS = [\n            'mousedown',\n            'mouseup',\n            'mousemove',\n            'mouseleave',\n            'mousewheel',\n            'touchstart',\n            'touchmove',\n            'touchend',\n            'touchcancel',\n            'click',\n            'dblclick',\n            'contextmenu',\n        ];\n        if (ALL_EVENTS.includes(type)) {\n            var currentInPlot = this.isPointInPlot(point);\n            if (currentInPlot) {\n                var TYPE = \"plot:\" + type; // 组合 plot 事件\n                e.type = TYPE;\n                this.emit(TYPE, e);\n                if (type === 'mouseleave' || type === 'touchend') { // 在plot 内部却离开画布\n                    this.isPreMouseInPlot = false;\n                }\n            }\n            // 对于 mouseenter, mouseleave 的计算处理\n            if (type === 'mousemove' || type === 'touchmove') {\n                if (this.isPreMouseInPlot && !currentInPlot) {\n                    if (type === 'mousemove') {\n                        e.type = PLOT_EVENTS.MOUSE_LEAVE;\n                        this.emit(PLOT_EVENTS.MOUSE_LEAVE, e);\n                    }\n                    e.type = PLOT_EVENTS.LEAVE;\n                    this.emit(PLOT_EVENTS.LEAVE, e);\n                }\n                else if (!this.isPreMouseInPlot && currentInPlot) {\n                    if (type === 'mousemove') {\n                        e.type = PLOT_EVENTS.MOUSE_ENTER;\n                        this.emit(PLOT_EVENTS.MOUSE_ENTER, e);\n                    }\n                    e.type = PLOT_EVENTS.ENTER;\n                    this.emit(PLOT_EVENTS.ENTER, e);\n                }\n                // 赋新的状态值\n                this.isPreMouseInPlot = currentInPlot;\n            }\n            else if (type === 'mouseleave' || type === 'touchend') { // 可能不在 currentInPlot 中\n                if (this.isPreMouseInPlot) {\n                    if (type === 'mouseleave') {\n                        e.type = PLOT_EVENTS.MOUSE_LEAVE;\n                        this.emit(PLOT_EVENTS.MOUSE_LEAVE, e);\n                    }\n                    e.type = PLOT_EVENTS.LEAVE;\n                    this.emit(PLOT_EVENTS.LEAVE, e);\n                    this.isPreMouseInPlot = false;\n                }\n            }\n        }\n    };\n    // view 生命周期 —— 渲染流程\n    /**\n     * 处理筛选器，筛选数据\n     * @private\n     */\n    View.prototype.doFilterData = function () {\n        var data = this.options.data;\n        this.filteredData = this.filterData(data);\n    };\n    /**\n     * 初始化 Geometries\n     * @private\n     */\n    View.prototype.initGeometries = function (isUpdate) {\n        var _this = this;\n        // 初始化图形的之前，先创建 / 更新 scales\n        this.createOrUpdateScales();\n        // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n        each(this.geometries, function (geometry) {\n            // 保持 scales 引用不要变化\n            geometry.scales = _this.getGeometryScales();\n            var cfg = {\n                coordinate: _this.getCoordinate(),\n                scaleDefs: get(_this.options, 'scales', {}),\n                data: _this.filteredData,\n                theme: _this.themeObject,\n                isDataChanged: _this.isDataChanged,\n            };\n            if (isUpdate) {\n                // 数据发生更新\n                geometry.update(cfg);\n            }\n            else {\n                geometry.init(cfg);\n            }\n        });\n        // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n        this.adjustScales();\n    };\n    /**\n     * 根据 Geometry 的所有字段创建 scales\n     * 如果存在，则更新，不存在则创建\n     */\n    View.prototype.createOrUpdateScales = function () {\n        var _this = this;\n        var fields = this.getScaleFields();\n        var groupedFields = this.getGroupedFields();\n        var _a = this.getOptions(), data = _a.data, scales = _a.scales;\n        var filteredData = this.filteredData;\n        each(fields, function (field) {\n            var scaleDef = get(scales, [field]);\n            // 调用方法，递归去创建\n            var key = _this.getScaleKey(field);\n            _this.createScale(field, \n            // 分组字段的 scale 使用未过滤的数据创建\n            groupedFields.includes(field) ? data : filteredData, scaleDef, key);\n            // 缓存从当前 view 创建的 scale key\n            _this.createdScaleKeys.set(key, true);\n        });\n    };\n    /**\n     * 处理 scale 同步逻辑\n     */\n    View.prototype.syncScale = function () {\n        // 最终调用 root view 的\n        this.getRootView().scalePool.sync();\n    };\n    /**\n     * 获得 Geometry 中的 scale 对象\n     */\n    View.prototype.getGeometryScales = function () {\n        var _this = this;\n        var fields = this.getScaleFields();\n        var scales = {};\n        each(fields, function (field) {\n            scales[field] = _this.getScaleByField(field);\n        });\n        return scales;\n    };\n    View.prototype.getScaleFields = function () {\n        var fields = this.geometries.reduce(function (r, geometry) {\n            r.push.apply(r, geometry.getScaleFields());\n            return r;\n        }, []);\n        return uniq(fields);\n    };\n    View.prototype.getGroupedFields = function () {\n        var fields = this.geometries.reduce(function (r, geometry) {\n            r.push.apply(r, geometry.getGroupFields());\n            return r;\n        }, []);\n        return uniq(fields);\n    };\n    /**\n     * 调整 scale 配置\n     * @private\n     */\n    View.prototype.adjustScales = function () {\n        // 调整目前包括：\n        // 分类 scale，调整 range 范围\n        this.adjustCategoryScaleRange();\n    };\n    /**\n     * 调整分类 scale 的 range，防止超出坐标系外面\n     * @private\n     */\n    View.prototype.adjustCategoryScaleRange = function () {\n        var _this = this;\n        var xyScales = __spreadArrays([this.getXScale()], this.getYScales()).filter(function (e) { return !!e; });\n        var coordinate = this.getCoordinate();\n        var scaleOptions = this.options.scales;\n        each(xyScales, function (scale) {\n            // @ts-ignore\n            var field = scale.field, values = scale.values, isCategory = scale.isCategory, isIdentity = scale.isIdentity;\n            // 分类或者 identity 的 scale 才进行处理\n            if (isCategory || isIdentity) {\n                // 存在 value 值，且用户没有配置 range 配置\n                if (values && !get(scaleOptions, [field, 'range'])) {\n                    var count = values.length;\n                    var range = void 0;\n                    if (count === 1) {\n                        range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5] 的状态\n                    }\n                    else {\n                        var widthRatio = 1;\n                        var offset = 0;\n                        if (isFullCircle(coordinate)) {\n                            if (!coordinate.isTransposed) {\n                                range = [0, 1 - 1 / count];\n                            }\n                            else {\n                                widthRatio = get(_this.theme, 'widthRatio.multiplePie', 1 / 1.3);\n                                offset = (1 / count) * widthRatio;\n                                range = [offset / 2, 1 - offset / 2];\n                            }\n                        }\n                        else {\n                            offset = 1 / count / 2; // 两边留下分类空间的一半\n                            range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时\n                        }\n                    }\n                    // 更新 range\n                    scale.range = range;\n                }\n            }\n        });\n    };\n    /**\n     * 根据 options 配置、Geometry 字段配置，自动生成 components\n     * @param isUpdate 是否是更新\n     * @private\n     */\n    View.prototype.initComponents = function (isUpdate) {\n        // 先全部清空，然后 render\n        each(this.controllers, function (controller) {\n            // 更新则走更新逻辑；否则清空载重绘\n            if (isUpdate) {\n                controller.update();\n            }\n            else {\n                controller.clear();\n                controller.render();\n            }\n        });\n    };\n    View.prototype.doLayout = function () {\n        this.layoutFunc(this);\n    };\n    /**\n     * 创建坐标系\n     * @private\n     */\n    View.prototype.createCoordinate = function () {\n        var start = this.coordinateBBox.bl;\n        var end = this.coordinateBBox.tr;\n        this.coordinateInstance = this.coordinateController.create(start, end);\n    };\n    /**\n     * 根据 options 配置自动渲染 geometry\n     * @private\n     */\n    View.prototype.paintGeometries = function (isUpdate) {\n        var _this = this;\n        var doAnimation = this.options.animate;\n        // geometry 的 paint 阶段\n        this.geometries.map(function (geometry) {\n            geometry.coordinate = _this.getCoordinate();\n            geometry.canvasRegion = {\n                x: _this.viewBBox.x,\n                y: _this.viewBBox.y,\n                minX: _this.viewBBox.minX,\n                minY: _this.viewBBox.minY,\n                maxX: _this.viewBBox.maxX,\n                maxY: _this.viewBBox.maxY,\n                width: _this.viewBBox.width,\n                height: _this.viewBBox.height,\n            };\n            if (!doAnimation) {\n                // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n                geometry.animate(false);\n            }\n            geometry.paint(isUpdate);\n        });\n    };\n    /**\n     * 最后的绘制组件\n     * @param isUpdate\n     */\n    View.prototype.renderComponents = function (isUpdate) {\n        // 先全部清空，然后 render\n        each(this.getComponents(), function (co) {\n            co.component.render();\n        });\n    };\n    /**\n     * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n     * @param isUpdate\n     */\n    View.prototype.renderFacet = function (isUpdate) {\n        if (this.facetInstance) {\n            if (isUpdate) {\n                this.facetInstance.update();\n            }\n            else {\n                this.facetInstance.clear();\n                // 计算分面数据\n                this.facetInstance.init();\n                // 渲染组件和 views\n                this.facetInstance.render();\n            }\n        }\n    };\n    View.prototype.initOptions = function () {\n        var _this = this;\n        var _a = this.options, _b = _a.geometries, geometries = _b === void 0 ? [] : _b, _c = _a.interactions, interactions = _c === void 0 ? [] : _c, _d = _a.views, views = _d === void 0 ? [] : _d, _e = _a.annotations, annotations = _e === void 0 ? [] : _e;\n        // 创建 geometry 实例\n        geometries.forEach(function (geometryOption) {\n            _this.createGeometry(geometryOption);\n        });\n        // 创建 interactions 实例\n        interactions.forEach(function (interactionOption) {\n            var type = interactionOption.type, cfg = interactionOption.cfg;\n            _this.interaction(type, cfg);\n        });\n        // 创建 view 实例\n        views.forEach(function (viewOption) {\n            _this.createView(viewOption);\n        });\n        // 设置 annotation\n        var annotationComponent = this.getController('annotation');\n        annotations.forEach(function (annotationOption) {\n            annotationComponent.annotation(annotationOption);\n        });\n    };\n    View.prototype.createGeometry = function (geometryOption) {\n        var type = geometryOption.type, _a = geometryOption.cfg, cfg = _a === void 0 ? {} : _a;\n        if (this[type]) {\n            var geometry_1 = this[type](cfg);\n            each(geometryOption, function (v, k) {\n                if (isFunction(geometry_1[k])) {\n                    geometry_1[k](v);\n                }\n            });\n        }\n    };\n    /**\n     * scale key 的创建方式\n     * @param field\n     */\n    View.prototype.getScaleKey = function (field) {\n        return this.id + \"-\" + field;\n    };\n    return View;\n}(Base));\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name, Ctor) {\n    // 语法糖，在 view API 上增加原型方法\n    View.prototype[name.toLowerCase()] = function (cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        var props = __assign({ \n            /** 图形容器 */\n            container: this.middleGroup.addGroup({\n                name: 'element',\n            }), labelsContainer: this.foregroundGroup.addGroup({\n                name: 'element',\n            }) }, cfg);\n        var geometry = new Ctor(props);\n        this.geometries.push(geometry);\n        return geometry;\n    };\n}\nexport default View;\n//# sourceMappingURL=view.js.map"]},"metadata":{},"sourceType":"module"}