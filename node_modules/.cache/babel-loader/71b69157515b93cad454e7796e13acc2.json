{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx\";\nimport React from 'react';\nimport { Chart } from '@antv/g2';\n\nconst DisplayPieChart = props => {\n  const renderChart = () => {\n    const chart = new Chart({\n      container: 'containerPieChart',\n      autoFit: true,\n      height: 500\n    }); // chart.data(props.chartData);\n\n    chart.changeData(data);\n    chart.scale('percent', {\n      formatter: val => {\n        val = val * 100 + '%';\n        return val;\n      }\n    });\n    chart.coordinate('theta', {\n      radius: 0.75,\n      innerRadius: 0.6\n    });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false,\n      itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n    });\n    chart.annotation().text({\n      position: ['50%', '50%'],\n      content: \"Total Confirmed Cases\",\n      style: {\n        fontSize: 14,\n        fill: '#8c8c8c',\n        textAlign: 'center'\n      },\n      offsetY: -20\n    }).text({\n      position: ['50%', '50%'],\n      content: props.innerChartTitle,\n      style: {\n        fontSize: 20,\n        fill: '#8c8c8c',\n        textAlign: 'center'\n      },\n      offsetX: -10,\n      offsetY: 20\n    });\n    chart.interval().adjust('stack').position('percent').color('item').label('percent', percent => {\n      return {\n        content: data => {\n          return `${data.item}: ${percent * 100}%`;\n        }\n      };\n    }).tooltip('item*percent', (item, percent) => {\n      percent = percent * 100 + '%';\n      return {\n        name: item,\n        value: percent\n      };\n    });\n    chart.interaction('element-active');\n    chart.render();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"containerPieChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, props.chartData && props.chartData.length > 0 && renderChart());\n}; // class DisplayPieChart extends React.Component {\n//     constructor(props) {\n//         super(props)\n//     }\n//     render() {\n//         if(this.props.chartData && this.props.chartData.length > 0 && this.props.innerChartTitle)\n//         {\n//             const chart = new Chart({\n//                 container: 'containerPieChart',\n//                 autoFit: true,\n//                 height: 500,\n//             });\n//             chart.data(this.props.chartData);\n//             chart.scale('percent', {\n//                 formatter: (val) => {\n//                     val = val * 100 + '%';\n//                     return val;\n//                 },\n//             });\n//             chart.coordinate('theta', {\n//                 radius: 0.75,\n//                 innerRadius: 0.6,\n//             });\n//             chart.tooltip({\n//                 showTitle: false,\n//                 showMarkers: false,\n//                 itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n//             });\n//             chart.annotation()\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: \"Total Confirmed Cases\",\n//                     style: {\n//                         fontSize: 14,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetY: -20,\n//                 })\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: this.props.innerChartTitle,\n//                     style: {\n//                         fontSize: 20,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetX: -10,\n//                     offsetY: 20,\n//                 });\n//             chart.interval()\n//                 .adjust('stack')\n//                 .position('percent')\n//                 .color('item')\n//                 .label('percent', (percent) => {\n//                     return {\n//                         content: (data) => {\n//                             return `${data.item}: ${percent * 100}%`;\n//                         },\n//                     };\n//                 })\n//                 .tooltip('item*percent', (item, percent) => {\n//                     percent = percent * 100 + '%';\n//                     return {\n//                         name: item,\n//                         value: percent,\n//                     };\n//                 });\n//             chart.interaction('element-active');\n//             chart.render();\n//             ++renderComponenKey\n//         }\n//         return (\n//             <></>\n//         );\n//     }\n// }\n\n\nexport default DisplayPieChart;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx"],"names":["React","Chart","DisplayPieChart","props","renderChart","chart","container","autoFit","height","changeData","data","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","innerChartTitle","offsetX","interval","adjust","color","label","percent","item","name","value","interaction","render","chartData","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Chart } from '@antv/g2';\n\n\nconst DisplayPieChart = (props) => {\n\n\n    const renderChart = () => {\n\n\n           const chart = new Chart({\n            container: 'containerPieChart',\n            autoFit: true,\n            height: 500,});\n\n            // chart.data(props.chartData);\n            chart.changeData(data);\n            chart.scale('percent', {\n                formatter: (val) => {\n                    val = val * 100 + '%';\n                    return val;\n                },\n            });\n            chart.coordinate('theta', {\n                radius: 0.75,\n                innerRadius: 0.6,\n            });\n            chart.tooltip({\n                showTitle: false,\n                showMarkers: false,\n                itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n            });\n            chart.annotation()\n                .text({\n                    position: ['50%', '50%'],\n                    content: \"Total Confirmed Cases\",\n                    style: {\n                        fontSize: 14,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetY: -20,\n                })\n                .text({\n                    position: ['50%', '50%'],\n                    content: props.innerChartTitle,\n                    style: {\n                        fontSize: 20,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetX: -10,\n                    offsetY: 20,\n                });\n            chart.interval()\n                .adjust('stack')\n                .position('percent')\n                .color('item')\n                .label('percent', (percent) => {\n                    return {\n                        content: (data) => {\n                            return `${data.item}: ${percent * 100}%`;\n                        },\n                    };\n                })\n                .tooltip('item*percent', (item, percent) => {\n                    percent = percent * 100 + '%';\n                    return {\n                        name: item,\n                        value: percent,\n                    };\n                });\n            chart.interaction('element-active');\n            chart.render()\n        \n    }\n    return (\n\n            <div id=\"containerPieChart\">\n                {props.chartData && props.chartData.length > 0 && (\n                    renderChart()\n                )}\n            </div>\n\n    );\n}\n\n// class DisplayPieChart extends React.Component {\n//     constructor(props) {\n//         super(props)\n\n//     }\n\n//     render() {\n\n//         if(this.props.chartData && this.props.chartData.length > 0 && this.props.innerChartTitle)\n//         {\n//             const chart = new Chart({\n//                 container: 'containerPieChart',\n//                 autoFit: true,\n//                 height: 500,\n//             });\n\n//             chart.data(this.props.chartData);\n//             chart.scale('percent', {\n//                 formatter: (val) => {\n//                     val = val * 100 + '%';\n//                     return val;\n//                 },\n//             });\n//             chart.coordinate('theta', {\n//                 radius: 0.75,\n//                 innerRadius: 0.6,\n//             });\n//             chart.tooltip({\n//                 showTitle: false,\n//                 showMarkers: false,\n//                 itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n//             });\n//             chart.annotation()\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: \"Total Confirmed Cases\",\n//                     style: {\n//                         fontSize: 14,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetY: -20,\n//                 })\n//                 .text({\n//                     position: ['50%', '50%'],\n//                     content: this.props.innerChartTitle,\n//                     style: {\n//                         fontSize: 20,\n//                         fill: '#8c8c8c',\n//                         textAlign: 'center',\n//                     },\n//                     offsetX: -10,\n//                     offsetY: 20,\n//                 });\n//             chart.interval()\n//                 .adjust('stack')\n//                 .position('percent')\n//                 .color('item')\n//                 .label('percent', (percent) => {\n//                     return {\n//                         content: (data) => {\n//                             return `${data.item}: ${percent * 100}%`;\n//                         },\n//                     };\n//                 })\n//                 .tooltip('item*percent', (item, percent) => {\n//                     percent = percent * 100 + '%';\n//                     return {\n//                         name: item,\n//                         value: percent,\n//                     };\n//                 });\n//             chart.interaction('element-active');\n//             chart.render();\n//             ++renderComponenKey\n//         }\n//         return (\n//             <></>\n//         );\n//     }\n\n// }\nexport default DisplayPieChart;"]},"metadata":{},"sourceType":"module"}