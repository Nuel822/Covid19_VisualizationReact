{"ast":null,"code":"import React from 'react';\nimport { Chart } from '@antv/g2';\n\nconst DisplayPieChart = props => {\n  if (props.chartData && props.chartData.length > 0) {\n    const chart = new Chart({\n      container: 'containerPieChart',\n      autoFit: true,\n      height: 500\n    });\n    chart.data(props.chartData);\n    chart.scale('percent', {\n      formatter: val => {\n        val = val * 100 + '%';\n        return val;\n      }\n    });\n    chart.coordinate('theta', {\n      radius: 0.75,\n      innerRadius: 0.6\n    });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false,\n      itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n    });\n    chart.annotation().text({\n      position: ['50%', '50%'],\n      content: \"Total Confirmed Cases\",\n      style: {\n        fontSize: 14,\n        fill: '#8c8c8c',\n        textAlign: 'center'\n      },\n      offsetY: -20\n    }).text({\n      position: ['50%', '50%'],\n      content: props.innerChartTitle,\n      style: {\n        fontSize: 20,\n        fill: '#8c8c8c',\n        textAlign: 'center'\n      },\n      offsetX: -10,\n      offsetY: 20\n    });\n    chart.interval().adjust('stack').position('percent').color('item').tooltip('item*percent', (item, percent) => {\n      percent = percent * 100 + '%';\n      return {\n        name: item,\n        value: percent\n      };\n    });\n    chart.option('dark');\n    chart.interaction('element-active');\n    chart.render(true);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default DisplayPieChart;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx"],"names":["React","Chart","DisplayPieChart","props","chartData","length","chart","container","autoFit","height","data","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","innerChartTitle","offsetX","interval","adjust","color","item","percent","name","value","option","interaction","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAE/B,MAAIA,KAAK,CAACC,SAAN,IAAmBD,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB,CAAhD,EAAmD;AAC/C,UAAMC,KAAK,GAAG,IAAIL,KAAJ,CAAU;AACpBM,MAAAA,SAAS,EAAE,mBADS;AAEpBC,MAAAA,OAAO,EAAE,IAFW;AAGpBC,MAAAA,MAAM,EAAE;AAHY,KAAV,CAAd;AAMAH,IAAAA,KAAK,CAACI,IAAN,CAAWP,KAAK,CAACC,SAAjB;AACAE,IAAAA,KAAK,CAACK,KAAN,CAAY,SAAZ,EAAuB;AACnBC,MAAAA,SAAS,EAAGC,GAAD,IAAS;AAChBA,QAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAY,GAAlB;AACA,eAAOA,GAAP;AACH;AAJkB,KAAvB;AAMAP,IAAAA,KAAK,CAACQ,UAAN,CAAiB,OAAjB,EAA0B;AACtBC,MAAAA,MAAM,EAAE,IADc;AAEtBC,MAAAA,WAAW,EAAE;AAFS,KAA1B;AAIAV,IAAAA,KAAK,CAACW,OAAN,CAAc;AACVC,MAAAA,SAAS,EAAE,KADD;AAEVC,MAAAA,WAAW,EAAE,KAFH;AAGVC,MAAAA,OAAO,EAAE;AAHC,KAAd;AAKAd,IAAAA,KAAK,CAACe,UAAN,GACKC,IADL,CACU;AACFC,MAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,CADR;AAEFC,MAAAA,OAAO,EAAE,uBAFP;AAGFC,MAAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAE,EADP;AAEHC,QAAAA,IAAI,EAAE,SAFH;AAGHC,QAAAA,SAAS,EAAE;AAHR,OAHL;AAQFC,MAAAA,OAAO,EAAE,CAAC;AARR,KADV,EAWKP,IAXL,CAWU;AACFC,MAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,CADR;AAEFC,MAAAA,OAAO,EAAErB,KAAK,CAAC2B,eAFb;AAGFL,MAAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAE,EADP;AAEHC,QAAAA,IAAI,EAAE,SAFH;AAGHC,QAAAA,SAAS,EAAE;AAHR,OAHL;AAQFG,MAAAA,OAAO,EAAE,CAAC,EARR;AASFF,MAAAA,OAAO,EAAE;AATP,KAXV;AAsBAvB,IAAAA,KAAK,CAAC0B,QAAN,GACKC,MADL,CACY,OADZ,EAEKV,QAFL,CAEc,SAFd,EAGKW,KAHL,CAGW,MAHX,EAIKjB,OAJL,CAIa,cAJb,EAI6B,CAACkB,IAAD,EAAOC,OAAP,KAAmB;AACxCA,MAAAA,OAAO,GAAGA,OAAO,GAAG,GAAV,GAAgB,GAA1B;AACA,aAAO;AACHC,QAAAA,IAAI,EAAEF,IADH;AAEHG,QAAAA,KAAK,EAAEF;AAFJ,OAAP;AAIH,KAVL;AAWC9B,IAAAA,KAAK,CAACiC,MAAN,CAAa,MAAb;AACDjC,IAAAA,KAAK,CAACkC,WAAN,CAAkB,gBAAlB;AACAlC,IAAAA,KAAK,CAACmC,MAAN,CAAa,IAAb;AACH;;AACG,sBACI,yCADJ;AAGH,CAjEL;;AAkEA,eAAevC,eAAf","sourcesContent":["import React from 'react';\nimport { Chart } from '@antv/g2';\n\n\nconst DisplayPieChart = (props) => {\n\n    if (props.chartData && props.chartData.length > 0) {\n        const chart = new Chart({\n            container: 'containerPieChart',\n            autoFit: true,\n            height: 500,\n        });\n\n        chart.data(props.chartData);\n        chart.scale('percent', {\n            formatter: (val) => {\n                val = val * 100 + '%';\n                return val;\n            },\n        });\n        chart.coordinate('theta', {\n            radius: 0.75,\n            innerRadius: 0.6,\n        });\n        chart.tooltip({\n            showTitle: false,\n            showMarkers: false,\n            itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n        });\n        chart.annotation()\n            .text({\n                position: ['50%', '50%'],\n                content: \"Total Confirmed Cases\",\n                style: {\n                    fontSize: 14,\n                    fill: '#8c8c8c',\n                    textAlign: 'center',\n                },\n                offsetY: -20,\n            })\n            .text({\n                position: ['50%', '50%'],\n                content: props.innerChartTitle,\n                style: {\n                    fontSize: 20,\n                    fill: '#8c8c8c',\n                    textAlign: 'center',\n                },\n                offsetX: -10,\n                offsetY: 20,\n            });\n        chart.interval()\n            .adjust('stack')\n            .position('percent')\n            .color('item')\n            .tooltip('item*percent', (item, percent) => {\n                percent = percent * 100 + '%';\n                return {\n                    name: item,\n                    value: percent,\n                };\n            });\n         chart.option('dark');\n        chart.interaction('element-active');\n        chart.render(true);\n    }\n        return (\n            <></>\n        );\n    }\nexport default DisplayPieChart;"]},"metadata":{},"sourceType":"module"}