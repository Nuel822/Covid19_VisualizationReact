{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx\";\nimport React from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\n\nconst CountryCaseStats = props => {\n  const chartData = [];\n  const rendered = false;\n\n  const displayChart = e => {\n    e.preventDefault();\n    var filterResult = props.countryCaseData.filter(data => {\n      e.target.value == data.country;\n\n      if (filterResult && filterResult.length > 0) {\n        chartData.push({\n          item: \"Active\",\n          count: filterResult.cases.active / filterResult.cases.total,\n          percentage: filterResult.cases.active / filterResult.cases.total * 100\n        });\n        chartData.push({\n          item: \"Critical\",\n          count: filterResult.cases.critical / filterResult.cases.total,\n          percentage: filterResult.cases.critical / filterResult.cases.total * 100\n        });\n        chartData.push({\n          item: \"Recovered\",\n          count: filterResult.cases.recovered / filterResult.cases.total,\n          percentage: filterResult.cases.recovered / filterResult.cases.total * 100\n        });\n        chartData.push({\n          item: \"Deaths\",\n          count: filterResult.deaths / filterResult.cases.total,\n          percentage: filterResult.deaths / filterResult.cases.total * 100\n        });\n        const chart = new Chart({\n          container: 'container',\n          autoFit: true,\n          height: 500\n        });\n        chart.data(chartData);\n        chart.scale('percent', {\n          formatter: val => {\n            val = val * 100 + '%';\n            return val;\n          }\n        });\n        chart.coordinate('theta', {\n          radius: 0.75,\n          innerRadius: 0.6\n        });\n        chart.tooltip({\n          showTitle: false,\n          showMarkers: false,\n          itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n        });\n        chart.annotation().text({\n          position: ['50%', '50%'],\n          content: \"Total Confirmed Cases\",\n          style: {\n            fontSize: 14,\n            fill: '#8c8c8c',\n            textAlign: 'center'\n          },\n          offsetY: -20\n        }).text({\n          position: ['50%', '50%'],\n          content: filterResult.cases.total,\n          style: {\n            fontSize: 20,\n            fill: '#8c8c8c',\n            textAlign: 'center'\n          },\n          offsetX: -10,\n          offsetY: 20\n        });\n        chart.interval().adjust('stack').position('percent').color('item').label('percent', percent => {\n          return {\n            content: data => {\n              return `${data.item}: ${percent * 100}%`;\n            }\n          };\n        }).tooltip('item*percent', (item, percent) => {\n          percent = percent * 100 + '%';\n          return {\n            name: item,\n            value: percent\n          };\n        });\n        rendered = true;\n        chart.interaction('element-active');\n        chart.render();\n      }\n    });\n  };\n\n  const searchResultDisplay = chartData && Array.isArray(chartData) ? /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 73\n    }\n  }) : /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 98\n    }\n  });\n  return /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"d-flex py-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    seamless: true,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    placeholder: \"Enter Country Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    type: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    theme: \"primary\",\n    onClick: displayChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"Search\"))), rendered && {\n    searchResultDisplay\n  }));\n};\n\nexport default CountryCaseStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx"],"names":["React","Card","CardHeader","CardBody","Button","InputGroup","FormInput","InputGroupAddon","Chart","CountryCaseStats","props","chartData","rendered","displayChart","e","preventDefault","filterResult","countryCaseData","filter","data","target","value","country","length","push","item","count","cases","active","total","percentage","critical","recovered","deaths","chart","container","autoFit","height","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","offsetX","interval","adjust","color","label","percent","name","interaction","render","searchResultDisplay","Array","isArray","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, CardHeader, CardBody, Button ,InputGroup, FormInput, InputGroupAddon} from \"shards-react\";\nimport { Chart } from '@antv/g2';\n\n\nconst CountryCaseStats = (props) => {\n\n    const chartData = [];\n    const rendered = false;\n\n    const displayChart = (e) => {\n\n            e.preventDefault();\n\n         var filterResult =   props.countryCaseData.filter(data => {\n                e.target.value == data.country\n\n                if(filterResult && filterResult.length > 0){\n\n                    chartData.push({item:\"Active\" ,count:filterResult.cases.active/filterResult.cases.total\n                    ,percentage:(filterResult.cases.active/filterResult.cases.total) * 100});\n    \n                    chartData.push({item:\"Critical\",count:filterResult.cases.critical/filterResult.cases.total\n                    ,percentage:(filterResult.cases.critical/filterResult.cases.total) * 100});\n    \n                    chartData.push({item:\"Recovered\",count:filterResult.cases.recovered/filterResult.cases.total\n                    ,percentage:(filterResult.cases.recovered/filterResult.cases.total) * 100});\n    \n                    chartData.push({item:\"Deaths\",count:filterResult.deaths/filterResult.cases.total\n                    ,percentage:(filterResult.deaths/filterResult.cases.total) * 100})\n    \n                    const chart = new Chart({\n                        container: 'container',\n                        autoFit: true,\n                        height: 500,\n                    });\n                    chart.data(chartData);\n                    chart.scale('percent', {\n                        formatter: (val) => {\n                            val = val * 100 + '%';\n                            return val;\n                        },\n                    }); chart.coordinate('theta', {\n                        radius: 0.75,\n                        innerRadius: 0.6,\n                    });\n                    chart.tooltip({\n                        showTitle: false,\n                        showMarkers: false,\n                        itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n                    });\n                    chart.annotation()\n                        .text({\n                            position: ['50%', '50%'],\n                            content: \"Total Confirmed Cases\",\n                            style: {\n                                fontSize: 14,\n                                fill: '#8c8c8c',\n                                textAlign: 'center',\n                            },\n                            offsetY: -20,\n                        })\n                        .text({\n                            position: ['50%', '50%'],\n                            content: filterResult.cases.total,\n                            style: {\n                              fontSize: 20,\n                              fill: '#8c8c8c',\n                              textAlign: 'center',\n                            },\n                            offsetX: -10,\n                            offsetY: 20,\n                          });\n                    chart.interval()\n                        .adjust('stack')\n                        .position('percent')\n                        .color('item')\n                        .label('percent', (percent) => {\n                            return {\n                                content: (data) => {\n                                    return `${data.item}: ${percent * 100}%`;\n                                },\n                            };\n                        })\n                        .tooltip('item*percent', (item, percent) => {\n                            percent = percent * 100 + '%';\n                            return {\n                                name: item,\n                                value: percent,\n                            };\n                        });\n                    rendered = true;\n                    chart.interaction('element-active');\n                    chart.render();\n                }            \n            });\n        \n    }\n    const searchResultDisplay = chartData && Array.isArray(chartData) ? <div id=\"container\"/> :  <h3 className=\"m-0\"></h3>\n\n    return (\n        <Card small className=\"h-100\">\n            <CardHeader className=\"border-bottom\">\n                <h6 className=\"m-0\">{props.title}</h6>\n            </CardHeader>\n            <CardBody className=\"d-flex py-0\">\n                <InputGroup seamless className=\"mb-3\">\n                    <FormInput placeholder=\"Enter Country Name\" />\n                    <InputGroupAddon type=\"append\">\n                        <Button theme=\"primary\" onClick={displayChart}>Search</Button>\n                    </InputGroupAddon>\n                </InputGroup>\n                {rendered &&\n                   {searchResultDisplay} \n                }\n            </CardBody>\n\n        </Card>\n    );\n}\n\nexport default CountryCaseStats;\n"]},"metadata":{},"sourceType":"module"}