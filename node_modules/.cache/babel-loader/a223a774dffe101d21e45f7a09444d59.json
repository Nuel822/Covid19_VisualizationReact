{"ast":null,"code":"import { deepMix, each, every, get, isNil } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { getAxisOption } from '../util/axis';\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\n\nvar Facet =\n/** @class */\nfunction () {\n  function Facet(view, cfg) {\n    /** 是否销毁 */\n    this.destroyed = false;\n    /** 分面之后的所有分面数据结构 */\n\n    this.facets = [];\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n  /**\n   * 初始化过程\n   */\n\n\n  Facet.prototype.init = function () {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    } // 生成分面布局信息\n\n\n    var data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  };\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n\n\n  Facet.prototype.render = function () {\n    this.renderViews();\n  };\n  /**\n   * 更新 facet\n   */\n\n\n  Facet.prototype.update = function () {// 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  };\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n\n\n  Facet.prototype.clear = function () {\n    this.clearFacetViews();\n  };\n  /**\n   * 销毁\n   */\n\n\n  Facet.prototype.destroy = function () {\n    this.clear();\n\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  };\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n\n\n  Facet.prototype.facetToView = function (facet) {\n    var region = facet.region,\n        data = facet.data,\n        _a = facet.padding,\n        padding = _a === void 0 ? this.cfg.padding : _a;\n    var view = this.view.createView({\n      region: region,\n      padding: padding\n    }); // 设置分面的数据\n\n    view.data(data || []);\n    facet.view = view; // 前置钩子\n\n    this.beforeEachView(view, facet);\n    var eachView = this.cfg.eachView;\n\n    if (eachView) {\n      eachView(view, facet);\n    } // 后置钩子\n\n\n    this.afterEachView(view, facet);\n    return view;\n  }; // 创建容器\n\n\n  Facet.prototype.createContainer = function () {\n    var foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  };\n  /**\n   * 初始化 view\n   */\n\n\n  Facet.prototype.renderViews = function () {\n    this.createFacetViews();\n  };\n  /**\n   * 创建 分面 view\n   */\n\n\n  Facet.prototype.createFacetViews = function () {\n    var _this = this; // 使用分面数据 创建分面 view\n\n\n    return this.facets.map(function (facet) {\n      return _this.facetToView(facet);\n    });\n  };\n  /**\n   * 从 view 中清除 facetView\n   */\n\n\n  Facet.prototype.clearFacetViews = function () {\n    var _this = this; // 从 view 中移除分面 view\n\n\n    each(this.facets, function (facet) {\n      if (facet.view) {\n        _this.view.removeView(facet.view);\n\n        facet.view = undefined;\n      }\n    });\n  }; // 其他一些提供给子类使用的方法\n\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n\n\n  Facet.prototype.getFieldValues = function (data, field) {\n    var rst = [];\n    var cache = {}; // 去重、去除 Nil 值\n\n    each(data, function (d) {\n      var value = d[field];\n\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n\n\n  Facet.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    // x, y 方向均分 100% 宽高\n    var xRatio = 1 / (cols === 0 ? 1 : cols);\n    var yRatio = 1 / (rows === 0 ? 1 : rows);\n    var start = {\n      x: xRatio * xIndex,\n      y: yRatio * yIndex\n    };\n    var end = {\n      x: xRatio * (xIndex + 1),\n      y: yRatio * (yIndex + 1)\n    };\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  Facet.prototype.getDefaultCfg = function () {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      padding: 10,\n      fields: []\n    };\n  };\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n\n\n  Facet.prototype.getDefaultTitleCfg = function () {\n    // @ts-ignore\n    var fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily: fontFamily\n      }\n    };\n  };\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n\n\n  Facet.prototype.processAxis = function (view, facet) {\n    var options = view.getOptions();\n    var coordinateOption = options.coordinate;\n    var geometries = view.geometries;\n    var coordinateType = get(coordinateOption, 'type', 'rect');\n\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n\n      var axes = options.axes;\n\n      var _a = geometries[0].getXYFields(),\n          x = _a[0],\n          y = _a[1];\n\n      var xOption = getAxisOption(axes, x);\n      var yOption = getAxisOption(axes, y);\n\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  };\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n\n\n  Facet.prototype.getFacetDataFilter = function (conditions) {\n    return function (datum) {\n      // 过滤出全部满足条件的数据\n      return every(conditions, function (condition) {\n        var field = condition.field,\n            value = condition.value;\n\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n\n        return true;\n      });\n    };\n  };\n\n  return Facet;\n}();\n\nexport { Facet };","map":{"version":3,"sources":["../../src/facet/facet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deepMix, each, every, get, isNil } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { getAxisOption } from '../util/axis';\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nvar Facet = /** @class */ (function () {\n    function Facet(view, cfg) {\n        /** 是否销毁 */\n        this.destroyed = false;\n        /** 分面之后的所有分面数据结构 */\n        this.facets = [];\n        this.view = view;\n        this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n    }\n    /**\n     * 初始化过程\n     */\n    Facet.prototype.init = function () {\n        // 初始化容器\n        if (!this.container) {\n            this.container = this.createContainer();\n        }\n        // 生成分面布局信息\n        var data = this.view.getData();\n        this.facets = this.generateFacets(data);\n    };\n    /**\n     * 渲染分面，由上层 view 调用。包括：\n     *  - 分面 view\n     *  - 轴\n     *  - title\n     *\n     *  子类可以复写，添加一些其他组件，比如滚动条等\n     */\n    Facet.prototype.render = function () {\n        this.renderViews();\n    };\n    /**\n     * 更新 facet\n     */\n    Facet.prototype.update = function () {\n        // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n    };\n    /**\n     * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n     * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n     */\n    Facet.prototype.clear = function () {\n        this.clearFacetViews();\n    };\n    /**\n     * 销毁\n     */\n    Facet.prototype.destroy = function () {\n        this.clear();\n        if (this.container) {\n            this.container.remove(true);\n            this.container = undefined;\n        }\n        this.destroyed = true;\n        this.view = undefined;\n        this.facets = [];\n    };\n    /**\n     * 根据 facet 生成 view，可以给上层自定义使用\n     * @param facet\n     */\n    Facet.prototype.facetToView = function (facet) {\n        var region = facet.region, data = facet.data, _a = facet.padding, padding = _a === void 0 ? this.cfg.padding : _a;\n        var view = this.view.createView({\n            region: region,\n            padding: padding,\n        });\n        // 设置分面的数据\n        view.data(data || []);\n        facet.view = view;\n        // 前置钩子\n        this.beforeEachView(view, facet);\n        var eachView = this.cfg.eachView;\n        if (eachView) {\n            eachView(view, facet);\n        }\n        // 后置钩子\n        this.afterEachView(view, facet);\n        return view;\n    };\n    // 创建容器\n    Facet.prototype.createContainer = function () {\n        var foregroundGroup = this.view.getLayer(LAYER.FORE);\n        return foregroundGroup.addGroup();\n    };\n    /**\n     * 初始化 view\n     */\n    Facet.prototype.renderViews = function () {\n        this.createFacetViews();\n    };\n    /**\n     * 创建 分面 view\n     */\n    Facet.prototype.createFacetViews = function () {\n        var _this = this;\n        // 使用分面数据 创建分面 view\n        return this.facets.map(function (facet) {\n            return _this.facetToView(facet);\n        });\n    };\n    /**\n     * 从 view 中清除 facetView\n     */\n    Facet.prototype.clearFacetViews = function () {\n        var _this = this;\n        // 从 view 中移除分面 view\n        each(this.facets, function (facet) {\n            if (facet.view) {\n                _this.view.removeView(facet.view);\n                facet.view = undefined;\n            }\n        });\n    };\n    // 其他一些提供给子类使用的方法\n    /**\n     * 获取这个字段对应的所有值，数组\n     * @protected\n     * @param data 数据\n     * @param field 字段名\n     * @return 字段对应的值\n     */\n    Facet.prototype.getFieldValues = function (data, field) {\n        var rst = [];\n        var cache = {};\n        // 去重、去除 Nil 值\n        each(data, function (d) {\n            var value = d[field];\n            if (!isNil(value) && !cache[value]) {\n                rst.push(value);\n                cache[value] = true;\n            }\n        });\n        return rst;\n    };\n    /**\n     * 获得每个分面的 region，平分区域\n     * @param rows row 总数\n     * @param cols col 总数\n     * @param xIndex x 方向 index\n     * @param yIndex y 方向 index\n     */\n    Facet.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n        // x, y 方向均分 100% 宽高\n        var xRatio = 1 / (cols === 0 ? 1 : cols);\n        var yRatio = 1 / (rows === 0 ? 1 : rows);\n        var start = {\n            x: xRatio * xIndex,\n            y: yRatio * yIndex,\n        };\n        var end = {\n            x: xRatio * (xIndex + 1),\n            y: yRatio * (yIndex + 1),\n        };\n        return {\n            start: start,\n            end: end,\n        };\n    };\n    Facet.prototype.getDefaultCfg = function () {\n        return {\n            eachView: undefined,\n            showTitle: true,\n            padding: 10,\n            fields: [],\n        };\n    };\n    /**\n     * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n     */\n    Facet.prototype.getDefaultTitleCfg = function () {\n        // @ts-ignore\n        var fontFamily = this.view.getTheme().fontFamily;\n        return {\n            style: {\n                fontSize: 14,\n                fill: '#666',\n                fontFamily: fontFamily,\n            }\n        };\n    };\n    /**\n     * 处理 axis 的默认配置\n     * @param view\n     * @param facet\n     */\n    Facet.prototype.processAxis = function (view, facet) {\n        var options = view.getOptions();\n        var coordinateOption = options.coordinate;\n        var geometries = view.geometries;\n        var coordinateType = get(coordinateOption, 'type', 'rect');\n        if (coordinateType === 'rect' && geometries.length) {\n            if (isNil(options.axes)) {\n                // @ts-ignore\n                options.axes = {};\n            }\n            var axes = options.axes;\n            var _a = geometries[0].getXYFields(), x = _a[0], y = _a[1];\n            var xOption = getAxisOption(axes, x);\n            var yOption = getAxisOption(axes, y);\n            if (xOption !== false) {\n                options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n            }\n            if (yOption !== false) {\n                options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n            }\n        }\n    };\n    /**\n     * 获取分面数据\n     * @param conditions\n     */\n    Facet.prototype.getFacetDataFilter = function (conditions) {\n        return function (datum) {\n            // 过滤出全部满足条件的数据\n            return every(conditions, function (condition) {\n                var field = condition.field, value = condition.value;\n                if (!isNil(value) && field) {\n                    return datum[field] === value;\n                }\n                return true;\n            });\n        };\n    };\n    return Facet;\n}());\nexport { Facet };\n//# sourceMappingURL=facet.js.map"]},"metadata":{},"sourceType":"module"}