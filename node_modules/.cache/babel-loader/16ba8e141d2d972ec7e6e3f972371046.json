{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\n\nconst CountryStats = props => {\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n    height: 500,\n    padding: [0, 20, 40]\n  });\n  chart.scale({\n    x: {\n      sync: true\n    },\n    y: {\n      sync: true\n    }\n  });\n  chart.coordinate('rect').reflect('y');\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip({\n    showTitle: false,\n    shared: true,\n    showMarkers: false,\n    containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n    itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n    domStyles: {\n      'g2-tooltip': {\n        borderRadius: '2px',\n        backgroundColor: '#DDDDDD',\n        padding: 0,\n        border: '1px solid #333'\n      }\n    }\n  });\n  const ds = new DataSet(); // draw the map\n\n  const dv = ds.createView('back').source(props.geoData, {\n    type: 'GeoJSON'\n  }).transform({\n    type: 'geo.projection',\n    projection: 'geoMercator',\n    as: ['x', 'y', 'centroidX', 'centroidY']\n  });\n  const bgView = chart.createView();\n  bgView.data(dv.rows);\n  bgView.tooltip(false);\n  bgView.polygon().position('x*y').style({\n    fill: '#DDDDDD',\n    stroke: '#b1b1b1',\n    lineWidth: 0.5,\n    fillOpacity: 0.85\n  });\n  const userData = ds.createView().source(props.countryData);\n  userData.transform({\n    type: 'map',\n    callback: obj => {\n      const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n      obj.x = projectedCoord[0];\n      obj.y = projectedCoord[1];\n      obj.deaths = obj.totalDeaths * 1; // check this line for improper map\n\n      obj.magnitude = obj.totalCases * 1;\n      return obj;\n    }\n  });\n  const pointView = chart.createView();\n  pointView.data(userData.rows);\n  pointView.point().position('x*y').size('magnitude', [2, 30]).shape('circle').color('#FF2F29').tooltip('country*active*recovered*critical*total*totalCases').style({\n    fillOpacity: 0.45\n  }).state({\n    active: {\n      style: {\n        lineWidth: 1,\n        stroke: '#FF2F29'\n      }\n    }\n  });\n  pointView.interaction('element-active');\n\n  if (props.geoData.type && props.countryData) {\n    chart.render();\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0 text-center text-uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","DataSet","Chart","CardHeader","CardBody","Card","CountryStats","props","chart","container","autoFit","height","padding","scale","x","sync","y","coordinate","reflect","legend","axis","tooltip","showTitle","shared","showMarkers","containerTpl","itemTpl","domStyles","borderRadius","backgroundColor","border","ds","dv","createView","source","geoData","type","transform","projection","as","bgView","data","rows","polygon","position","style","fill","stroke","lineWidth","fillOpacity","userData","countryData","callback","obj","projectedCoord","geoProjectPosition","longitude","latitude","deaths","totalDeaths","magnitude","totalCases","pointView","point","size","shape","color","state","active","interaction","render","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\n\n\n\nconst CountryStats = (props) => {\n\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n    height: 500,\n    padding: [0, 20, 40]\n  });\n\n  chart.scale({\n    x: { sync: true },\n    y: { sync: true }\n  });\n  chart.coordinate('rect').reflect('y');\n  chart.legend(false);\n  chart.axis(false);\n\n  chart.tooltip({\n    showTitle: false,\n    shared: true,\n    showMarkers: false,\n    containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n    itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n    domStyles: {\n      'g2-tooltip': {\n        borderRadius: '2px',\n        backgroundColor: '#DDDDDD',\n        padding: 0,\n        border: '1px solid #333'\n      }\n    }\n  });\n  const ds = new DataSet();\n  // draw the map\n  const dv = ds.createView('back')\n    .source(props.geoData, {\n      type: 'GeoJSON'\n    })\n    .transform({\n      type: 'geo.projection',\n      projection: 'geoMercator',\n      as: ['x', 'y', 'centroidX', 'centroidY']\n    });\n\n  const bgView = chart.createView();\n  bgView.data(dv.rows);\n  bgView.tooltip(false);\n  bgView.polygon()\n    .position('x*y')\n    .style({\n      fill: '#DDDDDD',\n      stroke: '#b1b1b1',\n      lineWidth: 0.5,\n      fillOpacity: 0.85\n\n    });\n\n  const userData = ds.createView().source(props.countryData);\n  userData.transform({\n    type: 'map',\n    callback: obj => {\n      const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n      obj.x = projectedCoord[0];\n      obj.y = projectedCoord[1];\n      obj.deaths = obj.totalDeaths * 1; // check this line for improper map\n      obj.magnitude = obj.totalCases * 1;\n      return obj;\n    }\n  });\n\n  const pointView = chart.createView();\n  pointView.data(userData.rows);\n  pointView.point()\n    .position('x*y')\n    .size('magnitude', [2, 30])\n    .shape('circle')\n    .color('#FF2F29')\n    .tooltip('country*active*recovered*critical*total*totalCases')\n    .style({\n      fillOpacity: 0.45,\n    })\n    .state({\n      active: {\n        style: {\n          lineWidth: 1,\n          stroke: '#FF2F29'\n        }\n      }\n    });\n  pointView.interaction('element-active');\n\n  if (props.geoData.type && props.countryData) {\n    chart.render();\n  }\n  \n  return (\n\n    <>\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0 text-center text-uppercase\">{props.title}</h6>\n        </CardHeader>\n        <CardBody className=\"pt-0\">\n          <div id=\"container\" />\n        </CardBody>\n      </Card>\n    </>\n  );\n}\nexport default CountryStats;\n\n\n"]},"metadata":{},"sourceType":"module"}