{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx\";\nimport React, { useState } from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\nconst initialState = {\n  searchInput: [],\n  rendered: false,\n  chartData: []\n};\n\nconst CountryCaseStats = props => {\n  const [state, setstate] = useState(initialState);\n\n  const displayChart = e => {\n    e.preventDefault();\n    var filterResult = props.countryCaseData.filter(data => state.searchInput == data.country); // var filterResult = countryCaseData;\n\n    if (filterResult && filterResult.length > 0) {\n      const percentageActive = (filterResult[0].active / filterResult[0].totalCases).toFixed(2);\n      const percentageCritical = (filterResult[0].critical / filterResult[0].totalCases).toFixed(2);\n      const percentageRecovered = (filterResult[0].recovered / filterResult[0].totalCases).toFixed(2);\n      const percentageDeaths = (filterResult[0].totalDeaths / filterResult[0].totalCases).toFixed(2);\n      state.chartData.push({\n        item: \"Active\",\n        count: ~~(percentageActive * 100),\n        percent: parseFloat(percentageActive)\n      });\n      state.chartData.push({\n        item: \"Critical\",\n        count: ~~(percentageCritical * 100),\n        percent: parseFloat(percentageCritical)\n      });\n      state.chartData.push({\n        item: \"Recovered\",\n        count: ~~(percentageRecovered * 100),\n        percent: parseFloat(percentageRecovered)\n      });\n      state.chartData.push({\n        item: \"Deaths\",\n        count: ~~(percentageDeaths * 100),\n        percent: parseFloat(percentageDeaths)\n      });\n      const chart = new Chart({\n        container: 'containerPieChart',\n        autoFit: true,\n        height: 500\n      });\n      chart.data(state.chartData);\n      chart.scale('percent', {\n        formatter: val => {\n          val = val * 100 + '%';\n          return val;\n        }\n      });\n      chart.coordinate('theta', {\n        radius: 0.75,\n        innerRadius: 0.6\n      });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false,\n        itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n      });\n      chart.annotation().text({\n        position: ['50%', '50%'],\n        content: \"Total Confirmed Cases\",\n        style: {\n          fontSize: 14,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetY: -20\n      }).text({\n        position: ['50%', '50%'],\n        content: filterResult[0].totalCases,\n        style: {\n          fontSize: 20,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetX: -10,\n        offsetY: 20\n      });\n      chart.interval().adjust('stack').position('percent').color('item').label('percent', percent => {\n        return {\n          content: data => {\n            return `${data.item}: ${percent * 100}%`;\n          }\n        };\n      }).tooltip('item*percent', (item, percent) => {\n        percent = percent * 100 + '%';\n        return {\n          name: item,\n          value: percent\n        };\n      });\n      chart.interaction('element-active');\n      chart.render();\n    }\n\n    setstate({ ...state,\n      rendered: true\n    });\n  };\n\n  const handleChange = e => {\n    setstate({ ...state,\n      searchInput: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"py-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    seamless: true,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    placeholder: \"Enter Country Name\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    type: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    theme: \"primary\",\n    onClick: displayChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, \"Search\"))), state.rendered && state.chartData.length > /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"m-0\",\n    style: \"color:#FF0000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 20\n    }\n  }, \"No Search Record Found \"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"containerPieChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default CountryCaseStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx"],"names":["React","useState","Card","CardHeader","CardBody","Button","InputGroup","FormInput","InputGroupAddon","Chart","initialState","searchInput","rendered","chartData","CountryCaseStats","props","state","setstate","displayChart","e","preventDefault","filterResult","countryCaseData","filter","data","country","length","percentageActive","active","totalCases","toFixed","percentageCritical","critical","percentageRecovered","recovered","percentageDeaths","totalDeaths","push","item","count","percent","parseFloat","chart","container","autoFit","height","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","offsetX","interval","adjust","color","label","name","value","interaction","render","handleChange","target","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\n\nconst initialState = {\n    searchInput: [],\n    rendered: false,\n     chartData : []\n}\n\n\nconst CountryCaseStats = (props) => {\n\n    const [state, setstate] = useState(initialState)\n\n    const displayChart = (e) => {\n\n        e.preventDefault();\n         var filterResult = props.countryCaseData.filter(data => state.searchInput == data.country);\n        // var filterResult = countryCaseData;\n\n        if (filterResult && filterResult.length > 0) {\n\n            const percentageActive = ((filterResult[0].active / filterResult[0].totalCases)).toFixed(2);\n            const percentageCritical = (((filterResult[0].critical / filterResult[0].totalCases)).toFixed(2))\n            const percentageRecovered = (((filterResult[0].recovered / filterResult[0].totalCases))).toFixed(2)\n            const percentageDeaths = (((filterResult[0].totalDeaths / filterResult[0].totalCases))).toFixed(2)\n\n            state.chartData.push({\n                item: \"Active\", \n                count: ~~(percentageActive * 100),\n                percent: parseFloat(percentageActive)\n            });\n            \n            state.chartData.push({\n                item: \"Critical\",\n                 count: ~~(percentageCritical * 100),\n                 percent: parseFloat(percentageCritical) \n            });\n\n            state.chartData.push({\n                item: \"Recovered\", \n                count: ~~(percentageRecovered * 100),\n                percent: parseFloat(percentageRecovered)\n            });\n\n            state.chartData.push({\n                item: \"Deaths\", \n                count: ~~(percentageDeaths * 100),\n                percent: parseFloat(percentageDeaths)\n            })\n\n            const chart = new Chart({\n                container: 'containerPieChart',\n                autoFit: true,\n                height: 500,\n            });\n\n            chart.data(state.chartData);\n            chart.scale('percent', {\n                formatter: (val) => {\n                    val = val * 100 + '%';\n                    return val;\n                },\n            }); \n            chart.coordinate('theta', {\n                radius: 0.75,\n                innerRadius: 0.6,\n            });\n            chart.tooltip({\n                showTitle: false,\n                showMarkers: false,\n                itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n            });\n            chart.annotation()\n                .text({\n                    position: ['50%', '50%'],\n                    content: \"Total Confirmed Cases\",\n                    style: {\n                        fontSize: 14,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetY: -20,\n                })\n                .text({\n                    position: ['50%', '50%'],\n                    content: filterResult[0].totalCases,\n                    style: {\n                        fontSize: 20,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetX: -10,\n                    offsetY: 20,\n                });\n            chart.interval()\n                .adjust('stack')\n                .position('percent')\n                .color('item')\n                .label('percent', (percent) => {\n                    return {\n                        content: (data) => {\n                            return `${data.item}: ${percent * 100}%`;\n                        },\n                    };\n                })\n                .tooltip('item*percent', (item, percent) => {\n                    percent = percent * 100 + '%';\n                    return {\n                        name: item,\n                        value: percent,\n                    };\n                });\n            chart.interaction('element-active');\n            chart.render();\n        }\n        setstate({...state, rendered:true})\n\n    }\n\n    const handleChange = (e) => {\n        setstate({ ...state, searchInput: e.target.value })\n    }\n\n    return (\n        <Card small className=\"h-100\">\n            <CardHeader className=\"border-bottom\">\n                <h6 className=\"m-0\">{props.title}</h6>\n            </CardHeader>\n            <CardBody className=\"py-0\">\n                <InputGroup seamless className=\"mb-3\">\n                    <FormInput placeholder=\"Enter Country Name\" onChange={handleChange} />\n                    <InputGroupAddon type=\"append\">\n                        <Button theme=\"primary\" onClick={displayChart}>Search</Button>\n                    </InputGroupAddon>\n                    \n                </InputGroup>\n                {state.rendered && state.chartData.length >  (\n                   <h5 className=\"m-0\" style=\"color:#FF0000\">No Search Record Found </h5>\n                )}\n                <div id=\"containerPieChart\"/>\n            </CardBody>\n\n        </Card>\n    );\n}\n\nexport default CountryCaseStats;\n"]},"metadata":{},"sourceType":"module"}