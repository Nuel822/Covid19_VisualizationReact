{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from '../../action/countryStats.action';\nconst userData = [{\n  name: 'Russia',\n  value: 86.8\n}, {\n  name: 'China',\n  value: 106.3\n}, {\n  name: 'Japan',\n  value: 94.7\n}, {\n  name: 'Mongolia',\n  value: 98\n}, {\n  name: 'Canada',\n  value: 98.4\n}, {\n  name: 'United Kingdom',\n  value: 97.2\n}, {\n  name: 'United States of America',\n  value: 98.3\n}, {\n  name: 'Brazil',\n  value: 96.7\n}, {\n  name: 'Argentina',\n  value: 95.8\n}, {\n  name: 'Algeria',\n  value: 101.3\n}, {\n  name: 'France',\n  value: 94.8\n}, {\n  name: 'Germany',\n  value: 96.6\n}, {\n  name: 'Ukraine',\n  value: 86.3\n}, {\n  name: 'Egypt',\n  value: 102.1\n}, {\n  name: 'South Africa',\n  value: 101.3\n}, {\n  name: 'India',\n  value: 107.6\n}, {\n  name: 'Australia',\n  value: 99.9\n}, {\n  name: 'Saudi Arabia',\n  value: 130.1\n}, {\n  name: 'Afghanistan',\n  value: 106.5\n}, {\n  name: 'Kazakhstan',\n  value: 93.4\n}, {\n  name: 'Indonesia',\n  value: 101.4\n}];\n\nconst CountryStats = ({\n  title\n}) => {\n  const dispatch = useDispatch();\n  dispatch(action.fetchDvData());\n  const {\n    geoData\n  } = useSelector(state => ({\n    geoData: state.CountryStats.geoData\n  }));\n  useEffect(() => {\n    console.log(geoData);\n\n    if (geoData.length > 5) {\n      const ds = new DataSet();\n      const dv = ds.createView('back').source(geoData, {\n        type: 'GeoJSON'\n      });\n      const userDv = ds.createView().source(userData).transform({\n        geoDataView: dv,\n        field: 'value',\n        type: 'geo.centroid',\n        as: ['longitude', 'latitude']\n      });\n      const chart = new Chart({\n        container: 'container',\n        autoFit: true,\n        height: 500\n      });\n      chart.scale({\n        longitude: {\n          sync: true\n        },\n        latitude: {\n          sync: true\n        }\n      });\n      chart.axis(false);\n      chart.legend({\n        position: 'right'\n      });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false\n      });\n      const bgView = chart.createView();\n      bgView.data(dv.rows);\n      bgView.tooltip(false);\n      bgView.polygon().position('longitude*latitude').color('#ebedf0').style({\n        lineWidth: 1,\n        stroke: '#fafbfc'\n      });\n      const userView = chart.createView();\n      userView.data(userDv.rows);\n      userView.point().position('longitude*latitude').color('#1890ff').shape('circle').size('value', [5, 15]).style({\n        lineWidth: 1,\n        stroke: '#1890ff'\n      });\n      userView.interaction('element-active');\n      chart.render();\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","useEffect","DataSet","Chart","CardHeader","CardBody","Card","useDispatch","useSelector","action","userData","name","value","CountryStats","title","dispatch","fetchDvData","geoData","state","console","log","length","ds","dv","createView","source","type","userDv","transform","geoDataView","field","as","chart","container","autoFit","height","scale","longitude","sync","latitude","axis","legend","position","tooltip","showTitle","showMarkers","bgView","data","rows","polygon","color","style","lineWidth","stroke","userView","point","shape","size","interaction","render"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as action from '../../action/countryStats.action'\n\n\nconst userData = [\n  { name: 'Russia', value: 86.8 },\n  { name: 'China', value: 106.3 },\n  { name: 'Japan', value: 94.7 },\n  { name: 'Mongolia', value: 98 },\n  { name: 'Canada', value: 98.4 },\n  { name: 'United Kingdom', value: 97.2 },\n  { name: 'United States of America', value: 98.3 },\n  { name: 'Brazil', value: 96.7 },\n  { name: 'Argentina', value: 95.8 },\n  { name: 'Algeria', value: 101.3 },\n  { name: 'France', value: 94.8 },\n  { name: 'Germany', value: 96.6 },\n  { name: 'Ukraine', value: 86.3 },\n  { name: 'Egypt', value: 102.1 },\n  { name: 'South Africa', value: 101.3 },\n  { name: 'India', value: 107.6 },\n  { name: 'Australia', value: 99.9 },\n  { name: 'Saudi Arabia', value: 130.1 },\n  { name: 'Afghanistan', value: 106.5 },\n  { name: 'Kazakhstan', value: 93.4 },\n  { name: 'Indonesia', value: 101.4 },\n];\n\nconst CountryStats = ({ title }) => {\n\n  const dispatch = useDispatch()\n\n  dispatch(action.fetchDvData())\n\n  const { geoData } = useSelector(state => ({\n    geoData: state.CountryStats.geoData\n  }))\n\n  useEffect(() => {\n\n    console.log(geoData);\n\n    if (geoData.length > 5) {\n      const ds = new DataSet();\n      const dv = ds.createView('back').source(geoData, {\n        type: 'GeoJSON',\n      });\n\n      const userDv = ds\n        .createView()\n        .source(userData)\n        .transform({\n          geoDataView: dv,\n          field: 'value',\n          type: 'geo.centroid',\n          as: ['longitude', 'latitude'],\n        });\n\n      const chart = new Chart({\n        container: 'container',\n        autoFit: true,\n        height: 500,\n      });\n      chart.scale({\n        longitude: {\n          sync: true,\n        },\n        latitude: {\n          sync: true,\n        },\n      });\n      chart.axis(false);\n\n      chart.legend({ position: 'right' });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false\n      });\n\n      const bgView = chart.createView();\n      bgView.data(dv.rows);\n      bgView.tooltip(false);\n      bgView\n        .polygon()\n        .position('longitude*latitude')\n        .color('#ebedf0')\n        .style({\n          lineWidth: 1,\n          stroke: '#fafbfc',\n        });\n\n      const userView = chart.createView();\n      userView.data(userDv.rows);\n      userView\n        .point()\n        .position('longitude*latitude')\n        .color('#1890ff')\n        .shape('circle')\n        .size('value', [5, 15])\n        .style({\n          lineWidth: 1,\n          stroke: '#1890ff',\n        });\n      userView.interaction('element-active');\n      chart.render();\n    }\n\n  }, [])\n\n\n  return (\n    <>\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0\">{title}</h6>\n        </CardHeader>\n        <CardBody className=\"pt-0\">\n          <div id=\"container\" />\n        </CardBody>\n      </Card>\n    </>\n  );\n\n}\nexport default CountryStats;"]},"metadata":{},"sourceType":"module"}