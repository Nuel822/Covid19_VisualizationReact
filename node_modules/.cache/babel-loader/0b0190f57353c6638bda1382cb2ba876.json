{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isUndefined, map, mix } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CircleAxis, CircleGrid, LineAxis, LineGrid } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { getAxisDirection, getAxisFactorByRegion, getAxisRegion, getAxisThemeCfg, getAxisTitleText, getCircleAxisCenterRadius } from '../../util/axis';\nimport { getAxisOption } from '../../util/axis';\nimport { getCircleGridItems, getGridThemeCfg, getLineGridItems, showGrid } from '../../util/grid';\nimport { omit } from '../../util/helper';\nimport { Controller } from './base'; // update 组件的时候，忽略的数据更新\n\nvar OMIT_CFG = ['container'];\n/**\n * @ignore\n * G2 Axis controller, will:\n *  - create component\n *    - axis\n *    - grid\n *  - life circle\n */\n\nvar Axis =\n/** @class */\nfunction (_super) {\n  __extends(Axis, _super);\n\n  function Axis(view) {\n    var _this = _super.call(this, view) || this;\n    /** 使用 object 存储组件 */\n\n\n    _this.cache = new Map(); // 先创建 gridContainer，将 grid 放到 axis 底层\n\n    _this.gridContainer = _this.view.getLayer(LAYER.BG).addGroup();\n    _this.axisContainer = _this.view.getLayer(LAYER.BG).addGroup();\n    return _this;\n  }\n\n  Object.defineProperty(Axis.prototype, \"name\", {\n    get: function get() {\n      return 'axis';\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Axis.prototype.init = function () {};\n\n  Axis.prototype.render = function () {\n    this.option = this.view.getOptions().axes;\n    this.createXAxes();\n    this.createYAxes();\n  };\n  /**\n   * 更新组件布局，位置大小\n   */\n\n\n  Axis.prototype.layout = function () {\n    var _this = this;\n\n    var coordinate = this.view.getCoordinate();\n    each(this.getComponents(), function (co) {\n      var component = co.component,\n          direction = co.direction,\n          type = co.type,\n          extra = co.extra;\n      var dim = extra.dim,\n          scale = extra.scale,\n          alignTick = extra.alignTick;\n      var updated;\n\n      if (type === COMPONENT_TYPE.AXIS) {\n        if (coordinate.isPolar) {\n          if (dim === 'x') {\n            updated = coordinate.isTransposed ? getAxisRegion(coordinate, direction) : getCircleAxisCenterRadius(coordinate);\n          } else if (dim === 'y') {\n            updated = coordinate.isTransposed ? getCircleAxisCenterRadius(coordinate) : getAxisRegion(coordinate, direction);\n          }\n        } else {\n          updated = getAxisRegion(coordinate, direction);\n        }\n      } else if (type === COMPONENT_TYPE.GRID) {\n        if (coordinate.isPolar) {\n          var items = void 0;\n\n          if (coordinate.isTransposed) {\n            items = dim === 'x' ? getCircleGridItems(coordinate, _this.view.getYScales()[0], scale, alignTick, dim) : getLineGridItems(coordinate, scale, dim, alignTick);\n          } else {\n            items = dim === 'x' ? getLineGridItems(coordinate, scale, dim, alignTick) : getCircleGridItems(coordinate, _this.view.getXScale(), scale, alignTick, dim);\n          }\n\n          updated = {\n            items: items,\n            // coordinate 更新之后，center 也变化了\n            center: _this.view.getCoordinate().getCenter()\n          };\n        } else {\n          updated = {\n            items: getLineGridItems(coordinate, scale, dim, alignTick)\n          };\n        }\n      }\n\n      component.update(updated);\n    });\n  };\n  /**\n   * 更新 axis 组件\n   */\n\n\n  Axis.prototype.update = function () {\n    this.option = this.view.getOptions().axes;\n    var updatedCache = new Map();\n    this.updateXAxes(updatedCache);\n    this.updateYAxes(updatedCache); // 处理完成之后，销毁删除的\n    // 不在处理中的\n\n    var newCache = new Map();\n    this.cache.forEach(function (co, key) {\n      if (updatedCache.has(key)) {\n        newCache.set(key, co);\n      } else {\n        // 不存在，则是所有需要被销毁的组件\n        co.component.destroy();\n      }\n    }); // 更新缓存\n\n    this.cache = newCache;\n  };\n\n  Axis.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this.cache.clear();\n    this.gridContainer.clear();\n    this.axisContainer.clear();\n  };\n\n  Axis.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.gridContainer.remove(true);\n    this.axisContainer.remove(true);\n  };\n  /**\n   * @override\n   */\n\n\n  Axis.prototype.getComponents = function () {\n    var co = [];\n    this.cache.forEach(function (value) {\n      co.push(value);\n    });\n    return co;\n  };\n  /**\n   * 更新 x axis\n   * @param updatedCache\n   */\n\n\n  Axis.prototype.updateXAxes = function (updatedCache) {\n    // x axis\n    var scale = this.view.getXScale(); // @ts-ignore\n\n    if (!scale || scale.isIdentity) {\n      return;\n    }\n\n    var field = scale.field;\n    var xAxisOption = getAxisOption(this.option, scale.field);\n\n    if (xAxisOption === false) {\n      return;\n    }\n\n    var coordinate = this.view.getCoordinate();\n    var axisId = this.getId('axis', field);\n    var gridId = this.getId('grid', field);\n    var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n    var layer = LAYER.BG;\n    var dim = 'x';\n\n    if (coordinate.isRect) {\n      // 1. do axis update\n      var axis = this.cache.get(axisId); // 存在则更新\n\n      if (axis) {\n        var cfg = this.getLineAxisCfg(scale, xAxisOption, direction);\n        omit(cfg, OMIT_CFG);\n        axis.component.update(cfg);\n        updatedCache.set(axisId, axis);\n      } else {\n        // 不存在，则创建\n        axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n        this.cache.set(axisId, axis);\n        updatedCache.set(axisId, axis);\n      } // 2. do grid update\n\n\n      var grid = this.cache.get(gridId); // 存在则更新\n\n      if (grid) {\n        var cfg = this.getLineGridCfg(scale, xAxisOption, direction, dim);\n        omit(cfg, OMIT_CFG);\n        grid.component.update(cfg);\n        updatedCache.set(gridId, grid);\n      } else {\n        // 不存在则创建\n        grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n\n        if (grid) {\n          this.cache.set(gridId, grid);\n          updatedCache.set(gridId, grid);\n        }\n      }\n    } else if (coordinate.isPolar) {\n      // 1. do axis update\n      var axis = this.cache.get(axisId); // 存在则更新\n\n      if (axis) {\n        var cfg = coordinate.isTransposed ? // @ts-ignore\n        this.getLineAxisCfg(scale, xAxisOption, 'radius') : this.getCircleAxisCfg(scale, xAxisOption, direction);\n        omit(cfg, OMIT_CFG);\n        axis.component.update(cfg);\n        updatedCache.set(axisId, axis);\n      } else {\n        // 不存在，则创建\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            // 默认不渲染转置极坐标下的坐标轴\n            return;\n          } else {\n            // @ts-ignore\n            axis = this.createLineAxis(scale, xAxisOption, layer, 'radius', dim);\n          }\n        } else {\n          axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n        }\n\n        this.cache.set(axisId, axis);\n        updatedCache.set(axisId, axis);\n      } // 2. do grid update\n\n\n      var grid = this.cache.get(gridId); // 存在则更新\n\n      if (grid) {\n        var cfg = coordinate.isTransposed ? // @ts-ignore\n        this.getCircleGridCfg(scale, xAxisOption, 'radius', dim) : // @ts-ignore\n        this.getLineGridCfg(scale, xAxisOption, 'circle', dim);\n        omit(cfg, OMIT_CFG);\n        grid.component.update(cfg);\n        updatedCache.set(gridId, grid);\n      } else {\n        // 不存在则创建\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            return;\n          } else {\n            // @ts-ignore\n            grid = this.createCircleGrid(scale, xAxisOption, layer, 'radius', dim);\n          }\n        } else {\n          // @ts-ignore\n          grid = this.createLineGrid(scale, xAxisOption, layer, 'circle', dim);\n        }\n\n        if (grid) {\n          this.cache.set(gridId, grid);\n          updatedCache.set(gridId, grid);\n        }\n      }\n    } else {// helix and other, do not draw axis\n    }\n  };\n\n  Axis.prototype.updateYAxes = function (updatedCache) {\n    var _this = this; // y axes\n\n\n    var yScales = this.view.getYScales();\n    each(yScales, function (scale, idx) {\n      // @ts-ignore\n      if (!scale || scale.isIdentity) {\n        return;\n      }\n\n      var field = scale.field;\n      var yAxisOption = getAxisOption(_this.option, field);\n\n      if (yAxisOption !== false) {\n        var layer = LAYER.BG;\n        var dim = 'y';\n\n        var axisId = _this.getId('axis', field);\n\n        var gridId = _this.getId('grid', field);\n\n        var coordinate = _this.view.getCoordinate();\n\n        if (coordinate.isRect) {\n          var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT); // 1. do axis update\n\n          var axis = _this.cache.get(axisId); // 存在则更新\n\n\n          if (axis) {\n            var cfg = _this.getLineAxisCfg(scale, yAxisOption, direction);\n\n            omit(cfg, OMIT_CFG);\n            axis.component.update(cfg);\n            updatedCache.set(axisId, axis);\n          } else {\n            // 不存在，则创建\n            axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n\n            _this.cache.set(axisId, axis);\n\n            updatedCache.set(axisId, axis);\n          } // 2. do grid update\n\n\n          var grid = _this.cache.get(gridId); // 存在则更新\n\n\n          if (grid) {\n            var cfg = _this.getLineGridCfg(scale, yAxisOption, direction, dim);\n\n            omit(cfg, OMIT_CFG);\n            grid.component.update(cfg);\n            updatedCache.set(gridId, grid);\n          } else {\n            // 不存在则创建\n            grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n\n            if (grid) {\n              _this.cache.set(gridId, grid);\n\n              updatedCache.set(gridId, grid);\n            }\n          }\n        } else if (coordinate.isPolar) {\n          // 1. do axis update\n          var axis = _this.cache.get(axisId); // 存在则更新\n\n\n          if (axis) {\n            var cfg = coordinate.isTransposed ? // @ts-ignore\n            _this.getCircleAxisCfg(scale, yAxisOption, 'circle') : // @ts-ignore\n            _this.getLineAxisCfg(scale, yAxisOption, 'radius'); // @ts-ignore\n\n            omit(cfg, OMIT_CFG);\n            axis.component.update(cfg);\n            updatedCache.set(axisId, axis);\n          } else {\n            // 不存在，则创建\n            if (coordinate.isTransposed) {\n              if (isUndefined(yAxisOption)) {\n                return;\n              } else {\n                // @ts-ignore\n                axis = _this.createCircleAxis(scale, yAxisOption, layer, 'circle', dim);\n              }\n            } else {\n              // @ts-ignore\n              axis = _this.createLineAxis(scale, yAxisOption, layer, 'radius', dim);\n            }\n\n            _this.cache.set(axisId, axis);\n\n            updatedCache.set(axisId, axis);\n          } // 2. do grid update\n\n\n          var grid = _this.cache.get(gridId); // 存在则更新\n\n\n          if (grid) {\n            var cfg = coordinate.isTransposed ? // @ts-ignore\n            _this.getLineGridCfg(scale, yAxisOption, 'circle', dim) : // @ts-ignore\n            _this.getCircleGridCfg(scale, yAxisOption, 'radius', dim);\n            omit(cfg, OMIT_CFG);\n            grid.component.update(cfg);\n            updatedCache.set(gridId, grid);\n          } else {\n            // 不存在则创建\n            if (coordinate.isTransposed) {\n              if (isUndefined(yAxisOption)) {\n                return;\n              } else {\n                // @ts-ignore\n                grid = _this.createLineGrid(scale, yAxisOption, layer, 'circle', dim);\n              }\n            } else {\n              // @ts-ignore\n              grid = _this.createCircleGrid(scale, yAxisOption, layer, 'radius', dim);\n            }\n\n            if (grid) {\n              _this.cache.set(gridId, grid);\n\n              updatedCache.set(gridId, grid);\n            }\n          }\n        } else {// helix and other, do not draw axis\n        }\n      }\n    });\n  };\n  /**\n   * 创建 x axis 组件\n   */\n\n\n  Axis.prototype.createXAxes = function () {\n    // x axis\n    var scale = this.view.getXScale();\n\n    if (!scale || scale.isIdentity) {\n      return;\n    }\n\n    var xAxisOption = getAxisOption(this.option, scale.field);\n\n    if (xAxisOption !== false) {\n      var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n      var layer = LAYER.BG;\n      var dim = 'x';\n      var coordinate = this.view.getCoordinate();\n      var axisId = this.getId('axis', scale.field);\n      var gridId = this.getId('grid', scale.field);\n\n      if (coordinate.isRect) {\n        // axis\n        var axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n        this.cache.set(axisId, axis); // grid\n\n        var grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n\n        if (grid) {\n          this.cache.set(gridId, grid);\n        }\n      } else if (coordinate.isPolar) {\n        var axis = void 0;\n        var grid = void 0;\n\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            // 默认不渲染转置极坐标的坐标轴\n            return;\n          } else {\n            // 如果用户打开了隐藏的坐标轴 chart.axis(true)/chart.axis('x', true)\n            // 那么对于转置了的极坐标，半径轴显示的是 x 轴对应的数据\n            // @ts-ignore\n            axis = this.createLineAxis(scale, xAxisOption, layer, 'radius', dim); // @ts-ignore\n\n            grid = this.createCircleGrid(scale, xAxisOption, layer, 'radius', dim);\n          }\n        } else {\n          axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim); // grid，极坐标下的 x 轴网格线沿着半径方向绘制\n          // @ts-ignore\n\n          grid = this.createLineGrid(scale, xAxisOption, layer, 'circle', dim);\n        }\n\n        this.cache.set(axisId, axis);\n\n        if (grid) {\n          this.cache.set(gridId, grid);\n        }\n      } else {// helix and other, do not draw axis\n      }\n    }\n  };\n  /**\n   * create y axis\n   */\n\n\n  Axis.prototype.createYAxes = function () {\n    var _this = this; // y axes\n\n\n    var yScales = this.view.getYScales();\n    each(yScales, function (scale, idx) {\n      // @ts-ignore\n      if (!scale || scale.isIdentity) {\n        return;\n      }\n\n      var field = scale.field;\n      var yAxisOption = getAxisOption(_this.option, field);\n\n      if (yAxisOption !== false) {\n        var layer = LAYER.BG;\n        var dim = 'y';\n\n        var axisId = _this.getId('axis', field);\n\n        var gridId = _this.getId('grid', field);\n\n        var coordinate = _this.view.getCoordinate();\n\n        if (coordinate.isRect) {\n          var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT); // axis\n\n          var axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n\n          _this.cache.set(axisId, axis); // grid\n\n\n          var grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n\n          if (grid) {\n            _this.cache.set(gridId, grid);\n          }\n        } else if (coordinate.isPolar) {\n          var axis = void 0;\n          var grid = void 0;\n\n          if (coordinate.isTransposed) {\n            if (isUndefined(yAxisOption)) {\n              return;\n            } else {\n              // @ts-ignore\n              axis = _this.createCircleAxis(scale, yAxisOption, layer, 'circle', dim); // @ts-ignore\n\n              grid = _this.createLineGrid(scale, yAxisOption, layer, 'circle', dim);\n            }\n          } else {\n            // @ts-ignore\n            axis = _this.createLineAxis(scale, yAxisOption, layer, 'radius', dim); // @ts-ignore\n\n            grid = _this.createCircleGrid(scale, yAxisOption, layer, 'radius', dim);\n          }\n\n          _this.cache.set(_this.getId('axis', scale.field), axis);\n\n          if (grid) {\n            _this.cache.set(gridId, grid);\n          }\n        } else {// helix and other, do not draw axis\n        }\n      }\n    });\n  };\n  /**\n   * 创建 line axis\n   * @param scale\n   * @param option\n   * @param layer\n   * @param direction\n   * @param dim\n   */\n\n\n  Axis.prototype.createLineAxis = function (scale, option, layer, direction, dim) {\n    // axis\n    var axis = {\n      component: new LineAxis(this.getLineAxisCfg(scale, option, direction)),\n      layer: layer,\n      // @ts-ignore\n      direction: direction === 'radius' ? DIRECTION.NONE : direction,\n      type: COMPONENT_TYPE.AXIS,\n      extra: {\n        dim: dim,\n        scale: scale\n      }\n    };\n    axis.component.set('field', scale.field);\n    axis.component.init();\n    return axis;\n  };\n\n  Axis.prototype.createLineGrid = function (scale, option, layer, direction, dim) {\n    var cfg = this.getLineGridCfg(scale, option, direction, dim);\n\n    if (cfg) {\n      var grid = {\n        component: new LineGrid(cfg),\n        layer: layer,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.GRID,\n        extra: {\n          dim: dim,\n          scale: scale,\n          alignTick: get(cfg, 'alignTick', true)\n        }\n      };\n      grid.component.init();\n      return grid;\n    }\n  };\n\n  Axis.prototype.createCircleAxis = function (scale, option, layer, direction, dim) {\n    var axis = {\n      component: new CircleAxis(this.getCircleAxisCfg(scale, option, direction)),\n      layer: layer,\n      direction: direction,\n      type: COMPONENT_TYPE.AXIS,\n      extra: {\n        dim: dim,\n        scale: scale\n      }\n    };\n    axis.component.set('field', scale.field);\n    axis.component.init();\n    return axis;\n  };\n\n  Axis.prototype.createCircleGrid = function (scale, option, layer, direction, dim) {\n    var cfg = this.getCircleGridCfg(scale, option, direction, dim);\n\n    if (cfg) {\n      var grid = {\n        component: new CircleGrid(cfg),\n        layer: layer,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.GRID,\n        extra: {\n          dim: dim,\n          scale: scale,\n          alignTick: get(cfg, 'alignTick', true)\n        }\n      };\n      grid.component.init();\n      return grid;\n    }\n  };\n  /**\n   * generate line axis cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return line axis cfg\n   */\n\n\n  Axis.prototype.getLineAxisCfg = function (scale, axisOption, direction) {\n    var container = this.axisContainer;\n    var coordinate = this.view.getCoordinate();\n    var region = getAxisRegion(coordinate, direction);\n    var titleText = getAxisTitleText(scale, axisOption);\n\n    var baseAxisCfg = __assign(__assign({\n      container: container\n    }, region), {\n      ticks: map(scale.getTicks(), function (tick) {\n        return {\n          id: \"\" + tick.tickValue,\n          name: tick.text,\n          value: tick.value\n        };\n      }),\n      title: {\n        text: titleText\n      },\n      verticalFactor: coordinate.isPolar ? getAxisFactorByRegion(region, coordinate.getCenter()) * -1 : getAxisFactorByRegion(region, coordinate.getCenter())\n    });\n\n    var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), direction); // the cfg order should be ensure\n\n    var optionWithTitle = get(axisOption, ['title']) ? deepMix({}, {\n      title: {\n        style: {\n          text: titleText\n        }\n      }\n    }, axisOption) : axisOption;\n    var cfg = deepMix({}, baseAxisCfg, axisThemeCfg, optionWithTitle);\n    return mix(cfg, this.getAnimateCfg(cfg));\n  };\n  /**\n   * generate line grid cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @param dim\n   * @return line grid cfg\n   */\n\n\n  Axis.prototype.getLineGridCfg = function (scale, axisOption, direction, dim) {\n    if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n      return undefined;\n    }\n\n    var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), direction); // the cfg order should be ensure\n    // grid 动画以 axis 为准\n\n    var gridCfg = deepMix({\n      container: this.gridContainer\n    }, gridThemeCfg, get(axisOption, 'grid', {}), this.getAnimateCfg(axisOption));\n    gridCfg.items = getLineGridItems(this.view.getCoordinate(), scale, dim, get(gridCfg, 'alignTick', true));\n    return gridCfg;\n  };\n  /**\n   * generate circle axis cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return circle axis cfg\n   */\n\n\n  Axis.prototype.getCircleAxisCfg = function (scale, axisOption, direction) {\n    var container = this.axisContainer;\n    var ticks = map(scale.getTicks(), function (tick) {\n      return {\n        id: \"\" + tick.tickValue,\n        name: tick.text,\n        value: tick.value\n      };\n    });\n    var coordinate = this.view.getCoordinate();\n\n    if (!scale.isCategory && Math.abs(coordinate.endAngle - coordinate.startAngle) === Math.PI * 2) {\n      // x 轴对应的值如果是非 cat 类型，在整圆的情况下坐标轴第一个和最后一个文本会重叠，默认只展示第一个文本\n      ticks.pop();\n    }\n\n    var titleText = getAxisTitleText(scale, axisOption);\n\n    var baseAxisCfg = __assign(__assign({\n      container: container\n    }, getCircleAxisCenterRadius(this.view.getCoordinate())), {\n      ticks: ticks,\n      title: {\n        text: titleText\n      },\n      verticalFactor: 1\n    });\n\n    var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), 'circle'); // the cfg order should be ensure\n\n    var optionWithTitle = get(axisOption, ['title']) ? deepMix({}, {\n      title: {\n        style: {\n          text: titleText\n        }\n      }\n    }, axisOption) : axisOption;\n    var cfg = deepMix({}, baseAxisCfg, axisThemeCfg, optionWithTitle);\n    return mix(cfg, this.getAnimateCfg(cfg));\n  };\n  /**\n   * generate circle grid cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return circle grid cfg\n   */\n\n\n  Axis.prototype.getCircleGridCfg = function (scale, axisOption, direction, dim) {\n    if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n      return undefined;\n    } // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    // @ts-ignore\n\n\n    var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), 'radius');\n    var gridCfg = deepMix({\n      container: this.gridContainer,\n      center: this.view.getCoordinate().getCenter()\n    }, gridThemeCfg, get(axisOption, 'grid', {}), this.getAnimateCfg(axisOption));\n    var alignTick = get(gridCfg, 'alignTick', true);\n    var verticalScale = dim === 'x' ? this.view.getYScales()[0] : this.view.getXScale();\n    gridCfg.items = getCircleGridItems(this.view.getCoordinate(), verticalScale, scale, alignTick, dim); // the cfg order should be ensure\n    // grid 动画以 axis 为准\n\n    return gridCfg;\n  };\n\n  Axis.prototype.getId = function (name, key) {\n    var coordinate = this.view.getCoordinate(); // 坐标系类型也作为组件的 key\n\n    return name + \"-\" + key + \"-\" + coordinate.type;\n  };\n\n  Axis.prototype.getAnimateCfg = function (cfg) {\n    return {\n      animate: this.view.getOptions().animate && get(cfg, 'animate'),\n      animateOption: deepMix({}, DEFAULT_ANIMATE_CFG, {\n        appear: null\n      }, get(cfg, 'animateOption', {}))\n    };\n  };\n\n  return Axis;\n}(Controller);\n\nexport default Axis;","map":{"version":3,"sources":["../../../src/chart/controller/axis.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isUndefined, map, mix } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CircleAxis, CircleGrid, LineAxis, LineGrid } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { getAxisDirection, getAxisFactorByRegion, getAxisRegion, getAxisThemeCfg, getAxisTitleText, getCircleAxisCenterRadius } from '../../util/axis';\nimport { getAxisOption } from '../../util/axis';\nimport { getCircleGridItems, getGridThemeCfg, getLineGridItems, showGrid } from '../../util/grid';\nimport { omit } from '../../util/helper';\nimport { Controller } from './base';\n// update 组件的时候，忽略的数据更新\nvar OMIT_CFG = ['container'];\n/**\n * @ignore\n * G2 Axis controller, will:\n *  - create component\n *    - axis\n *    - grid\n *  - life circle\n */\nvar Axis = /** @class */ (function (_super) {\n    __extends(Axis, _super);\n    function Axis(view) {\n        var _this = _super.call(this, view) || this;\n        /** 使用 object 存储组件 */\n        _this.cache = new Map();\n        // 先创建 gridContainer，将 grid 放到 axis 底层\n        _this.gridContainer = _this.view.getLayer(LAYER.BG).addGroup();\n        _this.axisContainer = _this.view.getLayer(LAYER.BG).addGroup();\n        return _this;\n    }\n    Object.defineProperty(Axis.prototype, \"name\", {\n        get: function () {\n            return 'axis';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Axis.prototype.init = function () { };\n    Axis.prototype.render = function () {\n        this.option = this.view.getOptions().axes;\n        this.createXAxes();\n        this.createYAxes();\n    };\n    /**\n     * 更新组件布局，位置大小\n     */\n    Axis.prototype.layout = function () {\n        var _this = this;\n        var coordinate = this.view.getCoordinate();\n        each(this.getComponents(), function (co) {\n            var component = co.component, direction = co.direction, type = co.type, extra = co.extra;\n            var dim = extra.dim, scale = extra.scale, alignTick = extra.alignTick;\n            var updated;\n            if (type === COMPONENT_TYPE.AXIS) {\n                if (coordinate.isPolar) {\n                    if (dim === 'x') {\n                        updated = coordinate.isTransposed ? getAxisRegion(coordinate, direction) : getCircleAxisCenterRadius(coordinate);\n                    }\n                    else if (dim === 'y') {\n                        updated = coordinate.isTransposed ? getCircleAxisCenterRadius(coordinate) : getAxisRegion(coordinate, direction);\n                    }\n                }\n                else {\n                    updated = getAxisRegion(coordinate, direction);\n                }\n            }\n            else if (type === COMPONENT_TYPE.GRID) {\n                if (coordinate.isPolar) {\n                    var items = void 0;\n                    if (coordinate.isTransposed) {\n                        items = dim === 'x' ?\n                            getCircleGridItems(coordinate, _this.view.getYScales()[0], scale, alignTick, dim) :\n                            getLineGridItems(coordinate, scale, dim, alignTick);\n                    }\n                    else {\n                        items = dim === 'x' ?\n                            getLineGridItems(coordinate, scale, dim, alignTick) :\n                            getCircleGridItems(coordinate, _this.view.getXScale(), scale, alignTick, dim);\n                    }\n                    updated = {\n                        items: items,\n                        // coordinate 更新之后，center 也变化了\n                        center: _this.view.getCoordinate().getCenter(),\n                    };\n                }\n                else {\n                    updated = { items: getLineGridItems(coordinate, scale, dim, alignTick) };\n                }\n            }\n            component.update(updated);\n        });\n    };\n    /**\n     * 更新 axis 组件\n     */\n    Axis.prototype.update = function () {\n        this.option = this.view.getOptions().axes;\n        var updatedCache = new Map();\n        this.updateXAxes(updatedCache);\n        this.updateYAxes(updatedCache);\n        // 处理完成之后，销毁删除的\n        // 不在处理中的\n        var newCache = new Map();\n        this.cache.forEach(function (co, key) {\n            if (updatedCache.has(key)) {\n                newCache.set(key, co);\n            }\n            else {\n                // 不存在，则是所有需要被销毁的组件\n                co.component.destroy();\n            }\n        });\n        // 更新缓存\n        this.cache = newCache;\n    };\n    Axis.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.cache.clear();\n        this.gridContainer.clear();\n        this.axisContainer.clear();\n    };\n    Axis.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.gridContainer.remove(true);\n        this.axisContainer.remove(true);\n    };\n    /**\n     * @override\n     */\n    Axis.prototype.getComponents = function () {\n        var co = [];\n        this.cache.forEach(function (value) {\n            co.push(value);\n        });\n        return co;\n    };\n    /**\n     * 更新 x axis\n     * @param updatedCache\n     */\n    Axis.prototype.updateXAxes = function (updatedCache) {\n        // x axis\n        var scale = this.view.getXScale();\n        // @ts-ignore\n        if (!scale || scale.isIdentity) {\n            return;\n        }\n        var field = scale.field;\n        var xAxisOption = getAxisOption(this.option, scale.field);\n        if (xAxisOption === false) {\n            return;\n        }\n        var coordinate = this.view.getCoordinate();\n        var axisId = this.getId('axis', field);\n        var gridId = this.getId('grid', field);\n        var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n        var layer = LAYER.BG;\n        var dim = 'x';\n        if (coordinate.isRect) {\n            // 1. do axis update\n            var axis = this.cache.get(axisId);\n            // 存在则更新\n            if (axis) {\n                var cfg = this.getLineAxisCfg(scale, xAxisOption, direction);\n                omit(cfg, OMIT_CFG);\n                axis.component.update(cfg);\n                updatedCache.set(axisId, axis);\n            }\n            else {\n                // 不存在，则创建\n                axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n                this.cache.set(axisId, axis);\n                updatedCache.set(axisId, axis);\n            }\n            // 2. do grid update\n            var grid = this.cache.get(gridId);\n            // 存在则更新\n            if (grid) {\n                var cfg = this.getLineGridCfg(scale, xAxisOption, direction, dim);\n                omit(cfg, OMIT_CFG);\n                grid.component.update(cfg);\n                updatedCache.set(gridId, grid);\n            }\n            else {\n                // 不存在则创建\n                grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                    updatedCache.set(gridId, grid);\n                }\n            }\n        }\n        else if (coordinate.isPolar) {\n            // 1. do axis update\n            var axis = this.cache.get(axisId);\n            // 存在则更新\n            if (axis) {\n                var cfg = coordinate.isTransposed ?\n                    // @ts-ignore\n                    this.getLineAxisCfg(scale, xAxisOption, 'radius') :\n                    this.getCircleAxisCfg(scale, xAxisOption, direction);\n                omit(cfg, OMIT_CFG);\n                axis.component.update(cfg);\n                updatedCache.set(axisId, axis);\n            }\n            else {\n                // 不存在，则创建\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        // 默认不渲染转置极坐标下的坐标轴\n                        return;\n                    }\n                    else {\n                        // @ts-ignore\n                        axis = this.createLineAxis(scale, xAxisOption, layer, 'radius', dim);\n                    }\n                }\n                else {\n                    axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n                }\n                this.cache.set(axisId, axis);\n                updatedCache.set(axisId, axis);\n            }\n            // 2. do grid update\n            var grid = this.cache.get(gridId);\n            // 存在则更新\n            if (grid) {\n                var cfg = coordinate.isTransposed ?\n                    // @ts-ignore\n                    this.getCircleGridCfg(scale, xAxisOption, 'radius', dim) :\n                    // @ts-ignore\n                    this.getLineGridCfg(scale, xAxisOption, 'circle', dim);\n                omit(cfg, OMIT_CFG);\n                grid.component.update(cfg);\n                updatedCache.set(gridId, grid);\n            }\n            else {\n                // 不存在则创建\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        return;\n                    }\n                    else {\n                        // @ts-ignore\n                        grid = this.createCircleGrid(scale, xAxisOption, layer, 'radius', dim);\n                    }\n                }\n                else {\n                    // @ts-ignore\n                    grid = this.createLineGrid(scale, xAxisOption, layer, 'circle', dim);\n                }\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                    updatedCache.set(gridId, grid);\n                }\n            }\n        }\n        else {\n            // helix and other, do not draw axis\n        }\n    };\n    Axis.prototype.updateYAxes = function (updatedCache) {\n        var _this = this;\n        // y axes\n        var yScales = this.view.getYScales();\n        each(yScales, function (scale, idx) {\n            // @ts-ignore\n            if (!scale || scale.isIdentity) {\n                return;\n            }\n            var field = scale.field;\n            var yAxisOption = getAxisOption(_this.option, field);\n            if (yAxisOption !== false) {\n                var layer = LAYER.BG;\n                var dim = 'y';\n                var axisId = _this.getId('axis', field);\n                var gridId = _this.getId('grid', field);\n                var coordinate = _this.view.getCoordinate();\n                if (coordinate.isRect) {\n                    var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n                    // 1. do axis update\n                    var axis = _this.cache.get(axisId);\n                    // 存在则更新\n                    if (axis) {\n                        var cfg = _this.getLineAxisCfg(scale, yAxisOption, direction);\n                        omit(cfg, OMIT_CFG);\n                        axis.component.update(cfg);\n                        updatedCache.set(axisId, axis);\n                    }\n                    else {\n                        // 不存在，则创建\n                        axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n                        _this.cache.set(axisId, axis);\n                        updatedCache.set(axisId, axis);\n                    }\n                    // 2. do grid update\n                    var grid = _this.cache.get(gridId);\n                    // 存在则更新\n                    if (grid) {\n                        var cfg = _this.getLineGridCfg(scale, yAxisOption, direction, dim);\n                        omit(cfg, OMIT_CFG);\n                        grid.component.update(cfg);\n                        updatedCache.set(gridId, grid);\n                    }\n                    else {\n                        // 不存在则创建\n                        grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n                        if (grid) {\n                            _this.cache.set(gridId, grid);\n                            updatedCache.set(gridId, grid);\n                        }\n                    }\n                }\n                else if (coordinate.isPolar) {\n                    // 1. do axis update\n                    var axis = _this.cache.get(axisId);\n                    // 存在则更新\n                    if (axis) {\n                        var cfg = coordinate.isTransposed ?\n                            // @ts-ignore\n                            _this.getCircleAxisCfg(scale, yAxisOption, 'circle') :\n                            // @ts-ignore\n                            _this.getLineAxisCfg(scale, yAxisOption, 'radius');\n                        // @ts-ignore\n                        omit(cfg, OMIT_CFG);\n                        axis.component.update(cfg);\n                        updatedCache.set(axisId, axis);\n                    }\n                    else {\n                        // 不存在，则创建\n                        if (coordinate.isTransposed) {\n                            if (isUndefined(yAxisOption)) {\n                                return;\n                            }\n                            else {\n                                // @ts-ignore\n                                axis = _this.createCircleAxis(scale, yAxisOption, layer, 'circle', dim);\n                            }\n                        }\n                        else {\n                            // @ts-ignore\n                            axis = _this.createLineAxis(scale, yAxisOption, layer, 'radius', dim);\n                        }\n                        _this.cache.set(axisId, axis);\n                        updatedCache.set(axisId, axis);\n                    }\n                    // 2. do grid update\n                    var grid = _this.cache.get(gridId);\n                    // 存在则更新\n                    if (grid) {\n                        var cfg = coordinate.isTransposed ?\n                            // @ts-ignore\n                            _this.getLineGridCfg(scale, yAxisOption, 'circle', dim) :\n                            // @ts-ignore\n                            _this.getCircleGridCfg(scale, yAxisOption, 'radius', dim);\n                        omit(cfg, OMIT_CFG);\n                        grid.component.update(cfg);\n                        updatedCache.set(gridId, grid);\n                    }\n                    else {\n                        // 不存在则创建\n                        if (coordinate.isTransposed) {\n                            if (isUndefined(yAxisOption)) {\n                                return;\n                            }\n                            else {\n                                // @ts-ignore\n                                grid = _this.createLineGrid(scale, yAxisOption, layer, 'circle', dim);\n                            }\n                        }\n                        else {\n                            // @ts-ignore\n                            grid = _this.createCircleGrid(scale, yAxisOption, layer, 'radius', dim);\n                        }\n                        if (grid) {\n                            _this.cache.set(gridId, grid);\n                            updatedCache.set(gridId, grid);\n                        }\n                    }\n                }\n                else {\n                    // helix and other, do not draw axis\n                }\n            }\n        });\n    };\n    /**\n     * 创建 x axis 组件\n     */\n    Axis.prototype.createXAxes = function () {\n        // x axis\n        var scale = this.view.getXScale();\n        if (!scale || scale.isIdentity) {\n            return;\n        }\n        var xAxisOption = getAxisOption(this.option, scale.field);\n        if (xAxisOption !== false) {\n            var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n            var layer = LAYER.BG;\n            var dim = 'x';\n            var coordinate = this.view.getCoordinate();\n            var axisId = this.getId('axis', scale.field);\n            var gridId = this.getId('grid', scale.field);\n            if (coordinate.isRect) {\n                // axis\n                var axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n                this.cache.set(axisId, axis);\n                // grid\n                var grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                }\n            }\n            else if (coordinate.isPolar) {\n                var axis = void 0;\n                var grid = void 0;\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        // 默认不渲染转置极坐标的坐标轴\n                        return;\n                    }\n                    else {\n                        // 如果用户打开了隐藏的坐标轴 chart.axis(true)/chart.axis('x', true)\n                        // 那么对于转置了的极坐标，半径轴显示的是 x 轴对应的数据\n                        // @ts-ignore\n                        axis = this.createLineAxis(scale, xAxisOption, layer, 'radius', dim);\n                        // @ts-ignore\n                        grid = this.createCircleGrid(scale, xAxisOption, layer, 'radius', dim);\n                    }\n                }\n                else {\n                    axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n                    // grid，极坐标下的 x 轴网格线沿着半径方向绘制\n                    // @ts-ignore\n                    grid = this.createLineGrid(scale, xAxisOption, layer, 'circle', dim);\n                }\n                this.cache.set(axisId, axis);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                }\n            }\n            else {\n                // helix and other, do not draw axis\n            }\n        }\n    };\n    /**\n     * create y axis\n     */\n    Axis.prototype.createYAxes = function () {\n        var _this = this;\n        // y axes\n        var yScales = this.view.getYScales();\n        each(yScales, function (scale, idx) {\n            // @ts-ignore\n            if (!scale || scale.isIdentity) {\n                return;\n            }\n            var field = scale.field;\n            var yAxisOption = getAxisOption(_this.option, field);\n            if (yAxisOption !== false) {\n                var layer = LAYER.BG;\n                var dim = 'y';\n                var axisId = _this.getId('axis', field);\n                var gridId = _this.getId('grid', field);\n                var coordinate = _this.view.getCoordinate();\n                if (coordinate.isRect) {\n                    var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n                    // axis\n                    var axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n                    _this.cache.set(axisId, axis);\n                    // grid\n                    var grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n                    if (grid) {\n                        _this.cache.set(gridId, grid);\n                    }\n                }\n                else if (coordinate.isPolar) {\n                    var axis = void 0;\n                    var grid = void 0;\n                    if (coordinate.isTransposed) {\n                        if (isUndefined(yAxisOption)) {\n                            return;\n                        }\n                        else {\n                            // @ts-ignore\n                            axis = _this.createCircleAxis(scale, yAxisOption, layer, 'circle', dim);\n                            // @ts-ignore\n                            grid = _this.createLineGrid(scale, yAxisOption, layer, 'circle', dim);\n                        }\n                    }\n                    else {\n                        // @ts-ignore\n                        axis = _this.createLineAxis(scale, yAxisOption, layer, 'radius', dim);\n                        // @ts-ignore\n                        grid = _this.createCircleGrid(scale, yAxisOption, layer, 'radius', dim);\n                    }\n                    _this.cache.set(_this.getId('axis', scale.field), axis);\n                    if (grid) {\n                        _this.cache.set(gridId, grid);\n                    }\n                }\n                else {\n                    // helix and other, do not draw axis\n                }\n            }\n        });\n    };\n    /**\n     * 创建 line axis\n     * @param scale\n     * @param option\n     * @param layer\n     * @param direction\n     * @param dim\n     */\n    Axis.prototype.createLineAxis = function (scale, option, layer, direction, dim) {\n        // axis\n        var axis = {\n            component: new LineAxis(this.getLineAxisCfg(scale, option, direction)),\n            layer: layer,\n            // @ts-ignore\n            direction: direction === 'radius' ? DIRECTION.NONE : direction,\n            type: COMPONENT_TYPE.AXIS,\n            extra: { dim: dim, scale: scale },\n        };\n        axis.component.set('field', scale.field);\n        axis.component.init();\n        return axis;\n    };\n    Axis.prototype.createLineGrid = function (scale, option, layer, direction, dim) {\n        var cfg = this.getLineGridCfg(scale, option, direction, dim);\n        if (cfg) {\n            var grid = {\n                component: new LineGrid(cfg),\n                layer: layer,\n                direction: DIRECTION.NONE,\n                type: COMPONENT_TYPE.GRID,\n                extra: {\n                    dim: dim,\n                    scale: scale,\n                    alignTick: get(cfg, 'alignTick', true),\n                },\n            };\n            grid.component.init();\n            return grid;\n        }\n    };\n    Axis.prototype.createCircleAxis = function (scale, option, layer, direction, dim) {\n        var axis = {\n            component: new CircleAxis(this.getCircleAxisCfg(scale, option, direction)),\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.AXIS,\n            extra: { dim: dim, scale: scale },\n        };\n        axis.component.set('field', scale.field);\n        axis.component.init();\n        return axis;\n    };\n    Axis.prototype.createCircleGrid = function (scale, option, layer, direction, dim) {\n        var cfg = this.getCircleGridCfg(scale, option, direction, dim);\n        if (cfg) {\n            var grid = {\n                component: new CircleGrid(cfg),\n                layer: layer,\n                direction: DIRECTION.NONE,\n                type: COMPONENT_TYPE.GRID,\n                extra: {\n                    dim: dim,\n                    scale: scale,\n                    alignTick: get(cfg, 'alignTick', true),\n                },\n            };\n            grid.component.init();\n            return grid;\n        }\n    };\n    /**\n     * generate line axis cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @return line axis cfg\n     */\n    Axis.prototype.getLineAxisCfg = function (scale, axisOption, direction) {\n        var container = this.axisContainer;\n        var coordinate = this.view.getCoordinate();\n        var region = getAxisRegion(coordinate, direction);\n        var titleText = getAxisTitleText(scale, axisOption);\n        var baseAxisCfg = __assign(__assign({ container: container }, region), { ticks: map(scale.getTicks(), function (tick) { return ({ id: \"\" + tick.tickValue, name: tick.text, value: tick.value }); }), title: {\n                text: titleText,\n            }, verticalFactor: coordinate.isPolar\n                ? getAxisFactorByRegion(region, coordinate.getCenter()) * -1\n                : getAxisFactorByRegion(region, coordinate.getCenter()) });\n        var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), direction);\n        // the cfg order should be ensure\n        var optionWithTitle = get(axisOption, ['title'])\n            ? deepMix({}, { title: { style: { text: titleText } } }, axisOption)\n            : axisOption;\n        var cfg = deepMix({}, baseAxisCfg, axisThemeCfg, optionWithTitle);\n        return mix(cfg, this.getAnimateCfg(cfg));\n    };\n    /**\n     * generate line grid cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @param dim\n     * @return line grid cfg\n     */\n    Axis.prototype.getLineGridCfg = function (scale, axisOption, direction, dim) {\n        if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n            return undefined;\n        }\n        var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), direction);\n        // the cfg order should be ensure\n        // grid 动画以 axis 为准\n        var gridCfg = deepMix({\n            container: this.gridContainer,\n        }, gridThemeCfg, get(axisOption, 'grid', {}), this.getAnimateCfg(axisOption));\n        gridCfg.items = getLineGridItems(this.view.getCoordinate(), scale, dim, get(gridCfg, 'alignTick', true));\n        return gridCfg;\n    };\n    /**\n     * generate circle axis cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @return circle axis cfg\n     */\n    Axis.prototype.getCircleAxisCfg = function (scale, axisOption, direction) {\n        var container = this.axisContainer;\n        var ticks = map(scale.getTicks(), function (tick) { return ({ id: \"\" + tick.tickValue, name: tick.text, value: tick.value }); });\n        var coordinate = this.view.getCoordinate();\n        if (!scale.isCategory && Math.abs(coordinate.endAngle - coordinate.startAngle) === Math.PI * 2) {\n            // x 轴对应的值如果是非 cat 类型，在整圆的情况下坐标轴第一个和最后一个文本会重叠，默认只展示第一个文本\n            ticks.pop();\n        }\n        var titleText = getAxisTitleText(scale, axisOption);\n        var baseAxisCfg = __assign(__assign({ container: container }, getCircleAxisCenterRadius(this.view.getCoordinate())), { ticks: ticks, title: {\n                text: titleText,\n            }, verticalFactor: 1 });\n        var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), 'circle');\n        // the cfg order should be ensure\n        var optionWithTitle = get(axisOption, ['title'])\n            ? deepMix({}, { title: { style: { text: titleText } } }, axisOption)\n            : axisOption;\n        var cfg = deepMix({}, baseAxisCfg, axisThemeCfg, optionWithTitle);\n        return mix(cfg, this.getAnimateCfg(cfg));\n    };\n    /**\n     * generate circle grid cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @return circle grid cfg\n     */\n    Axis.prototype.getCircleGridCfg = function (scale, axisOption, direction, dim) {\n        if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n            return undefined;\n        }\n        // the cfg order should be ensure\n        // grid 动画以 axis 为准\n        // @ts-ignore\n        var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), 'radius');\n        var gridCfg = deepMix({\n            container: this.gridContainer,\n            center: this.view.getCoordinate().getCenter(),\n        }, gridThemeCfg, get(axisOption, 'grid', {}), this.getAnimateCfg(axisOption));\n        var alignTick = get(gridCfg, 'alignTick', true);\n        var verticalScale = dim === 'x' ? this.view.getYScales()[0] : this.view.getXScale();\n        gridCfg.items = getCircleGridItems(this.view.getCoordinate(), verticalScale, scale, alignTick, dim);\n        // the cfg order should be ensure\n        // grid 动画以 axis 为准\n        return gridCfg;\n    };\n    Axis.prototype.getId = function (name, key) {\n        var coordinate = this.view.getCoordinate();\n        // 坐标系类型也作为组件的 key\n        return name + \"-\" + key + \"-\" + coordinate.type;\n    };\n    Axis.prototype.getAnimateCfg = function (cfg) {\n        return {\n            animate: this.view.getOptions().animate && get(cfg, 'animate'),\n            animateOption: deepMix({}, DEFAULT_ANIMATE_CFG, {\n                appear: null,\n            }, get(cfg, 'animateOption', {})),\n        };\n    };\n    return Axis;\n}(Controller));\nexport default Axis;\n//# sourceMappingURL=axis.js.map"]},"metadata":{},"sourceType":"module"}