{"ast":null,"code":"import { get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getName } from './scale';\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\n\nexport function getLineAxisRelativeRegion(direction) {\n  var start;\n  var end;\n\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = {\n        x: 0,\n        y: 1\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n\n    case DIRECTION.RIGHT:\n      start = {\n        x: 1,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n\n    case DIRECTION.BOTTOM:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 0\n      };\n      break;\n\n    case DIRECTION.LEFT:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 0,\n        y: 1\n      };\n      break;\n\n    default:\n      start = end = {\n        x: 0,\n        y: 0\n      };\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\n\nexport function getCircleAxisRelativeRegion(coordinate) {\n  var start;\n  var end;\n\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 1,\n      y: 0\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 0,\n      y: 1\n    };\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\n\nexport function getAxisRegion(coordinate, direction) {\n  var region = {\n    start: {\n      x: 0,\n      y: 0\n    },\n    end: {\n      x: 0,\n      y: 0\n    }\n  };\n\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n\n  var start = region.start,\n      end = region.end;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end)\n  };\n}\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\n\nexport function getAxisFactor(coordinate, direction) {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction) ? 1 : -1 : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction) ? -1 : 1;\n  } // polar y axis, by angle\n\n\n  if (coordinate.isPolar) {\n    var startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n\n  return 1;\n}\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\n\nexport function isVertical(region) {\n  var start = region.start,\n      end = region.end;\n  return start.x === end.x;\n}\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\n\nexport function getAxisFactorByRegion(region, center) {\n  var start = region.start,\n      end = region.end;\n  var isAxisVertical = isVertical(region); // 垂直\n\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n/**\n * @ignore\n * get the axis cfg from theme\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\n\nexport function getAxisThemeCfg(theme, direction) {\n  return get(theme, ['components', 'axis', direction], {});\n}\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\n\nexport function getCircleAxisCenterRadius(coordinate) {\n  // @ts-ignore\n  var startAngle = coordinate.startAngle,\n      endAngle = coordinate.endAngle,\n      center = coordinate.circleCenter,\n      radius = coordinate.polarRadius;\n  return {\n    center: center,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\n\nexport function getAxisOption(axes, field) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  } else {\n    return get(axes, [field]);\n  }\n}\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\n\nexport function getAxisDirection(axisOption, def) {\n  return get(axisOption, 'position', def);\n}\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\n\nexport function getAxisTitleText(scale, axisOption) {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}","map":{"version":3,"sources":["../../src/util/axis.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getName } from './scale';\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\nexport function getLineAxisRelativeRegion(direction) {\n    var start;\n    var end;\n    switch (direction) {\n        case DIRECTION.TOP:\n            start = { x: 0, y: 1 };\n            end = { x: 1, y: 1 };\n            break;\n        case DIRECTION.RIGHT:\n            start = { x: 1, y: 0 };\n            end = { x: 1, y: 1 };\n            break;\n        case DIRECTION.BOTTOM:\n            start = { x: 0, y: 0 };\n            end = { x: 1, y: 0 };\n            break;\n        case DIRECTION.LEFT:\n            start = { x: 0, y: 0 };\n            end = { x: 0, y: 1 };\n            break;\n        default:\n            start = end = { x: 0, y: 0 };\n    }\n    return { start: start, end: end };\n}\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\nexport function getCircleAxisRelativeRegion(coordinate) {\n    var start;\n    var end;\n    if (coordinate.isTransposed) {\n        start = {\n            x: 0,\n            y: 0,\n        };\n        end = {\n            x: 1,\n            y: 0,\n        };\n    }\n    else {\n        start = {\n            x: 0,\n            y: 0,\n        };\n        end = {\n            x: 0,\n            y: 1,\n        };\n    }\n    return { start: start, end: end };\n}\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\nexport function getAxisRegion(coordinate, direction) {\n    var region = { start: { x: 0, y: 0 }, end: { x: 0, y: 0 } };\n    if (coordinate.isRect) {\n        region = getLineAxisRelativeRegion(direction);\n    }\n    else if (coordinate.isPolar) {\n        region = getCircleAxisRelativeRegion(coordinate);\n    }\n    var start = region.start, end = region.end;\n    return {\n        start: coordinate.convert(start),\n        end: coordinate.convert(end),\n    };\n}\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\nexport function getAxisFactor(coordinate, direction) {\n    // rect coordinate, by direction\n    if (coordinate.isRect) {\n        return coordinate.isTransposed\n            ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction)\n                ? 1\n                : -1\n            : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction)\n                ? -1\n                : 1;\n    }\n    // polar y axis, by angle\n    if (coordinate.isPolar) {\n        var startAngle = coordinate.x.start;\n        return startAngle < 0 ? -1 : 1;\n    }\n    return 1;\n}\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\nexport function isVertical(region) {\n    var start = region.start, end = region.end;\n    return start.x === end.x;\n}\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\nexport function getAxisFactorByRegion(region, center) {\n    var start = region.start, end = region.end;\n    var isAxisVertical = isVertical(region);\n    // 垂直\n    if (isAxisVertical) {\n        // 左方,从下到上、右方,从上到下\n        if ((start.y - end.y) * (center.x - start.x) > 0) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n    else {\n        // 下方,从左到右、上方,从右到做\n        if ((end.x - start.x) * (start.y - center.y) > 0) {\n            return -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * @ignore\n * get the axis cfg from theme\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\nexport function getAxisThemeCfg(theme, direction) {\n    return get(theme, ['components', 'axis', direction], {});\n}\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\nexport function getCircleAxisCenterRadius(coordinate) {\n    // @ts-ignore\n    var startAngle = coordinate.startAngle, endAngle = coordinate.endAngle, center = coordinate.circleCenter, radius = coordinate.polarRadius;\n    return {\n        center: center,\n        radius: radius,\n        startAngle: startAngle,\n        endAngle: endAngle,\n    };\n}\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\nexport function getAxisOption(axes, field) {\n    if (isBoolean(axes)) {\n        return axes === false ? false : {};\n    }\n    else {\n        return get(axes, [field]);\n    }\n}\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\nexport function getAxisDirection(axisOption, def) {\n    return get(axisOption, 'position', def);\n}\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\nexport function getAxisTitleText(scale, axisOption) {\n    return get(axisOption, ['title', 'text'], getName(scale));\n}\n//# sourceMappingURL=axis.js.map"]},"metadata":{},"sourceType":"module"}