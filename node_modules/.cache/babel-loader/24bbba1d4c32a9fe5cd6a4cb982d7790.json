{"ast":null,"code":"import { each } from '@antv/util';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\n\nfunction getPath(points, isInCircle, smooth, registeredShape, constraint) {\n  var topLinePoints = []; // area 区域上部分\n\n  var bottomLinePoints = []; // area 区域下部分\n\n  each(points, function (point) {\n    topLinePoints.push(point[1]);\n    bottomLinePoints.push(point[0]);\n  });\n  bottomLinePoints = bottomLinePoints.reverse();\n  var path = [];\n  each([topLinePoints, bottomLinePoints], function (pointsData, index) {\n    var subPath = [];\n    var parsedPoints = registeredShape.parsePoints(pointsData);\n    var p1 = parsedPoints[0];\n\n    if (isInCircle) {\n      parsedPoints.push({\n        x: p1.x,\n        y: p1.y\n      });\n    }\n\n    if (smooth) {\n      subPath = getSplinePath(parsedPoints, false, constraint);\n    } else {\n      subPath = getLinePath(parsedPoints, false);\n    }\n\n    if (index > 0) {\n      subPath[0][0] = 'L';\n    }\n\n    path = path.concat(subPath);\n  });\n  path.push(['Z']);\n  return path;\n}\n/**\n * @ignore\n * Gets shape attrs\n * @param cfg\n * @param isStroke\n * @param smooth\n * @param registeredShape\n * @param [constraint]\n * @returns\n */\n\n\nexport function getShapeAttrs(cfg, isStroke, smooth, registeredShape, constraint) {\n  var attrs = getStyle(cfg, isStroke, !isStroke, 'lineWidth');\n  var connectNulls = cfg.connectNulls,\n      isInCircle = cfg.isInCircle,\n      points = cfg.points;\n  var pathPoints = getPathPoints(points, connectNulls); // 根据 connectNulls 配置获取图形关键点\n\n  var path = [];\n  each(pathPoints, function (eachPoints) {\n    path = path.concat(getPath(eachPoints, isInCircle, smooth, registeredShape, constraint));\n  });\n  attrs.path = path;\n  return attrs;\n}\n/**\n * @ignore\n * Gets constraint\n * @param coordinate\n * @returns constraint\n */\n\nexport function getConstraint(coordinate) {\n  var start = coordinate.start,\n      end = coordinate.end;\n  return [[start.x, end.y], [end.x, start.y]];\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/area/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { each } from '@antv/util';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nfunction getPath(points, isInCircle, smooth, registeredShape, constraint) {\n    var topLinePoints = []; // area 区域上部分\n    var bottomLinePoints = []; // area 区域下部分\n    each(points, function (point) {\n        topLinePoints.push(point[1]);\n        bottomLinePoints.push(point[0]);\n    });\n    bottomLinePoints = bottomLinePoints.reverse();\n    var path = [];\n    each([topLinePoints, bottomLinePoints], function (pointsData, index) {\n        var subPath = [];\n        var parsedPoints = registeredShape.parsePoints(pointsData);\n        var p1 = parsedPoints[0];\n        if (isInCircle) {\n            parsedPoints.push({ x: p1.x, y: p1.y });\n        }\n        if (smooth) {\n            subPath = getSplinePath(parsedPoints, false, constraint);\n        }\n        else {\n            subPath = getLinePath(parsedPoints, false);\n        }\n        if (index > 0) {\n            subPath[0][0] = 'L';\n        }\n        path = path.concat(subPath);\n    });\n    path.push(['Z']);\n    return path;\n}\n/**\n * @ignore\n * Gets shape attrs\n * @param cfg\n * @param isStroke\n * @param smooth\n * @param registeredShape\n * @param [constraint]\n * @returns\n */\nexport function getShapeAttrs(cfg, isStroke, smooth, registeredShape, constraint) {\n    var attrs = getStyle(cfg, isStroke, !isStroke, 'lineWidth');\n    var connectNulls = cfg.connectNulls, isInCircle = cfg.isInCircle, points = cfg.points;\n    var pathPoints = getPathPoints(points, connectNulls); // 根据 connectNulls 配置获取图形关键点\n    var path = [];\n    each(pathPoints, function (eachPoints) {\n        path = path.concat(getPath(eachPoints, isInCircle, smooth, registeredShape, constraint));\n    });\n    attrs.path = path;\n    return attrs;\n}\n/**\n * @ignore\n * Gets constraint\n * @param coordinate\n * @returns constraint\n */\nexport function getConstraint(coordinate) {\n    var start = coordinate.start, end = coordinate.end;\n    return [\n        [start.x, end.y],\n        [end.x, start.y],\n    ];\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}