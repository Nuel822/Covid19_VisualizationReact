{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Container from './container';\nimport { isBrowser, isString } from '../util/util';\nimport Timeline from '../animate/timeline';\nvar PX_SUFFIX = 'px';\n\nvar Canvas =\n/** @class */\nfunction (_super) {\n  __extends(Canvas, _super);\n\n  function Canvas(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.initContainer();\n\n    _this.initDom();\n\n    _this.initEvents();\n\n    _this.initTimeline();\n\n    return _this;\n  }\n\n  Canvas.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this); // set default cursor style for canvas\n\n\n    cfg['cursor'] = 'default';\n    return cfg;\n  };\n  /**\n   * @protected\n   * 初始化容器\n   */\n\n\n  Canvas.prototype.initContainer = function () {\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n      this.set('container', container);\n    }\n  };\n  /**\n   * @protected\n   * 初始化 DOM\n   */\n\n\n  Canvas.prototype.initDom = function () {\n    var el = this.createDom();\n    this.set('el', el); // 附加到容器\n\n    var container = this.get('container');\n    container.appendChild(el); // 设置初始宽度\n\n    this.setDOMSize(this.get('width'), this.get('height'));\n  };\n  /**\n   * @protected\n   * 初始化绑定的事件\n   */\n\n\n  Canvas.prototype.initEvents = function () {};\n  /**\n   * @protected\n   * 初始化时间轴\n   */\n\n\n  Canvas.prototype.initTimeline = function () {\n    var timeline = new Timeline(this);\n    this.set('timeline', timeline);\n  };\n  /**\n   * @protected\n   * 修改画布对应的 DOM 的大小\n   * @param {number} width  宽度\n   * @param {number} height 高度\n   */\n\n\n  Canvas.prototype.setDOMSize = function (width, height) {\n    var el = this.get('el');\n\n    if (isBrowser) {\n      el.style.width = width + PX_SUFFIX;\n      el.style.height = height + PX_SUFFIX;\n    }\n  }; // 实现接口\n\n\n  Canvas.prototype.changeSize = function (width, height) {\n    this.setDOMSize(width, height);\n    this.set('width', width);\n    this.set('height', height);\n    this.onCanvasChange('changeSize');\n  };\n  /**\n   * 获取当前的渲染引擎\n   * @return {Renderer} 返回当前的渲染引擎\n   */\n\n\n  Canvas.prototype.getRenderer = function () {\n    return this.get('renderer');\n  };\n  /**\n   * 获取画布的 cursor 样式\n   * @return {Cursor}\n   */\n\n\n  Canvas.prototype.getCursor = function () {\n    return this.get('cursor');\n  };\n  /**\n   * 设置画布的 cursor 样式\n   * @param {Cursor} cursor  cursor 样式\n   */\n\n\n  Canvas.prototype.setCursor = function (cursor) {\n    this.set('cursor', cursor);\n    var el = this.get('el');\n\n    if (isBrowser && el) {\n      // 直接设置样式，不等待鼠标移动时再设置\n      el.style.cursor = cursor;\n    }\n  }; // 实现接口\n\n\n  Canvas.prototype.getPointByClient = function (clientX, clientY) {\n    var el = this.get('el');\n    var bbox = el.getBoundingClientRect();\n    return {\n      x: clientX - bbox.left,\n      y: clientY - bbox.top\n    };\n  }; // 实现接口\n\n\n  Canvas.prototype.getClientByPoint = function (x, y) {\n    var el = this.get('el');\n    var bbox = el.getBoundingClientRect();\n    return {\n      x: x + bbox.left,\n      y: y + bbox.top\n    };\n  }; // 实现接口\n\n\n  Canvas.prototype.draw = function () {};\n  /**\n   * @protected\n   * 销毁 DOM 容器\n   */\n\n\n  Canvas.prototype.removeDom = function () {\n    var el = this.get('el');\n    el.parentNode.removeChild(el);\n  };\n  /**\n   * @protected\n   * 清理所有的事件\n   */\n\n\n  Canvas.prototype.clearEvents = function () {};\n\n  Canvas.prototype.isCanvas = function () {\n    return true;\n  };\n\n  Canvas.prototype.getParent = function () {\n    return null;\n  };\n\n  Canvas.prototype.destroy = function () {\n    var timeline = this.get('timeline');\n\n    if (this.get('destroyed')) {\n      return;\n    }\n\n    this.clear(); // 同初始化时相反顺序调用\n\n    if (timeline) {\n      // 画布销毁时自动停止动画\n      timeline.stop();\n    }\n\n    this.clearEvents();\n    this.removeDom();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return Canvas;\n}(Container);\n\nexport default Canvas;","map":{"version":3,"sources":["../../src/abstract/canvas.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport Container from './container';\nimport { isBrowser, isString } from '../util/util';\nimport Timeline from '../animate/timeline';\nvar PX_SUFFIX = 'px';\nvar Canvas = /** @class */ (function (_super) {\n    __extends(Canvas, _super);\n    function Canvas(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.initContainer();\n        _this.initDom();\n        _this.initEvents();\n        _this.initTimeline();\n        return _this;\n    }\n    Canvas.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        // set default cursor style for canvas\n        cfg['cursor'] = 'default';\n        return cfg;\n    };\n    /**\n     * @protected\n     * 初始化容器\n     */\n    Canvas.prototype.initContainer = function () {\n        var container = this.get('container');\n        if (isString(container)) {\n            container = document.getElementById(container);\n            this.set('container', container);\n        }\n    };\n    /**\n     * @protected\n     * 初始化 DOM\n     */\n    Canvas.prototype.initDom = function () {\n        var el = this.createDom();\n        this.set('el', el);\n        // 附加到容器\n        var container = this.get('container');\n        container.appendChild(el);\n        // 设置初始宽度\n        this.setDOMSize(this.get('width'), this.get('height'));\n    };\n    /**\n     * @protected\n     * 初始化绑定的事件\n     */\n    Canvas.prototype.initEvents = function () { };\n    /**\n     * @protected\n     * 初始化时间轴\n     */\n    Canvas.prototype.initTimeline = function () {\n        var timeline = new Timeline(this);\n        this.set('timeline', timeline);\n    };\n    /**\n     * @protected\n     * 修改画布对应的 DOM 的大小\n     * @param {number} width  宽度\n     * @param {number} height 高度\n     */\n    Canvas.prototype.setDOMSize = function (width, height) {\n        var el = this.get('el');\n        if (isBrowser) {\n            el.style.width = width + PX_SUFFIX;\n            el.style.height = height + PX_SUFFIX;\n        }\n    };\n    // 实现接口\n    Canvas.prototype.changeSize = function (width, height) {\n        this.setDOMSize(width, height);\n        this.set('width', width);\n        this.set('height', height);\n        this.onCanvasChange('changeSize');\n    };\n    /**\n     * 获取当前的渲染引擎\n     * @return {Renderer} 返回当前的渲染引擎\n     */\n    Canvas.prototype.getRenderer = function () {\n        return this.get('renderer');\n    };\n    /**\n     * 获取画布的 cursor 样式\n     * @return {Cursor}\n     */\n    Canvas.prototype.getCursor = function () {\n        return this.get('cursor');\n    };\n    /**\n     * 设置画布的 cursor 样式\n     * @param {Cursor} cursor  cursor 样式\n     */\n    Canvas.prototype.setCursor = function (cursor) {\n        this.set('cursor', cursor);\n        var el = this.get('el');\n        if (isBrowser && el) {\n            // 直接设置样式，不等待鼠标移动时再设置\n            el.style.cursor = cursor;\n        }\n    };\n    // 实现接口\n    Canvas.prototype.getPointByClient = function (clientX, clientY) {\n        var el = this.get('el');\n        var bbox = el.getBoundingClientRect();\n        return {\n            x: clientX - bbox.left,\n            y: clientY - bbox.top,\n        };\n    };\n    // 实现接口\n    Canvas.prototype.getClientByPoint = function (x, y) {\n        var el = this.get('el');\n        var bbox = el.getBoundingClientRect();\n        return {\n            x: x + bbox.left,\n            y: y + bbox.top,\n        };\n    };\n    // 实现接口\n    Canvas.prototype.draw = function () { };\n    /**\n     * @protected\n     * 销毁 DOM 容器\n     */\n    Canvas.prototype.removeDom = function () {\n        var el = this.get('el');\n        el.parentNode.removeChild(el);\n    };\n    /**\n     * @protected\n     * 清理所有的事件\n     */\n    Canvas.prototype.clearEvents = function () { };\n    Canvas.prototype.isCanvas = function () {\n        return true;\n    };\n    Canvas.prototype.getParent = function () {\n        return null;\n    };\n    Canvas.prototype.destroy = function () {\n        var timeline = this.get('timeline');\n        if (this.get('destroyed')) {\n            return;\n        }\n        this.clear();\n        // 同初始化时相反顺序调用\n        if (timeline) {\n            // 画布销毁时自动停止动画\n            timeline.stop();\n        }\n        this.clearEvents();\n        this.removeDom();\n        _super.prototype.destroy.call(this);\n    };\n    return Canvas;\n}(Container));\nexport default Canvas;\n//# sourceMappingURL=canvas.js.map"]},"metadata":{},"sourceType":"module"}