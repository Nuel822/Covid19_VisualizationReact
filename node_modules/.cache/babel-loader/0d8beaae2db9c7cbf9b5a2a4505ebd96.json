{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from '../../action/countryStats.action';\nconst countryName = ['Russia', 'China', 'Japan', 'South Korea', 'Canada', 'United Kingdom', 'United States of America', 'Brazil', 'Argentina', 'Nigeria', 'France', 'Germany', 'Ukraine', 'Egypt', 'South Africa', 'India', 'Australia', 'Saudi Arabia', 'Afghanistan', 'Kazakhstan', 'Indonesia'];\nconst countryData = [];\n\nconst CountryStats = ({\n  title\n}) => {\n  const dispatch = useDispatch();\n\n  const onSuccess = data => {\n    countryData.push(data);\n  };\n\n  dispatch(action.fetchDvData());\n  const {\n    geoData\n  } = useSelector(state => ({\n    geoData: state.CountryStats.geoData\n  }));\n  useEffect(() => {\n    countryName.map(country => {\n      dispatch(action.fetch(country, onSuccess));\n    });\n    chart.render();\n  }, [dispatch]);\n  console.log(geoData);\n  const ds = new DataSet();\n  const dv = ds.createView('back').source(geoData, {\n    type: 'GeoJSON'\n  });\n  const userDv = ds.createView().source(countryData).transform({\n    geoDataView: dv,\n    field: 'confirmed',\n    type: 'geo.centroid',\n    as: ['longitude', 'latitude']\n  });\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n    height: 500\n  });\n  chart.scale({\n    longitude: {\n      sync: true\n    },\n    latitude: {\n      sync: true\n    }\n  });\n  chart.axis(false);\n  chart.legend({\n    position: 'right'\n  });\n  chart.tooltip({\n    showTitle: false,\n    showMarkers: false\n  });\n  const bgView = chart.createView();\n  bgView.data(dv.rows);\n  bgView.tooltip(false);\n  bgView.polygon().position('longitude*latitude').color('#ebedf0').style({\n    lineWidth: 1,\n    stroke: '#fafbfc'\n  });\n  const userView = chart.createView();\n  userView.data(userDv.rows);\n  userView.point().position('longitude*latitude').color('#1890ff').shape('circle').size('confirmed', [5, 15]).style({\n    lineWidth: 1,\n    stroke: '#1890ff'\n  });\n  userView.interaction('element-active');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","useEffect","DataSet","Chart","CardHeader","CardBody","Card","useDispatch","useSelector","action","countryName","countryData","CountryStats","title","dispatch","onSuccess","data","push","fetchDvData","geoData","state","map","country","fetch","chart","render","console","log","ds","dv","createView","source","type","userDv","transform","geoDataView","field","as","container","autoFit","height","scale","longitude","sync","latitude","axis","legend","position","tooltip","showTitle","showMarkers","bgView","rows","polygon","color","style","lineWidth","stroke","userView","point","shape","size","interaction"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from '../../action/countryStats.action';\n\n\nconst countryName = [\n  'Russia',\n  'China',\n  'Japan',\n  'South Korea',\n  'Canada',\n  'United Kingdom',\n  'United States of America',\n  'Brazil',\n  'Argentina',\n  'Nigeria',\n  'France',\n  'Germany',\n  'Ukraine',\n  'Egypt',\n  'South Africa',\n  'India',\n  'Australia',\n  'Saudi Arabia',\n  'Afghanistan',\n  'Kazakhstan',\n  'Indonesia',\n];\nconst countryData = [];\n\nconst CountryStats = ({ title }) => {\n\n  const dispatch = useDispatch()\n\n  const onSuccess = (data) => {\n    countryData.push(data)\n  }\n\n    \n  dispatch(action.fetchDvData())\n\n  const{geoData} = useSelector( state => ({\n        geoData: state.CountryStats.geoData\n  }))\n\n  useEffect(() => {\n\n    countryName.map((country => {\n      dispatch(action.fetch(country,onSuccess));\n    }));\n\n    \n    chart.render();\n\n  }, [dispatch])\n\n  console.log(geoData)\n    const ds = new DataSet();\n    const dv = ds.createView('back').source(geoData, {\n      type: 'GeoJSON',\n    });\n  const userDv = ds\n      .createView()\n      .source(countryData)\n      .transform({\n        geoDataView: dv,\n        field: 'confirmed',\n        type: 'geo.centroid',\n        as: ['longitude', 'latitude'],\n      });\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n    });\n    chart.scale({\n      longitude: {\n        sync: true,\n      },\n      latitude: {\n        sync: true,\n      },\n    });\n    chart.axis(false);\n\n    chart.legend({ position: 'right' });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false\n    });\n\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView\n      .polygon()\n      .position('longitude*latitude')\n      .color('#ebedf0')\n      .style({\n        lineWidth: 1,\n        stroke: '#fafbfc',\n      });\n\n    const userView = chart.createView();\n    userView.data(userDv.rows);\n    userView\n      .point()\n      .position('longitude*latitude')\n      .color('#1890ff')\n      .shape('circle')\n      .size('confirmed', [5, 15])\n      .style({\n        lineWidth: 1,\n        stroke: '#1890ff',\n      });\n    userView.interaction('element-active');\n\n  return (\n    <>\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0\">{title}</h6>\n        </CardHeader>\n        <CardBody className=\"pt-0\">\n        <div id=\"container\" />\n        </CardBody>\n      </Card>\n    </>\n  );\n}\n\nexport default CountryStats;"]},"metadata":{},"sourceType":"module"}