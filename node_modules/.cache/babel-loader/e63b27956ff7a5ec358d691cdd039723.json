{"ast":null,"code":"import { firstValue, get, isArray, isEmpty, isNil, isNumber, isString, mix, valuesOfKey } from '@antv/util';\nimport { getScale } from '../dependents';\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\n\nfunction getDefaultType(field, data) {\n  var type = 'linear';\n  var value = firstValue(data, field);\n\n  if (isArray(value)) {\n    value = value[0];\n  }\n\n  if (dateRegex.test(value)) {\n    type = 'time';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n\n  return type;\n}\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\n\n\nexport function createScaleByField(field, data, scaleDef) {\n  var validData = data || [];\n\n  if (isNumber(field) || isNil(firstValue(validData, field)) && isEmpty(scaleDef)) {\n    var Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field]\n    });\n  } // 如果已经定义过这个度量\n\n\n  var type = get(scaleDef, 'type', getDefaultType(field, validData));\n  var cfg = {\n    field: field,\n    values: valuesOfKey(validData, field)\n  };\n  mix(cfg, scaleDef);\n  var ScaleCtor = getScale(type);\n  return new ScaleCtor(cfg);\n}\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\n\nexport function syncScale(scale, newScale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    var obj = {};\n\n    for (var k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\n\nexport function getName(scale) {\n  return scale.alias || scale.field;\n}","map":{"version":3,"sources":["../../src/util/scale.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,GAArB,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,KAA5C,EAAmD,QAAnD,EAA6D,QAA7D,EAAuE,GAAvE,EAA4E,WAA5E,QAA+F,YAA/F;AACA,SAAS,QAAT,QAAgC,eAAhC;AAGA,IAAM,SAAS,GAAG,sTAAlB;AAEA;;;;;;;AAMA,SAAS,cAAT,CAAwB,KAAxB,EAAuC,IAAvC,EAA0D;AACxD,MAAI,IAAI,GAAG,QAAX;AACA,MAAI,KAAK,GAAG,UAAU,CAAC,IAAD,EAAO,KAAP,CAAtB;;AACA,MAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AAClB,IAAA,KAAK,GAAG,KAAK,CAAC,CAAD,CAAb;AACD;;AACD,MAAI,SAAS,CAAC,IAAV,CAAe,KAAf,CAAJ,EAA2B;AACzB,IAAA,IAAI,GAAG,MAAP;AACD,GAFD,MAEO,IAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AAC1B,IAAA,IAAI,GAAG,KAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;AAQA,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAAqD,IAArD,EAAgF,QAAhF,EAAsG;AAC1G,MAAM,SAAS,GAAG,IAAI,IAAI,EAA1B;;AAEA,MAAI,QAAQ,CAAC,KAAD,CAAR,IAAoB,KAAK,CAAC,UAAU,CAAC,SAAD,EAAY,KAAZ,CAAX,CAAL,IAAuC,OAAO,CAAC,QAAD,CAAtE,EAAmF;AACjF,QAAM,QAAQ,GAAG,QAAQ,CAAC,UAAD,CAAzB;AACA,WAAO,IAAI,QAAJ,CAAa;AAClB,MAAA,KAAK,EAAE,KAAK,CAAC,QAAN,EADW;AAElB,MAAA,MAAM,EAAE,CAAC,KAAD;AAFU,KAAb,CAAP;AAID,GATyG,CAW1G;;;AACA,MAAM,IAAI,GAAG,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,cAAc,CAAC,KAAD,EAAQ,SAAR,CAAjC,CAAhB;AACA,MAAM,GAAG,GAAG;AACV,IAAA,KAAK,EAAA,KADK;AAEV,IAAA,MAAM,EAAE,WAAW,CAAC,SAAD,EAAY,KAAZ;AAFT,GAAZ;AAKA,EAAA,GAAG,CAAC,GAAD,EAAM,QAAN,CAAH;AAEA,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAD,CAA1B;AACA,SAAO,IAAI,SAAJ,CAAc,GAAd,CAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAkC,QAAlC,EAAiD;AACrD,MAAI,KAAK,CAAC,IAAN,KAAe,UAAf,IAA6B,QAAQ,CAAC,IAAT,KAAkB,UAAnD,EAA+D;AAC7D,QAAM,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAM,CAAX,IAAgB,QAAhB,EAA0B;AACxB,UAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,EAA+C,CAA/C,CAAJ,EAAuD;AACrD,QAAA,GAAG,CAAC,CAAD,CAAH,GAAS,QAAQ,CAAC,CAAD,CAAjB;AACD;AACF;;AAED,IAAA,KAAK,CAAC,MAAN,CAAa,GAAb;AACD;AACF;AAED;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAA8B;AAClC,SAAO,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,KAA5B;AACD","sourceRoot":"","sourcesContent":["import { firstValue, get, isArray, isEmpty, isNil, isNumber, isString, mix, valuesOfKey } from '@antv/util';\nimport { getScale } from '../dependents';\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\nfunction getDefaultType(field, data) {\n    var type = 'linear';\n    var value = firstValue(data, field);\n    if (isArray(value)) {\n        value = value[0];\n    }\n    if (dateRegex.test(value)) {\n        type = 'time';\n    }\n    else if (isString(value)) {\n        type = 'cat';\n    }\n    return type;\n}\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\nexport function createScaleByField(field, data, scaleDef) {\n    var validData = data || [];\n    if (isNumber(field) || (isNil(firstValue(validData, field)) && isEmpty(scaleDef))) {\n        var Identity = getScale('identity');\n        return new Identity({\n            field: field.toString(),\n            values: [field],\n        });\n    }\n    // 如果已经定义过这个度量\n    var type = get(scaleDef, 'type', getDefaultType(field, validData));\n    var cfg = {\n        field: field,\n        values: valuesOfKey(validData, field),\n    };\n    mix(cfg, scaleDef);\n    var ScaleCtor = getScale(type);\n    return new ScaleCtor(cfg);\n}\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\nexport function syncScale(scale, newScale) {\n    if (scale.type !== 'identity' && newScale.type !== 'identity') {\n        var obj = {};\n        for (var k in newScale) {\n            if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n                obj[k] = newScale[k];\n            }\n        }\n        scale.change(obj);\n    }\n}\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\nexport function getName(scale) {\n    return scale.alias || scale.field;\n}\n//# sourceMappingURL=scale.js.map"]},"metadata":{},"sourceType":"module"}