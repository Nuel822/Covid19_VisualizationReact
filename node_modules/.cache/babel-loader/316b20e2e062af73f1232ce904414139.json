{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport axios from 'axios';\nconst configuration = {\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"78f0398aa4msh86be5ac1359b0f1p1838a7jsnad282c6e4e48\"\n  }\n};\nconst countryName = ['Russia', 'China', 'Japan', 'South Korea', 'Canada', 'United Kingdom', 'United States of America', 'Brazil', 'Argentina', 'Nigeria', 'France', 'Germany', 'Ukraine', 'Egypt', 'South Africa', 'India', 'Australia', 'Saudi Arabia', 'Afghanistan', 'Spain', 'Italy'];\nconst countryInitialData = []; // const userData = [\n//   { name: 'Russia', value: 86.8 },\n//   { name: 'China', value: 106.3 },\n//   { name: 'Japan', value: 94.7 },\n//   { name: 'Mongolia', value: 98 },\n//   { name: 'Canada', value: 98.4 },\n//   { name: 'United Kingdom', value: 97.2 },\n//   { name: 'United States of America', value: 98.3 },\n//   { name: 'Brazil', value: 96.7 },\n//   { name: 'Argentina', value: 95.8 },\n//   { name: 'Algeria', value: 101.3 },\n//   { name: 'France', value: 94.8 },\n//   { name: 'Germany', value: 96.6 },\n//   { name: 'Ukraine', value: 86.3 },\n//   { name: 'Egypt', value: 102.1 },\n//   { name: 'South Africa', value: 101.3 },\n//   { name: 'India', value: 107.6 },\n//   { name: 'Australia', value: 99.9 },\n//   { name: 'Saudi Arabia', value: 130.1 },\n//   { name: 'Afghanistan', value: 106.5 },\n//   { name: 'Kazakhstan', value: 93.4 },\n//   { name: 'Indonesia', value: 101.4 },\n// ];\n// date: \"1902/04/19\"\n// location: \"Quezaltenango and San Marcos, Guatemala\"\n// lat: \"14\"\n// lng: \"-91\"\n// deaths: \"2000\"\n// magnitude: \"7.5\"\n// comments: \"â†µThis quake also caused damage\n\nclass CountryStats extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadData = async callback => {\n      const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n      const json = await response.data;\n      countryName.map(async country => {\n        const countryResponse = await axios.get('https://covid-19-data.p.rapidapi.com/country?name=' + country, configuration);\n        const countryJson = countryResponse.data;\n        countryInitialData.push(countryJson[0]);\n\n        if (countryInitialData && countryInitialData.length == countryName.length) {\n          callback(countryInitialData, json);\n        }\n      });\n    };\n\n    this.componentDidMount = async () => {\n      this.loadData((data, json) => {\n        this.setState({\n          countryData: data,\n          geoData: json\n        });\n        console.log(data);\n        this.renderChart();\n      }); // const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n      // const json = await response.data;\n      // this.setState({ countryData: countryInitialData, geoData: json })\n      // this.renderChart();\n    };\n\n    this.renderChart = () => {\n      const chart = new Chart({\n        container: 'container',\n        autoFit: true,\n        height: 500,\n        padding: [0, 20, 40]\n      });\n      chart.scale({\n        x: {\n          sync: true\n        },\n        y: {\n          sync: true\n        }\n      });\n      chart.coordinate('rect').reflect('y');\n      chart.legend(false);\n      chart.axis(false);\n      chart.tooltip({\n        showTitle: false,\n        shared: true,\n        showMarkers: false,\n        containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n        itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n        domStyles: {\n          'g2-tooltip': {\n            borderRadius: '2px',\n            backgroundColor: '#DDDDDD',\n            padding: 0,\n            border: '1px solid #333'\n          }\n        }\n      });\n      const ds = new DataSet(); // draw the map\n\n      const dv = ds.createView('back').source(this.state.geoData, {\n        type: 'GeoJSON'\n      }).transform({\n        type: 'geo.projection',\n        projection: 'geoMercator',\n        as: ['x', 'y', 'centroidX', 'centroidY']\n      });\n      const bgView = chart.createView();\n      bgView.data(dv.rows);\n      bgView.tooltip(false);\n      bgView.polygon().position('x*y').style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85\n      });\n      const userData = ds.createView().source(this.state.countryData);\n      userData.transform({\n        type: 'map',\n        callback: obj => {\n          const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n          obj.x = projectedCoord[0];\n          obj.y = projectedCoord[1];\n          obj.deaths = obj.deaths * 1;\n          obj.magnitude = obj.critical * 1;\n          return obj;\n        }\n      });\n      const pointView = chart.createView();\n      pointView.data(userData.rows);\n      pointView.point().position('x*y').size('deaths', [2, 30]).shape('circle').color('#FF2F29').tooltip('country*confirmed*recovered*critical*deaths').style({\n        fillOpacity: 0.45\n      }).state({\n        active: {\n          style: {\n            lineWidth: 1,\n            stroke: '#FF2F29'\n          }\n        }\n      });\n      pointView.interaction('element-active');\n      chart.render();\n    };\n\n    this.state = {\n      geoData: [],\n      countryData: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n      small: true,\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      className: \"border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CardBody, {\n      className: \"pt-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","DataSet","Chart","CardHeader","CardBody","Card","axios","configuration","countryName","countryInitialData","CountryStats","Component","constructor","props","loadData","callback","response","get","json","data","map","country","countryResponse","countryJson","push","length","componentDidMount","setState","countryData","geoData","console","log","renderChart","chart","container","autoFit","height","padding","scale","x","sync","y","coordinate","reflect","legend","axis","tooltip","showTitle","shared","showMarkers","containerTpl","itemTpl","domStyles","borderRadius","backgroundColor","border","ds","dv","createView","source","state","type","transform","projection","as","bgView","rows","polygon","position","style","fill","stroke","lineWidth","fillOpacity","userData","obj","projectedCoord","geoProjectPosition","longitude","latitude","deaths","magnitude","critical","pointView","point","size","shape","color","active","interaction","render","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport axios from 'axios'\n\nconst configuration = {\n\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"78f0398aa4msh86be5ac1359b0f1p1838a7jsnad282c6e4e48\"\n  }\n}\n\nconst countryName = [\n\n  'Russia',\n  'China',\n  'Japan',\n  'South Korea',\n  'Canada',\n  'United Kingdom',\n  'United States of America',\n  'Brazil',\n  'Argentina',\n  'Nigeria',\n  'France',\n  'Germany',\n  'Ukraine',\n  'Egypt',\n  'South Africa',\n  'India',\n  'Australia',\n  'Saudi Arabia',\n  'Afghanistan',\n  'Spain',\n  'Italy',\n];\n\nconst countryInitialData = [];\n\n// const userData = [\n//   { name: 'Russia', value: 86.8 },\n//   { name: 'China', value: 106.3 },\n//   { name: 'Japan', value: 94.7 },\n//   { name: 'Mongolia', value: 98 },\n//   { name: 'Canada', value: 98.4 },\n//   { name: 'United Kingdom', value: 97.2 },\n//   { name: 'United States of America', value: 98.3 },\n//   { name: 'Brazil', value: 96.7 },\n//   { name: 'Argentina', value: 95.8 },\n//   { name: 'Algeria', value: 101.3 },\n//   { name: 'France', value: 94.8 },\n//   { name: 'Germany', value: 96.6 },\n//   { name: 'Ukraine', value: 86.3 },\n//   { name: 'Egypt', value: 102.1 },\n//   { name: 'South Africa', value: 101.3 },\n//   { name: 'India', value: 107.6 },\n//   { name: 'Australia', value: 99.9 },\n//   { name: 'Saudi Arabia', value: 130.1 },\n//   { name: 'Afghanistan', value: 106.5 },\n//   { name: 'Kazakhstan', value: 93.4 },\n//   { name: 'Indonesia', value: 101.4 },\n// ];\n// date: \"1902/04/19\"\n// location: \"Quezaltenango and San Marcos, Guatemala\"\n// lat: \"14\"\n// lng: \"-91\"\n// deaths: \"2000\"\n// magnitude: \"7.5\"\n// comments: \"â†µThis quake also caused damage\n\n\nclass CountryStats extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { geoData: [], countryData: [] };\n  }\n\n\n  loadData = async (callback) => {\n\n    const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n    const json = await response.data;\n\n    countryName.map(async country => {\n      const countryResponse = await axios.get('https://covid-19-data.p.rapidapi.com/country?name=' + country, configuration);\n      const countryJson = countryResponse.data;\n      countryInitialData.push(countryJson[0]);\n\n      if (countryInitialData && countryInitialData.length == countryName.length) {\n        callback(countryInitialData, json)\n      }\n    });\n  }\n\n  componentDidMount = async () => {\n    this.loadData((data, json) => {\n      this.setState({ countryData: data, geoData: json });\n      console.log(data)\n      this.renderChart();\n    })\n\n    // const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n    // const json = await response.data;\n\n    // this.setState({ countryData: countryInitialData, geoData: json })\n    // this.renderChart();\n  };\n\n  renderChart = () => {\n\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n      padding: [0, 20, 40]\n    });\n\n    chart.scale({\n      x: { sync: true },\n      y: { sync: true }\n    });\n    chart.coordinate('rect').reflect('y');\n    chart.legend(false);\n    chart.axis(false);\n\n    chart.tooltip({\n      showTitle: false,\n      shared: true,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n      itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n      domStyles: {\n        'g2-tooltip': {\n          borderRadius: '2px',\n          backgroundColor: '#DDDDDD',\n          padding: 0,\n          border: '1px solid #333'\n        }\n      }\n    });\n    const ds = new DataSet();\n    // draw the map\n    const dv = ds.createView('back')\n      .source(this.state.geoData, {\n        type: 'GeoJSON'\n      })\n      .transform({\n        type: 'geo.projection',\n        projection: 'geoMercator',\n        as: ['x', 'y', 'centroidX', 'centroidY']\n      });\n\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon()\n      .position('x*y')\n      .style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85\n      });\n\n    const userData = ds.createView().source(this.state.countryData);\n    userData.transform({\n      type: 'map',\n      callback: obj => {\n        const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n        obj.x = projectedCoord[0];\n        obj.y = projectedCoord[1];\n        obj.deaths = obj.deaths * 1;\n        obj.magnitude = obj.critical * 1;\n        return obj;\n      }\n    });\n\n    const pointView = chart.createView();\n    pointView.data(userData.rows);\n    pointView.point()\n      .position('x*y')\n      .size('deaths', [2, 30])\n      .shape('circle')\n      .color('#FF2F29')\n      .tooltip('country*confirmed*recovered*critical*deaths')\n      .style({\n        fillOpacity: 0.45,\n      })\n      .state({\n        active: {\n          style: {\n            lineWidth: 1,\n            stroke: '#FF2F29'\n          }\n        }\n      });\n    pointView.interaction('element-active');\n    chart.render();\n\n  }\n\n  render() {\n\n    return (\n\n      <>\n        <Card small className=\"h-100\">\n          <CardHeader className=\"border-bottom\">\n            <h6 className=\"m-0\">{this.props.title}</h6>\n          </CardHeader>\n          <CardBody className=\"pt-0\">\n            <div id=\"container\" />\n\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n\n}\nexport default CountryStats;"]},"metadata":{},"sourceType":"module"}