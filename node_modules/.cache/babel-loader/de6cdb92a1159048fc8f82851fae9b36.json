{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport * as action from '../../action/countryStats.action';\nconst countryName = ['Russia', 'China', 'Japan', 'South Korea', 'Canada', 'United Kingdom', 'United States of America', 'Brazil', 'Hong kong', 'Nigeria', 'France', 'Germany', 'Ukraine', 'Egypt', 'South Africa', 'India', 'Australia', 'Ireland', 'Afghanistan', 'Spain', 'Italy'];\n\nconst CountryStats = ({\n  title\n}) => {\n  const dispatch = useDispatch();\n\n  const loadData = async () => {\n    await dispatch(action.fetchDvData());\n    countryName.map(country => {\n      dispatch(action.fetch(country));\n    });\n  };\n\n  const {\n    geoData,\n    countryData\n  } = useSelector(state => ({\n    geoData: state.CountryStats.geoData,\n    countryData: state.CountryStats.countryData\n  }));\n  console.log(countryData);\n  console.log(geoData);\n  useEffect(() => {\n    loadData();\n\n    if (countryData && countryData.length === countryName.length) {\n      renderChart();\n    }\n  });\n\n  const renderChart = () => {\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n      padding: [0, 20, 40]\n    });\n    chart.scale({\n      x: {\n        sync: true\n      },\n      y: {\n        sync: true\n      }\n    });\n    chart.coordinate('rect').reflect('y');\n    chart.legend(false);\n    chart.axis(false);\n    chart.tooltip({\n      showTitle: false,\n      shared: true,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n      itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n      domStyles: {\n        'g2-tooltip': {\n          borderRadius: '2px',\n          backgroundColor: '#DDDDDD',\n          padding: 0,\n          border: '1px solid #333'\n        }\n      }\n    });\n    const ds = new DataSet(); // draw the map\n\n    const dv = ds.createView('back').source(geoData, {\n      type: 'GeoJSON'\n    }).transform({\n      type: 'geo.projection',\n      projection: 'geoMercator',\n      as: ['x', 'y', 'centroidX', 'centroidY']\n    });\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon().position('x*y').style({\n      fill: '#DDDDDD',\n      stroke: '#b1b1b1',\n      lineWidth: 0.5,\n      fillOpacity: 0.85\n    });\n    const userData = ds.createView().source(countryData);\n    userData.transform({\n      type: 'map',\n      callback: obj => {\n        const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n        obj.x = projectedCoord[0];\n        obj.y = projectedCoord[1];\n        obj.deaths = obj.deaths * 1;\n        obj.magnitude = obj.critical * 1;\n        return obj;\n      }\n    });\n    const pointView = chart.createView();\n    pointView.data(userData.rows);\n    pointView.point().position('x*y').size('deaths', [2, 30]).shape('circle').color('#FF2F29').tooltip('country*confirmed*recovered*critical*deaths').style({\n      fillOpacity: 0.45\n    }).state({\n      active: {\n        style: {\n          lineWidth: 1,\n          stroke: '#FF2F29'\n        }\n      }\n    });\n    pointView.interaction('element-active');\n    chart.render();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0 text-center text-uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","useEffect","useDispatch","useSelector","DataSet","Chart","CardHeader","CardBody","Card","action","countryName","CountryStats","title","dispatch","loadData","fetchDvData","map","country","fetch","geoData","countryData","state","console","log","length","renderChart","chart","container","autoFit","height","padding","scale","x","sync","y","coordinate","reflect","legend","axis","tooltip","showTitle","shared","showMarkers","containerTpl","itemTpl","domStyles","borderRadius","backgroundColor","border","ds","dv","createView","source","type","transform","projection","as","bgView","data","rows","polygon","position","style","fill","stroke","lineWidth","fillOpacity","userData","callback","obj","projectedCoord","geoProjectPosition","longitude","latitude","deaths","magnitude","critical","pointView","point","size","shape","color","active","interaction","render"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport * as action from '../../action/countryStats.action'\n\n\nconst countryName = [\n\n  'Russia',\n  'China',\n  'Japan',\n  'South Korea',\n  'Canada',\n  'United Kingdom',\n  'United States of America',\n  'Brazil',\n  'Hong kong',\n  'Nigeria',\n  'France',\n  'Germany',\n  'Ukraine',\n  'Egypt',\n  'South Africa',\n  'India',\n  'Australia',\n  'Ireland',\n  'Afghanistan',\n  'Spain',\n  'Italy',\n];\n\nconst CountryStats = ({ title }) => {\n\n  const dispatch = useDispatch();\n\n  const loadData = async () => {\n\n   await dispatch(action.fetchDvData());\n    countryName.map( (country) => {\n      dispatch(action.fetch(country));\n    });\n  }\n\n  const { geoData, countryData } = useSelector(state => ({\n    geoData: state.CountryStats.geoData,\n    countryData: state.CountryStats.countryData\n  }))\n\n  console.log(countryData);\n  console.log(geoData);\n\n \n  useEffect(() => {\n    loadData();\n    if (countryData && countryData.length === countryName.length) {\n      renderChart();\n    }\n  },)\n\n\n  const renderChart = () => {\n\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n      padding: [0, 20, 40]\n    });\n\n    chart.scale({\n      x: { sync: true },\n      y: { sync: true }\n    });\n    chart.coordinate('rect').reflect('y');\n    chart.legend(false);\n    chart.axis(false);\n\n    chart.tooltip({\n      showTitle: false,\n      shared: true,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n      itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#852323; color:#fff;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n      domStyles: {\n        'g2-tooltip': {\n          borderRadius: '2px',\n          backgroundColor: '#DDDDDD',\n          padding: 0,\n          border: '1px solid #333'\n        }\n      }\n    });\n    const ds = new DataSet();\n    // draw the map\n    const dv = ds.createView('back')\n      .source(geoData, {\n        type: 'GeoJSON'\n      })\n      .transform({\n        type: 'geo.projection',\n        projection: 'geoMercator',\n        as: ['x', 'y', 'centroidX', 'centroidY']\n      });\n\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon()\n      .position('x*y')\n      .style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85\n      });\n\n    const userData = ds.createView().source(countryData);\n    userData.transform({\n      type: 'map',\n      callback: obj => {\n        const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');\n        obj.x = projectedCoord[0];\n        obj.y = projectedCoord[1];\n        obj.deaths = obj.deaths * 1;\n        obj.magnitude = obj.critical * 1;\n        return obj;\n      }\n    });\n\n    const pointView = chart.createView();\n    pointView.data(userData.rows);\n    pointView.point()\n      .position('x*y')\n      .size('deaths', [2, 30])\n      .shape('circle')\n      .color('#FF2F29')\n      .tooltip('country*confirmed*recovered*critical*deaths')\n      .style({\n        fillOpacity: 0.45,\n      })\n      .state({\n        active: {\n          style: {\n            lineWidth: 1,\n            stroke: '#FF2F29'\n          }\n        }\n      });\n    pointView.interaction('element-active');\n    chart.render();\n\n  }\n\n  return (\n    <>\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0 text-center text-uppercase\">{title}</h6>\n        </CardHeader>\n        <CardBody className=\"pt-0\">\n          <div id=\"container\" />\n        </CardBody>\n      </Card>\n    </>\n  );\n}\nexport default CountryStats;\n\n\n"]},"metadata":{},"sourceType":"module"}