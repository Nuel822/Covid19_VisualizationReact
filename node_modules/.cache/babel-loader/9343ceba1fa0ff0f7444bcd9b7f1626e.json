{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTypeaheadContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  option: optionType.isRequired,\n  position: PropTypes.number\n};\n\nvar menuItemContainer = function menuItemContainer(Component) {\n  var displayName = \"menuItemContainer(\" + getDisplayName(Component) + \")\";\n\n  var WrappedMenuItem = function WrappedMenuItem(_ref) {\n    var label = _ref.label,\n        option = _ref.option,\n        position = _ref.position,\n        props = _objectWithoutPropertiesLoose(_ref, [\"label\", \"option\", \"position\"]);\n\n    var _useTypeaheadContext = useTypeaheadContext(),\n        activeIndex = _useTypeaheadContext.activeIndex,\n        id = _useTypeaheadContext.id,\n        isOnlyResult = _useTypeaheadContext.isOnlyResult,\n        items = _useTypeaheadContext.items,\n        onActiveItemChange = _useTypeaheadContext.onActiveItemChange,\n        onInitialItemChange = _useTypeaheadContext.onInitialItemChange,\n        onMenuItemClick = _useTypeaheadContext.onMenuItemClick;\n\n    var itemRef = useRef(null);\n    useEffect(function () {\n      if (position === 0) {\n        onInitialItemChange(option);\n      }\n    }, [position]);\n    useEffect(function () {\n      if (position === activeIndex) {\n        onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n        var node = itemRef.current;\n        node && scrollIntoView(node, {\n          block: 'nearest',\n          boundary: node.parentNode,\n          inline: 'nearest',\n          scrollMode: 'if-needed'\n        });\n      }\n    }, [activeIndex, position]);\n    var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack on each render.\n\n    items[position] = option;\n    var handleClick = useCallback(function (e) {\n      onMenuItemClick(option, e);\n      props.onClick && props.onClick(e);\n    });\n    return React.createElement(Component, _extends({}, props, {\n      active: active,\n      \"aria-label\": label,\n      \"aria-selected\": active,\n      id: getMenuItemId(id, position),\n      onClick: handleClick,\n      onMouseDown: preventInputBlur,\n      ref: itemRef,\n      role: \"option\"\n    }));\n  };\n\n  WrappedMenuItem.displayName = displayName;\n  WrappedMenuItem.propTypes = propTypes;\n  return WrappedMenuItem;\n};\n\nexport default menuItemContainer;","map":{"version":3,"sources":["/Users/bobby/Desktop/Covid19_VisualizationReact/node_modules/react-bootstrap-typeahead/es/containers/menuItemContainer.js"],"names":["_extends","_objectWithoutPropertiesLoose","scrollIntoView","React","useCallback","useEffect","useRef","PropTypes","useTypeaheadContext","getDisplayName","getMenuItemId","preventInputBlur","optionType","propTypes","option","isRequired","position","number","menuItemContainer","Component","displayName","WrappedMenuItem","_ref","label","props","_useTypeaheadContext","activeIndex","id","isOnlyResult","items","onActiveItemChange","onInitialItemChange","onMenuItemClick","itemRef","node","current","block","boundary","parentNode","inline","scrollMode","active","handleClick","e","onClick","createElement","onMouseDown","ref","role"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTypeaheadContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  option: optionType.isRequired,\n  position: PropTypes.number\n};\n\nvar menuItemContainer = function menuItemContainer(Component) {\n  var displayName = \"menuItemContainer(\" + getDisplayName(Component) + \")\";\n\n  var WrappedMenuItem = function WrappedMenuItem(_ref) {\n    var label = _ref.label,\n        option = _ref.option,\n        position = _ref.position,\n        props = _objectWithoutPropertiesLoose(_ref, [\"label\", \"option\", \"position\"]);\n\n    var _useTypeaheadContext = useTypeaheadContext(),\n        activeIndex = _useTypeaheadContext.activeIndex,\n        id = _useTypeaheadContext.id,\n        isOnlyResult = _useTypeaheadContext.isOnlyResult,\n        items = _useTypeaheadContext.items,\n        onActiveItemChange = _useTypeaheadContext.onActiveItemChange,\n        onInitialItemChange = _useTypeaheadContext.onInitialItemChange,\n        onMenuItemClick = _useTypeaheadContext.onMenuItemClick;\n\n    var itemRef = useRef(null);\n    useEffect(function () {\n      if (position === 0) {\n        onInitialItemChange(option);\n      }\n    }, [position]);\n    useEffect(function () {\n      if (position === activeIndex) {\n        onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n        var node = itemRef.current;\n        node && scrollIntoView(node, {\n          block: 'nearest',\n          boundary: node.parentNode,\n          inline: 'nearest',\n          scrollMode: 'if-needed'\n        });\n      }\n    }, [activeIndex, position]);\n    var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack on each render.\n\n    items[position] = option;\n    var handleClick = useCallback(function (e) {\n      onMenuItemClick(option, e);\n      props.onClick && props.onClick(e);\n    });\n    return React.createElement(Component, _extends({}, props, {\n      active: active,\n      \"aria-label\": label,\n      \"aria-selected\": active,\n      id: getMenuItemId(id, position),\n      onClick: handleClick,\n      onMouseDown: preventInputBlur,\n      ref: itemRef,\n      role: \"option\"\n    }));\n  };\n\n  WrappedMenuItem.displayName = displayName;\n  WrappedMenuItem.propTypes = propTypes;\n  return WrappedMenuItem;\n};\n\nexport default menuItemContainer;"]},"metadata":{},"sourceType":"module"}