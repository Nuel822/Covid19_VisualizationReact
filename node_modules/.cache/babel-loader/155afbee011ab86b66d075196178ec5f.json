{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx\";\nimport React, { useState } from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\nconst initialState = {\n  searchInput: []\n};\n\nconst CountryCaseStats = props => {\n  const [state, setstate] = useState(initialState);\n  const chartData = [];\n  const rendered = false;\n\n  const displayChart = e => {\n    e.preventDefault();\n    var filterResult = props.countryCaseData.filter(data => state.searchInput == data.country);\n\n    if (filterResult && filterResult.length > 0) {\n      chartData.push({\n        item: \"Active\",\n        count: filterResult.active / filterResult.totalCases,\n        percentage: filterResult.active / filterResult.totalCases * 100\n      });\n      chartData.push({\n        item: \"Critical\",\n        count: filterResult.critical / filterResult.totalCases,\n        percentage: filterResult.critical / filterResult.totalCases * 100\n      });\n      chartData.push({\n        item: \"Recovered\",\n        count: filterResult.recovered / filterResult.totalCases,\n        percentage: filterResult.recovered / filterResult.totalCases * 100\n      });\n      chartData.push({\n        item: \"Deaths\",\n        count: filterResult.totalDeaths / filterResult.totalCases,\n        percentage: filterResult.totalDeaths / filterResult.totalCases * 100\n      });\n      const chart = new Chart({\n        container: 'container',\n        autoFit: true,\n        height: 500\n      });\n      chart.data(chartData);\n      chart.scale('percent', {\n        formatter: val => {\n          val = val * 100 + '%';\n          return val;\n        }\n      });\n      chart.coordinate('theta', {\n        radius: 0.75,\n        innerRadius: 0.6\n      });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false,\n        itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n      });\n      chart.annotation().text({\n        position: ['50%', '50%'],\n        content: \"Total Confirmed Cases\",\n        style: {\n          fontSize: 14,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetY: -20\n      }).text({\n        position: ['50%', '50%'],\n        content: filterResult.totalCases,\n        style: {\n          fontSize: 20,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetX: -10,\n        offsetY: 20\n      });\n      chart.interval().adjust('stack').position('percent').color('item').label('percent', percent => {\n        return {\n          content: data => {\n            return `${data.item}: ${percent * 100}%`;\n          }\n        };\n      }).tooltip('item*percent', (item, percent) => {\n        percent = percent * 100 + '%';\n        return {\n          name: item,\n          value: percent\n        };\n      });\n      rendered = true;\n      chart.interaction('element-active');\n      chart.render();\n    }\n  };\n\n  const handleChange = e => {\n    setstate({ ...state,\n      searchInput: e.target.value\n    });\n  };\n\n  const searchResultDisplay = chartData && Array.isArray(chartData) ? /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 73\n    }\n  }) : /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 98\n    }\n  });\n  return /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"py-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    seamless: true,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    placeholder: \"Enter Country Name\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    type: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    theme: \"primary\",\n    onClick: displayChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }, \"Search\"))), rendered && {\n    searchResultDisplay\n  }));\n};\n\nexport default CountryCaseStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx"],"names":["React","useState","Card","CardHeader","CardBody","Button","InputGroup","FormInput","InputGroupAddon","Chart","initialState","searchInput","CountryCaseStats","props","state","setstate","chartData","rendered","displayChart","e","preventDefault","filterResult","countryCaseData","filter","data","country","length","push","item","count","active","totalCases","percentage","critical","recovered","totalDeaths","chart","container","autoFit","height","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","offsetX","interval","adjust","color","label","percent","name","value","interaction","render","handleChange","target","searchResultDisplay","Array","isArray","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoEC,eAApE,QAA2F,cAA3F;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAArB;;AAIA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAEhC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACS,YAAD,CAAlC;AAEA,QAAMM,SAAS,GAAG,EAAlB;AACA,QAAMC,QAAQ,GAAG,KAAjB;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,YAAY,GAAGR,KAAK,CAACS,eAAN,CAAsBC,MAAtB,CAA6BC,IAAI,IAAIV,KAAK,CAACH,WAAN,IAAqBa,IAAI,CAACC,OAA/D,CAAnB;;AAEA,QAAIJ,YAAY,IAAIA,YAAY,CAACK,MAAb,GAAsB,CAA1C,EAA6C;AAEzCV,MAAAA,SAAS,CAACW,IAAV,CAAe;AACXC,QAAAA,IAAI,EAAE,QADK;AACKC,QAAAA,KAAK,EAAER,YAAY,CAACS,MAAb,GAAsBT,YAAY,CAACU,UAD/C;AAETC,QAAAA,UAAU,EAAGX,YAAY,CAACS,MAAb,GAAsBT,YAAY,CAACU,UAApC,GAAkD;AAFrD,OAAf;AAKAf,MAAAA,SAAS,CAACW,IAAV,CAAe;AACXC,QAAAA,IAAI,EAAE,UADK;AACOC,QAAAA,KAAK,EAAER,YAAY,CAACY,QAAb,GAAwBZ,YAAY,CAACU,UADnD;AAETC,QAAAA,UAAU,EAAGX,YAAY,CAACY,QAAb,GAAwBZ,YAAY,CAACU,UAAtC,GAAoD;AAFvD,OAAf;AAKAf,MAAAA,SAAS,CAACW,IAAV,CAAe;AACXC,QAAAA,IAAI,EAAE,WADK;AACQC,QAAAA,KAAK,EAAER,YAAY,CAACa,SAAb,GAAyBb,YAAY,CAACU,UADrD;AAETC,QAAAA,UAAU,EAAGX,YAAY,CAACa,SAAb,GAAyBb,YAAY,CAACU,UAAvC,GAAqD;AAFxD,OAAf;AAKAf,MAAAA,SAAS,CAACW,IAAV,CAAe;AACXC,QAAAA,IAAI,EAAE,QADK;AACKC,QAAAA,KAAK,EAAER,YAAY,CAACc,WAAb,GAA2Bd,YAAY,CAACU,UADpD;AAETC,QAAAA,UAAU,EAAGX,YAAY,CAACc,WAAb,GAA2Bd,YAAY,CAACU,UAAzC,GAAuD;AAF1D,OAAf;AAKA,YAAMK,KAAK,GAAG,IAAI3B,KAAJ,CAAU;AACpB4B,QAAAA,SAAS,EAAE,WADS;AAEpBC,QAAAA,OAAO,EAAE,IAFW;AAGpBC,QAAAA,MAAM,EAAE;AAHY,OAAV,CAAd;AAMAH,MAAAA,KAAK,CAACZ,IAAN,CAAWR,SAAX;AACAoB,MAAAA,KAAK,CAACI,KAAN,CAAY,SAAZ,EAAuB;AACnBC,QAAAA,SAAS,EAAGC,GAAD,IAAS;AAChBA,UAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAY,GAAlB;AACA,iBAAOA,GAAP;AACH;AAJkB,OAAvB;AAKIN,MAAAA,KAAK,CAACO,UAAN,CAAiB,OAAjB,EAA0B;AAC1BC,QAAAA,MAAM,EAAE,IADkB;AAE1BC,QAAAA,WAAW,EAAE;AAFa,OAA1B;AAIJT,MAAAA,KAAK,CAACU,OAAN,CAAc;AACVC,QAAAA,SAAS,EAAE,KADD;AAEVC,QAAAA,WAAW,EAAE,KAFH;AAGVC,QAAAA,OAAO,EAAE;AAHC,OAAd;AAKAb,MAAAA,KAAK,CAACc,UAAN,GACKC,IADL,CACU;AACFC,QAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,CADR;AAEFC,QAAAA,OAAO,EAAE,uBAFP;AAGFC,QAAAA,KAAK,EAAE;AACHC,UAAAA,QAAQ,EAAE,EADP;AAEHC,UAAAA,IAAI,EAAE,SAFH;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAHL;AAQFC,QAAAA,OAAO,EAAE,CAAC;AARR,OADV,EAWKP,IAXL,CAWU;AACFC,QAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,CADR;AAEFC,QAAAA,OAAO,EAAEhC,YAAY,CAACU,UAFpB;AAGFuB,QAAAA,KAAK,EAAE;AACHC,UAAAA,QAAQ,EAAE,EADP;AAEHC,UAAAA,IAAI,EAAE,SAFH;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAHL;AAQFE,QAAAA,OAAO,EAAE,CAAC,EARR;AASFD,QAAAA,OAAO,EAAE;AATP,OAXV;AAsBAtB,MAAAA,KAAK,CAACwB,QAAN,GACKC,MADL,CACY,OADZ,EAEKT,QAFL,CAEc,SAFd,EAGKU,KAHL,CAGW,MAHX,EAIKC,KAJL,CAIW,SAJX,EAIuBC,OAAD,IAAa;AAC3B,eAAO;AACHX,UAAAA,OAAO,EAAG7B,IAAD,IAAU;AACf,mBAAQ,GAAEA,IAAI,CAACI,IAAK,KAAIoC,OAAO,GAAG,GAAI,GAAtC;AACH;AAHE,SAAP;AAKH,OAVL,EAWKlB,OAXL,CAWa,cAXb,EAW6B,CAAClB,IAAD,EAAOoC,OAAP,KAAmB;AACxCA,QAAAA,OAAO,GAAGA,OAAO,GAAG,GAAV,GAAgB,GAA1B;AACA,eAAO;AACHC,UAAAA,IAAI,EAAErC,IADH;AAEHsC,UAAAA,KAAK,EAAEF;AAFJ,SAAP;AAIH,OAjBL;AAkBA/C,MAAAA,QAAQ,GAAG,IAAX;AACAmB,MAAAA,KAAK,CAAC+B,WAAN,CAAkB,gBAAlB;AACA/B,MAAAA,KAAK,CAACgC,MAAN;AACH;AAEJ,GA5FD;;AA6FA,QAAMC,YAAY,GAAIlD,CAAD,IAAO;AACxBJ,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYH,MAAAA,WAAW,EAAEQ,CAAC,CAACmD,MAAF,CAASJ;AAAlC,KAAD,CAAR;AACH,GAFD;;AAKA,QAAMK,mBAAmB,GAAGvD,SAAS,IAAIwD,KAAK,CAACC,OAAN,CAAczD,SAAd,CAAb,gBAAwC;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxC,gBAAiE;AAAI,IAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7F;AAEA,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,SAAS,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBH,KAAK,CAAC6D,KAA3B,CADJ,CADJ,eAII,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,QAAQ,MAApB;AAAqB,IAAA,SAAS,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,oBAAvB;AAA4C,IAAA,QAAQ,EAAEL,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAwB,IAAA,OAAO,EAAEnD,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAFJ,CADJ,EAOKD,QAAQ,IACL;AAAEsD,IAAAA;AAAF,GARR,CAJJ,CADJ;AAmBH,CA9HD;;AAgIA,eAAe3D,gBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\n\nconst initialState = {\n    searchInput: []\n}\n\nconst CountryCaseStats = (props) => {\n\n    const [state, setstate] = useState(initialState)\n\n    const chartData = [];\n    const rendered = false;\n\n    const displayChart = (e) => {\n        e.preventDefault();\n        var filterResult = props.countryCaseData.filter(data => state.searchInput == data.country);\n\n        if (filterResult && filterResult.length > 0) {\n\n            chartData.push({\n                item: \"Active\", count: filterResult.active / filterResult.totalCases\n                , percentage: (filterResult.active / filterResult.totalCases) * 100\n            });\n\n            chartData.push({\n                item: \"Critical\", count: filterResult.critical / filterResult.totalCases\n                , percentage: (filterResult.critical / filterResult.totalCases) * 100\n            });\n\n            chartData.push({\n                item: \"Recovered\", count: filterResult.recovered / filterResult.totalCases\n                , percentage: (filterResult.recovered / filterResult.totalCases) * 100\n            });\n\n            chartData.push({\n                item: \"Deaths\", count: filterResult.totalDeaths / filterResult.totalCases\n                , percentage: (filterResult.totalDeaths / filterResult.totalCases) * 100\n            })\n\n            const chart = new Chart({\n                container: 'container',\n                autoFit: true,\n                height: 500,\n            });\n\n            chart.data(chartData);\n            chart.scale('percent', {\n                formatter: (val) => {\n                    val = val * 100 + '%';\n                    return val;\n                },\n            }); chart.coordinate('theta', {\n                radius: 0.75,\n                innerRadius: 0.6,\n            });\n            chart.tooltip({\n                showTitle: false,\n                showMarkers: false,\n                itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n            });\n            chart.annotation()\n                .text({\n                    position: ['50%', '50%'],\n                    content: \"Total Confirmed Cases\",\n                    style: {\n                        fontSize: 14,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetY: -20,\n                })\n                .text({\n                    position: ['50%', '50%'],\n                    content: filterResult.totalCases,\n                    style: {\n                        fontSize: 20,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetX: -10,\n                    offsetY: 20,\n                });\n            chart.interval()\n                .adjust('stack')\n                .position('percent')\n                .color('item')\n                .label('percent', (percent) => {\n                    return {\n                        content: (data) => {\n                            return `${data.item}: ${percent * 100}%`;\n                        },\n                    };\n                })\n                .tooltip('item*percent', (item, percent) => {\n                    percent = percent * 100 + '%';\n                    return {\n                        name: item,\n                        value: percent,\n                    };\n                });\n            rendered = true;\n            chart.interaction('element-active');\n            chart.render();\n        }\n\n    }\n    const handleChange = (e) => {\n        setstate({ ...state, searchInput: e.target.value })\n    }\n\n\n    const searchResultDisplay = chartData && Array.isArray(chartData) ? <div id=\"container\" /> : <h3 className=\"m-0\"></h3>\n\n    return (\n        <Card small className=\"h-100\">\n            <CardHeader className=\"border-bottom\">\n                <h6 className=\"m-0\">{props.title}</h6>\n            </CardHeader>\n            <CardBody className=\"py-0\">\n                <InputGroup seamless className=\"mb-3\">\n                    <FormInput placeholder=\"Enter Country Name\" onChange={handleChange} />\n                    <InputGroupAddon type=\"append\">\n                        <Button theme=\"primary\" onClick={displayChart}>Search</Button>\n                    </InputGroupAddon>\n                </InputGroup>\n                {rendered &&\n                    { searchResultDisplay }\n                }\n            </CardBody>\n\n        </Card>\n    );\n}\n\nexport default CountryCaseStats;\n"]},"metadata":{},"sourceType":"module"}