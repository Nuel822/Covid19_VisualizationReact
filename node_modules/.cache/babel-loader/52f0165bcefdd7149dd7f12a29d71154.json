{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx\";\nimport React, { useState } from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\nconst initialState = {\n  searchInput: []\n}; // const countryCaseData = [\n//     { latitude: \"9.081999\" },\n//     { longitude: \"8.675277\" },\n//     { country: \"Nigeria\" },\n//     { recovered: 51 },\n//     { critical: 2 },\n//     { totalDeaths: 7 },\n//     { totalCases: 288 },\n//     { active: 230 }\n// ]\n// const chartData = [\n//     { item: '事例一', count: 40, percent: 0.4 },\n//     { item: '事例二', count: 21, percent: 0.21 },\n//     { item: '事例三', count: 17, percent: 0.17 },\n//     { item: '事例四', count: 13, percent: 0.13 },\n//     { item: '事例五', count: 9, percent: 0.09 },\n//   ];\n// const chartData = [\n//     { item: \"Active\", count: 79, percent: 0.79 },\n//     { item: \"Critical\", count: 1, percent: 0.01 },\n//     { item: \"Recovered\", count: 17, percent: 0.17 },\n//     { item: \"Deaths\", count: 2, percent: 0.02 }\n// ]\n\nconst CountryCaseStats = props => {\n  const [state, setstate] = useState(initialState);\n  const chartData = [];\n  let rendered = false;\n\n  const displayChart = e => {\n    e.preventDefault();\n    var filterResult = props.countryCaseData.filter(data => state.searchInput == data.country); // var filterResult = countryCaseData;\n\n    if (filterResult && filterResult.length > 0) {\n      const check1 = parseInt(filterResult[0].active / filterResult[0].totalCases * 100).toFixed(2);\n      const check2 = parseInt((filterResult[0].critical / filterResult[0].totalCases * 100).toFixed(2));\n      const check3 = parseInt(filterResult[0].recovered / filterResult[0].totalCases * 100).toFixed(2);\n      const check4 = parseInt(filterResult[0].totalDeaths / filterResult[0].totalCases * 100).toFixed(2);\n      console.log(check1);\n      console.log(check2);\n      console.log(check3);\n      console.log(check4); // chartData.push({\n      //     item: \"Active\", \n      //     count: parseInt((filterResult[0].active / filterResult[0].totalCases) * 100).toFixed(2)\n      //     , percent: (filterResult[0].active / filterResult[0].totalCases).toFixed(2)\n      // });\n      // chartData.push({\n      //     item: \"Critical\",\n      //      count: parseInt(((filterResult[0].critical / filterResult[0].totalCases) * 100).toFixed(2)),\n      //      percent: parseInt((filterResult[0].critical / filterResult[0].totalCases).toFixed(2))\n      // });\n      // chartData.push({\n      //     item: \"Recovered\", count: parseInt(((filterResult[0].recovered / filterResult[0].totalCases) * 100)).toFixed(2),\n      //     percent: parseInt((filterResult[0].recovered / filterResult[0].totalCases).toFixed(2))\n      // });\n      // chartData.push({\n      //     item: \"Deaths\", count: parseInt(((filterResult[0].totalDeaths / filterResult[0].totalCases) * 100)).toFixed(2)\n      //     , percent: parseInt((filterResult[0].totalDeaths / filterResult[0].totalCases).toFixed(2))\n      // })\n      // console.log(chartData);\n      // const chart = new Chart({\n      //     container: 'containerPieChart',\n      //     autoFit: true,\n      //     height: 500,\n      // });\n      // chart.data(chartData);\n      // chart.scale('percent', {\n      //     formatter: (val) => {\n      //         val = val * 100 + '%';\n      //         return val;\n      //     },\n      // }); chart.coordinate('theta', {\n      //     radius: 0.75,\n      //     innerRadius: 0.6,\n      // });\n      // chart.tooltip({\n      //     showTitle: false,\n      //     showMarkers: false,\n      //     itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n      // });\n      // chart.annotation()\n      //     .text({\n      //         position: ['50%', '50%'],\n      //         content: \"Total Confirmed Cases\",\n      //         style: {\n      //             fontSize: 14,\n      //             fill: '#8c8c8c',\n      //             textAlign: 'center',\n      //         },\n      //         offsetY: -20,\n      //     })\n      //     .text({\n      //         position: ['50%', '50%'],\n      //         content: \"Total\",\n      //         style: {\n      //             fontSize: 20,\n      //             fill: '#8c8c8c',\n      //             textAlign: 'center',\n      //         },\n      //         offsetX: -10,\n      //         offsetY: 20,\n      //     });\n      // chart.interval()\n      //     .adjust('stack')\n      //     .position('percent')\n      //     .color('item')\n      //     .label('percent', (percent) => {\n      //         return {\n      //             content: (data) => {\n      //                 return `${data.item}: ${percent * 100}%`;\n      //             },\n      //         };\n      //     })\n      //     .tooltip('item*percent', (item, percent) => {\n      //         percent = percent * 100 + '%';\n      //         return {\n      //             name: item,\n      //             value: percent,\n      //         };\n      //     });\n      // rendered = true;\n      // chart.interaction('element-active');\n      // chart.render();\n    }\n  };\n\n  const handleChange = e => {\n    setstate({ ...state,\n      searchInput: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"py-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    seamless: true,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    placeholder: \"Enter Country Name\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    type: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    theme: \"primary\",\n    onClick: displayChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 25\n    }\n  }, \"Search\"))), rendered && /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"No Search Record Found\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"containerPieChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default CountryCaseStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryCaseStats.component.jsx"],"names":["React","useState","Card","CardHeader","CardBody","Button","InputGroup","FormInput","InputGroupAddon","Chart","initialState","searchInput","CountryCaseStats","props","state","setstate","chartData","rendered","displayChart","e","preventDefault","filterResult","countryCaseData","filter","data","country","length","check1","parseInt","active","totalCases","toFixed","check2","critical","check3","recovered","check4","totalDeaths","console","log","handleChange","target","value","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardHeader, CardBody, Button, InputGroup, FormInput, InputGroupAddon } from \"shards-react\";\nimport { Chart } from '@antv/g2';\n\nconst initialState = {\n    searchInput: []\n}\n\n// const countryCaseData = [\n//     { latitude: \"9.081999\" },\n//     { longitude: \"8.675277\" },\n//     { country: \"Nigeria\" },\n//     { recovered: 51 },\n//     { critical: 2 },\n//     { totalDeaths: 7 },\n//     { totalCases: 288 },\n//     { active: 230 }\n\n// ]\n// const chartData = [\n//     { item: '事例一', count: 40, percent: 0.4 },\n//     { item: '事例二', count: 21, percent: 0.21 },\n//     { item: '事例三', count: 17, percent: 0.17 },\n//     { item: '事例四', count: 13, percent: 0.13 },\n//     { item: '事例五', count: 9, percent: 0.09 },\n//   ];\n// const chartData = [\n//     { item: \"Active\", count: 79, percent: 0.79 },\n//     { item: \"Critical\", count: 1, percent: 0.01 },\n//     { item: \"Recovered\", count: 17, percent: 0.17 },\n//     { item: \"Deaths\", count: 2, percent: 0.02 }\n// ]\n\nconst CountryCaseStats = (props) => {\n\n    const [state, setstate] = useState(initialState)\n\n    const chartData = [];\n    let rendered = false;\n   \n    const displayChart = (e) => {\n        e.preventDefault();\n         var filterResult = props.countryCaseData.filter(data => state.searchInput == data.country);\n        // var filterResult = countryCaseData;\n\n        if (filterResult && filterResult.length > 0) {\n\n            const check1 = parseInt((filterResult[0].active / filterResult[0].totalCases) * 100).toFixed(2);\n            const check2 = parseInt(((filterResult[0].critical / filterResult[0].totalCases) * 100).toFixed(2))\n            const check3 = parseInt(((filterResult[0].recovered / filterResult[0].totalCases) * 100)).toFixed(2)\n            const check4 =parseInt(((filterResult[0].totalDeaths / filterResult[0].totalCases) * 100)).toFixed(2)\n\n            console.log(check1)\n            console.log(check2)\n            console.log(check3)\n            console.log(check4)\n            // chartData.push({\n            //     item: \"Active\", \n            //     count: parseInt((filterResult[0].active / filterResult[0].totalCases) * 100).toFixed(2)\n            //     , percent: (filterResult[0].active / filterResult[0].totalCases).toFixed(2)\n            // });\n            \n            // chartData.push({\n            //     item: \"Critical\",\n            //      count: parseInt(((filterResult[0].critical / filterResult[0].totalCases) * 100).toFixed(2)),\n            //      percent: parseInt((filterResult[0].critical / filterResult[0].totalCases).toFixed(2))\n            // });\n\n            // chartData.push({\n            //     item: \"Recovered\", count: parseInt(((filterResult[0].recovered / filterResult[0].totalCases) * 100)).toFixed(2),\n            //     percent: parseInt((filterResult[0].recovered / filterResult[0].totalCases).toFixed(2))\n            // });\n\n            // chartData.push({\n            //     item: \"Deaths\", count: parseInt(((filterResult[0].totalDeaths / filterResult[0].totalCases) * 100)).toFixed(2)\n            //     , percent: parseInt((filterResult[0].totalDeaths / filterResult[0].totalCases).toFixed(2))\n            // })\n\n\n            // console.log(chartData);\n\n            // const chart = new Chart({\n            //     container: 'containerPieChart',\n            //     autoFit: true,\n            //     height: 500,\n            // });\n\n            // chart.data(chartData);\n            // chart.scale('percent', {\n            //     formatter: (val) => {\n            //         val = val * 100 + '%';\n            //         return val;\n            //     },\n            // }); chart.coordinate('theta', {\n            //     radius: 0.75,\n            //     innerRadius: 0.6,\n            // });\n            // chart.tooltip({\n            //     showTitle: false,\n            //     showMarkers: false,\n            //     itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n            // });\n            // chart.annotation()\n            //     .text({\n            //         position: ['50%', '50%'],\n            //         content: \"Total Confirmed Cases\",\n            //         style: {\n            //             fontSize: 14,\n            //             fill: '#8c8c8c',\n            //             textAlign: 'center',\n            //         },\n            //         offsetY: -20,\n            //     })\n            //     .text({\n            //         position: ['50%', '50%'],\n            //         content: \"Total\",\n            //         style: {\n            //             fontSize: 20,\n            //             fill: '#8c8c8c',\n            //             textAlign: 'center',\n            //         },\n            //         offsetX: -10,\n            //         offsetY: 20,\n            //     });\n            // chart.interval()\n            //     .adjust('stack')\n            //     .position('percent')\n            //     .color('item')\n            //     .label('percent', (percent) => {\n            //         return {\n            //             content: (data) => {\n            //                 return `${data.item}: ${percent * 100}%`;\n            //             },\n            //         };\n            //     })\n            //     .tooltip('item*percent', (item, percent) => {\n            //         percent = percent * 100 + '%';\n            //         return {\n            //             name: item,\n            //             value: percent,\n            //         };\n            //     });\n            // rendered = true;\n            // chart.interaction('element-active');\n            // chart.render();\n        }\n\n    }\n    const handleChange = (e) => {\n        setstate({ ...state, searchInput: e.target.value })\n    }\n\n    return (\n        <Card small className=\"h-100\">\n            <CardHeader className=\"border-bottom\">\n                <h6 className=\"m-0\">{props.title}</h6>\n            </CardHeader>\n            <CardBody className=\"py-0\">\n                <InputGroup seamless className=\"mb-3\">\n                    <FormInput placeholder=\"Enter Country Name\" onChange={handleChange} />\n                    <InputGroupAddon type=\"append\">\n                        <Button theme=\"primary\" onClick={displayChart}>Search</Button>\n                    </InputGroupAddon>\n                </InputGroup>\n                {rendered && (\n                    <h3 className=\"m-0\">No Search Record Found</h3>\n                )}\n                <div id=\"containerPieChart\" />\n            </CardBody>\n\n        </Card>\n    );\n}\n\nexport default CountryCaseStats;\n"]},"metadata":{},"sourceType":"module"}