{"ast":null,"code":"import React from 'react';\nimport { Chart } from '@antv/g2';\n\nconst DisplayPieChart = props => {\n  const renderChart = () => {\n    if (props.chartData && props.chartData.length > 0) {\n      const chart = new Chart({\n        container: 'containerPieChart',\n        autoFit: true,\n        height: 500\n      });\n      chart.data(props.chartData);\n      chart.scale('percent', {\n        formatter: val => {\n          val = val * 100 + '%';\n          return val;\n        }\n      });\n      chart.coordinate('theta', {\n        radius: 0.75,\n        innerRadius: 0.6\n      });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false,\n        itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n      });\n      chart.annotation().text({\n        position: ['50%', '50%'],\n        content: \"Total Confirmed Cases\",\n        style: {\n          fontSize: 14,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetY: -20\n      }).text({\n        position: ['50%', '50%'],\n        content: props.innerChartTitle,\n        style: {\n          fontSize: 20,\n          fill: '#8c8c8c',\n          textAlign: 'center'\n        },\n        offsetX: -10,\n        offsetY: 20\n      });\n      chart.interval().adjust('stack').position('percent').color('item').tooltip('item*percent', (item, percent) => {\n        percent = percent * 100 + '%';\n        return {\n          name: item,\n          value: percent\n        };\n      });\n      chart.interaction('element-active');\n      chart.render(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, renderChart());\n};\n\nexport default DisplayPieChart;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/chart/pieChart.component.jsx"],"names":["React","Chart","DisplayPieChart","props","renderChart","chartData","length","chart","container","autoFit","height","data","scale","formatter","val","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","textAlign","offsetY","innerChartTitle","offsetX","interval","adjust","color","item","percent","name","value","interaction","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAE/B,QAAMC,WAAW,GAAG,MAAM;AAEtB,QAAID,KAAK,CAACE,SAAN,IAAmBF,KAAK,CAACE,SAAN,CAAgBC,MAAhB,GAAyB,CAAhD,EAAmD;AAC/C,YAAMC,KAAK,GAAG,IAAIN,KAAJ,CAAU;AACpBO,QAAAA,SAAS,EAAE,mBADS;AAEpBC,QAAAA,OAAO,EAAE,IAFW;AAGpBC,QAAAA,MAAM,EAAE;AAHY,OAAV,CAAd;AAMAH,MAAAA,KAAK,CAACI,IAAN,CAAWR,KAAK,CAACE,SAAjB;AACAE,MAAAA,KAAK,CAACK,KAAN,CAAY,SAAZ,EAAuB;AACnBC,QAAAA,SAAS,EAAGC,GAAD,IAAS;AAChBA,UAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAY,GAAlB;AACA,iBAAOA,GAAP;AACH;AAJkB,OAAvB;AAMAP,MAAAA,KAAK,CAACQ,UAAN,CAAiB,OAAjB,EAA0B;AACtBC,QAAAA,MAAM,EAAE,IADc;AAEtBC,QAAAA,WAAW,EAAE;AAFS,OAA1B;AAIAV,MAAAA,KAAK,CAACW,OAAN,CAAc;AACVC,QAAAA,SAAS,EAAE,KADD;AAEVC,QAAAA,WAAW,EAAE,KAFH;AAGVC,QAAAA,OAAO,EAAE;AAHC,OAAd;AAKAd,MAAAA,KAAK,CAACe,UAAN,GACKC,IADL,CACU;AACFC,QAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,CADR;AAEFC,QAAAA,OAAO,EAAE,uBAFP;AAGFC,QAAAA,KAAK,EAAE;AACHC,UAAAA,QAAQ,EAAE,EADP;AAEHC,UAAAA,IAAI,EAAE,SAFH;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAHL;AAQFC,QAAAA,OAAO,EAAE,CAAC;AARR,OADV,EAWKP,IAXL,CAWU;AACFC,QAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,CADR;AAEFC,QAAAA,OAAO,EAAEtB,KAAK,CAAC4B,eAFb;AAGFL,QAAAA,KAAK,EAAE;AACHC,UAAAA,QAAQ,EAAE,EADP;AAEHC,UAAAA,IAAI,EAAE,SAFH;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAHL;AAQFG,QAAAA,OAAO,EAAE,CAAC,EARR;AASFF,QAAAA,OAAO,EAAE;AATP,OAXV;AAsBAvB,MAAAA,KAAK,CAAC0B,QAAN,GACKC,MADL,CACY,OADZ,EAEKV,QAFL,CAEc,SAFd,EAGKW,KAHL,CAGW,MAHX,EAIKjB,OAJL,CAIa,cAJb,EAI6B,CAACkB,IAAD,EAAOC,OAAP,KAAmB;AACxCA,QAAAA,OAAO,GAAGA,OAAO,GAAG,GAAV,GAAgB,GAA1B;AACA,eAAO;AACHC,UAAAA,IAAI,EAAEF,IADH;AAEHG,UAAAA,KAAK,EAAEF;AAFJ,SAAP;AAIH,OAVL;AAWA9B,MAAAA,KAAK,CAACiC,WAAN,CAAkB,gBAAlB;AACAjC,MAAAA,KAAK,CAACkC,MAAN,CAAa,IAAb;AACH;AACJ,GA7DD;;AA8DA,sBACI,0CAAGrC,WAAW,EAAd,CADJ;AAGH,CAnED;;AAoEA,eAAeF,eAAf","sourcesContent":["import React from 'react';\nimport { Chart } from '@antv/g2';\n\n\n\nconst DisplayPieChart = (props) => {\n\n    const renderChart = () => {\n\n        if (props.chartData && props.chartData.length > 0) {\n            const chart = new Chart({\n                container: 'containerPieChart',\n                autoFit: true,\n                height: 500,\n            });\n\n            chart.data(props.chartData);\n            chart.scale('percent', {\n                formatter: (val) => {\n                    val = val * 100 + '%';\n                    return val;\n                },\n            });\n            chart.coordinate('theta', {\n                radius: 0.75,\n                innerRadius: 0.6,\n            });\n            chart.tooltip({\n                showTitle: false,\n                showMarkers: false,\n                itemTpl: '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>',\n            });\n            chart.annotation()\n                .text({\n                    position: ['50%', '50%'],\n                    content: \"Total Confirmed Cases\",\n                    style: {\n                        fontSize: 14,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetY: -20,\n                })\n                .text({\n                    position: ['50%', '50%'],\n                    content: props.innerChartTitle,\n                    style: {\n                        fontSize: 20,\n                        fill: '#8c8c8c',\n                        textAlign: 'center',\n                    },\n                    offsetX: -10,\n                    offsetY: 20,\n                });\n            chart.interval()\n                .adjust('stack')\n                .position('percent')\n                .color('item')\n                .tooltip('item*percent', (item, percent) => {\n                    percent = percent * 100 + '%';\n                    return {\n                        name: item,\n                        value: percent,\n                    };\n                });\n            chart.interaction('element-active');\n            chart.render(true);\n        }\n    }\n    return (\n        <>{renderChart()}</>\n    );\n}\nexport default DisplayPieChart;"]},"metadata":{},"sourceType":"module"}