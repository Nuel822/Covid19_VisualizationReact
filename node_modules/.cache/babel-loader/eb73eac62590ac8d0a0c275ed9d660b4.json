{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport axios from 'axios';\nconst configuration = {\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"78f0398aa4msh86be5ac1359b0f1p1838a7jsnad282c6e4e48\"\n  }\n};\nconst countryName = ['Russia', 'China', 'Japan', 'South Korea', 'Canada', 'United Kingdom', 'United States of America', 'Brazil', 'Argentina', 'Nigeria', 'France', 'Germany', 'Ukraine', 'Egypt', 'South Africa', 'India', 'Australia', 'Saudi Arabia', 'Afghanistan', 'Spain', 'Italy'];\nconst userData = [];\n\nclass CountryStats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      geoData: [],\n      countryData: []\n    };\n  }\n\n  async componentDidMount() {\n    const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n    const json = await response.data;\n    this.setState({\n      geoData: json\n    });\n    const ds = new DataSet();\n    const dv = ds.createView('back').source(this.state.geoData, {\n      type: 'GeoJSON'\n    });\n    countryName.map(async country => {\n      const response = await axios.get('https://covid-19-data.p.rapidapi.com/country?name=' + country, configuration);\n      const json = await response.data;\n      console.log(json);\n    });\n    console.log(userData);\n    const userDv = ds.createView().source(userData).transform({\n      geoDataView: dv,\n      field: 'name',\n      type: 'geo.centroid',\n      as: ['longitude', 'latitude']\n    });\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500\n    });\n    chart.scale({\n      longitude: {\n        sync: true\n      },\n      latitude: {\n        sync: true\n      }\n    });\n    chart.axis(false);\n    chart.legend({\n      position: 'right'\n    });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false\n    });\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon().position('longitude*latitude').color('#ebedf0').style({\n      lineWidth: 1,\n      stroke: '#fafbfc'\n    });\n    const userView = chart.createView();\n    userView.data(userDv.rows);\n    userView.point().position('longitude*latitude').color('#1890ff').shape('circle').size('value', [5, 15]).style({\n      lineWidth: 1,\n      stroke: '#1890ff'\n    });\n    userView.interaction('element-active');\n    chart.render();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n      small: true,\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      className: \"border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CardBody, {\n      className: \"pt-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","useEffect","DataSet","Chart","CardHeader","CardBody","Card","axios","configuration","countryName","userData","CountryStats","Component","constructor","props","state","geoData","countryData","componentDidMount","response","get","json","data","setState","ds","dv","createView","source","type","map","country","console","log","userDv","transform","geoDataView","field","as","chart","container","autoFit","height","scale","longitude","sync","latitude","axis","legend","position","tooltip","showTitle","showMarkers","bgView","rows","polygon","color","style","lineWidth","stroke","userView","point","shape","size","interaction","render","title"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport axios from 'axios'\n\nconst configuration = {\n\n  \"headers\": {\n      \"content-type\": \"application/octet-stream\",\n      \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"78f0398aa4msh86be5ac1359b0f1p1838a7jsnad282c6e4e48\"\n  }\n}\n\nconst countryName = [\n  \n  'Russia',\n  'China',\n  'Japan',\n  'South Korea',\n  'Canada',\n  'United Kingdom',\n  'United States of America',\n  'Brazil',\n  'Argentina',\n  'Nigeria',\n  'France',\n  'Germany',\n  'Ukraine',\n  'Egypt',\n  'South Africa',\n  'India',\n  'Australia',\n  'Saudi Arabia',\n  'Afghanistan',\n  'Spain',\n  'Italy',\n];\n\nconst userData = [];\n\n\nclass CountryStats extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { geoData: [] , countryData: []};\n  }\n\n  async componentDidMount() {\n\n    const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n    const json = await response.data;\n    this.setState({geoData: json})\n\n    const ds = new DataSet();\n    const dv = ds.createView('back').source(this.state.geoData, {\n      type: 'GeoJSON',\n    });\n    \n    countryName.map( async country =>  {\n      const response = await axios.get('https://covid-19-data.p.rapidapi.com/country?name=' + country, configuration);\n      const json = await response.data;\n      console.log(json)\n    });\n    \n    console.log(userData)\n\n    const userDv = ds\n      .createView()\n      .source(userData)\n      .transform({\n        geoDataView: dv,\n        field: 'name',\n        type: 'geo.centroid',\n        as: ['longitude', 'latitude'],\n      });\n\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n    });\n\n    chart.scale({\n      longitude: {\n        sync: true,\n      },\n      latitude: {\n        sync: true,\n      },\n    });\n    chart.axis(false);\n\n    chart.legend({ position: 'right' });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false\n    });\n\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView\n      .polygon()\n      .position('longitude*latitude')\n      .color('#ebedf0')\n      .style({\n        lineWidth: 1,\n        stroke: '#fafbfc',\n      });\n\n    const userView = chart.createView();\n    userView.data(userDv.rows);\n    userView\n      .point()\n      .position('longitude*latitude')\n      .color('#1890ff')\n      .shape('circle')\n      .size('value', [5, 15])\n      .style({\n        lineWidth: 1,\n        stroke: '#1890ff',\n      });\n    userView.interaction('element-active');\n    chart.render();\n\n  };\n\n  render() {\n\n    return (\n      <>\n        <Card small className=\"h-100\">\n          <CardHeader className=\"border-bottom\">\n            <h6 className=\"m-0\">{this.props.title}</h6>\n          </CardHeader>\n          <CardBody className=\"pt-0\">\n            <div id=\"container\" />\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n\n}\nexport default CountryStats;"]},"metadata":{},"sourceType":"module"}