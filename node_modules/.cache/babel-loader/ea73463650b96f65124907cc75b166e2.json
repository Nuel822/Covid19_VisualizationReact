{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { get } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\n\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\n\nvar Path =\n/** @class */\nfunction (_super) {\n  __extends(Path, _super);\n\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n        connectNulls = _a === void 0 ? false : _a;\n    _this.connectNulls = connectNulls;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n\n\n  Path.prototype.createElements = function (mappingData, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    } // Path 的每个 element 对应一组数据\n\n\n    var _a = this,\n        lastElementsMap = _a.lastElementsMap,\n        elementsMap = _a.elementsMap,\n        elements = _a.elements,\n        theme = _a.theme,\n        container = _a.container;\n\n    var elementId = this.getElementId(mappingData);\n    var shapeCfg = this.getShapeInfo(mappingData);\n    var result = lastElementsMap[elementId];\n\n    if (!result) {\n      var shapeFactory = this.getShapeFactory();\n      result = new Element({\n        theme: get(theme, ['geometries', this.shapeType], {}),\n        shapeFactory: shapeFactory,\n        container: container,\n        offscreenGroup: this.getOffscreenGroup()\n      });\n      result.geometry = this;\n      result.draw(shapeCfg, isUpdate); // 绘制 shape\n    } else {\n      // element 已经创建\n      var preShapeCfg = result.getModel();\n\n      if (isModelChange(preShapeCfg, shapeCfg)) {\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        result.update(shapeCfg); // 更新对应的 element\n      }\n\n      delete lastElementsMap[elementId];\n    }\n\n    elements.push(result);\n    elementsMap[elementId] = result;\n    return elements;\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点数据。\n   * @param mappingData\n   * @returns points\n   */\n\n\n  Path.prototype.getPoints = function (mappingData) {\n    return mappingData.map(function (obj) {\n      return {\n        x: obj.x,\n        y: obj.y\n      };\n    });\n  };\n\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    return __assign(__assign({}, shapeCfg), {\n      mappingData: mappingData,\n      data: this.getData(mappingData),\n      isStack: !!this.getAdjust('stack'),\n      points: this.getPoints(mappingData),\n      connectNulls: this.connectNulls\n    });\n  };\n\n  Path.prototype.getData = function (mappingData) {\n    return mappingData.map(function (obj) {\n      return obj[FIELD_ORIGIN];\n    });\n  };\n\n  return Path;\n}(Geometry);\n\nexport default Path;","map":{"version":3,"sources":["../../src/geometry/path.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { get } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nvar Path = /** @class */ (function (_super) {\n    __extends(Path, _super);\n    function Path(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.type = 'path';\n        _this.shapeType = 'line';\n        var _a = cfg.connectNulls, connectNulls = _a === void 0 ? false : _a;\n        _this.connectNulls = connectNulls;\n        return _this;\n    }\n    /**\n     * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n     * @param mappingData\n     * @param [isUpdate]\n     * @returns elements\n     */\n    Path.prototype.createElements = function (mappingData, index, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        // Path 的每个 element 对应一组数据\n        var _a = this, lastElementsMap = _a.lastElementsMap, elementsMap = _a.elementsMap, elements = _a.elements, theme = _a.theme, container = _a.container;\n        var elementId = this.getElementId(mappingData);\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var result = lastElementsMap[elementId];\n        if (!result) {\n            var shapeFactory = this.getShapeFactory();\n            result = new Element({\n                theme: get(theme, ['geometries', this.shapeType], {}),\n                shapeFactory: shapeFactory,\n                container: container,\n                offscreenGroup: this.getOffscreenGroup(),\n            });\n            result.geometry = this;\n            result.draw(shapeCfg, isUpdate); // 绘制 shape\n        }\n        else {\n            // element 已经创建\n            var preShapeCfg = result.getModel();\n            if (isModelChange(preShapeCfg, shapeCfg)) {\n                // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n                result.update(shapeCfg); // 更新对应的 element\n            }\n            delete lastElementsMap[elementId];\n        }\n        elements.push(result);\n        elementsMap[elementId] = result;\n        return elements;\n    };\n    /**\n     * 获取组成一条线（一组数据）的所有点数据。\n     * @param mappingData\n     * @returns points\n     */\n    Path.prototype.getPoints = function (mappingData) {\n        return mappingData.map(function (obj) {\n            return {\n                x: obj.x,\n                y: obj.y,\n            };\n        });\n    };\n    Path.prototype.getShapeInfo = function (mappingData) {\n        var shapeCfg = this.getDrawCfg(mappingData[0]);\n        return __assign(__assign({}, shapeCfg), { mappingData: mappingData, data: this.getData(mappingData), isStack: !!this.getAdjust('stack'), points: this.getPoints(mappingData), connectNulls: this.connectNulls });\n    };\n    Path.prototype.getData = function (mappingData) {\n        return mappingData.map(function (obj) {\n            return obj[FIELD_ORIGIN];\n        });\n    };\n    return Path;\n}(Geometry));\nexport default Path;\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"module"}