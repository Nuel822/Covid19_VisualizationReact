{"ast":null,"code":"import { flatten, isString, valuesOfKey } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate'; // 已经排序后的数据查找距离最小的\n\nfunction findMinDistance(arr, scale) {\n  var count = arr.length;\n  var sourceArr = arr;\n\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map(function (v) {\n      return scale.translate(v);\n    });\n  }\n\n  var distance = sourceArr[1] - sourceArr[0];\n\n  for (var i = 2; i < count; i++) {\n    var tmp = sourceArr[i] - sourceArr[i - 1];\n\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n\n  return distance;\n}\n\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    var mergeData = flatten(dataArray);\n    var values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n\n  return dataArray.length;\n}\n/** @ignore */\n\n\nexport function getDefaultSize(geometry) {\n  var theme = geometry.theme;\n  var coordinate = geometry.coordinate;\n  var xScale = geometry.getXScale();\n  var xValues = xScale.values;\n  var dataArray = geometry.beforeMappingData;\n  var count = xValues.length;\n\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    var interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n\n  var range = xScale.range;\n  var normalizedSize = 1 / count;\n  var wr = 1;\n\n  if (coordinate.isPolar) {\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = theme.multiplePieWidthRatio;\n    } else {\n      wr = theme.roseWidthRatio;\n    }\n  } else {\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n\n    wr = theme.columnWidthRatio;\n  }\n\n  normalizedSize *= wr;\n\n  if (geometry.getAdjust('dodge')) {\n    var dodgeAdjust = geometry.getAdjust('dodge');\n    var dodgeBy = dodgeAdjust.dodgeBy;\n    var dodgeCount = getDodgeCount(dataArray, dodgeBy);\n    normalizedSize = normalizedSize / dodgeCount;\n  } // 最大和最小限制\n\n\n  var maxColumnWidth = theme.maxColumnWidth,\n      minColumnWidth = theme.minColumnWidth;\n  var xDimensionLength = getXDimensionLength(geometry.coordinate);\n\n  if (maxColumnWidth) {\n    var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n\n  if (minColumnWidth) {\n    var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n\n  return normalizedSize;\n}","map":{"version":3,"sources":["../../../src/geometry/util/shape-size.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { flatten, isString, valuesOfKey } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n    var count = arr.length;\n    var sourceArr = arr;\n    if (isString(sourceArr[0])) {\n        // 日期类型的 values 经常上文本类型，所以需要转换一下\n        sourceArr = arr.map(function (v) {\n            return scale.translate(v);\n        });\n    }\n    var distance = sourceArr[1] - sourceArr[0];\n    for (var i = 2; i < count; i++) {\n        var tmp = sourceArr[i] - sourceArr[i - 1];\n        if (distance > tmp) {\n            distance = tmp;\n        }\n    }\n    return distance;\n}\nfunction getDodgeCount(dataArray, dodgeBy) {\n    if (dodgeBy) {\n        var mergeData = flatten(dataArray);\n        var values = valuesOfKey(mergeData, dodgeBy);\n        return values.length;\n    }\n    return dataArray.length;\n}\n/** @ignore */\nexport function getDefaultSize(geometry) {\n    var theme = geometry.theme;\n    var coordinate = geometry.coordinate;\n    var xScale = geometry.getXScale();\n    var xValues = xScale.values;\n    var dataArray = geometry.beforeMappingData;\n    var count = xValues.length;\n    if (xScale.isLinear && xValues.length > 1) {\n        // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n        xValues.sort();\n        var interval = findMinDistance(xValues, xScale);\n        count = (xScale.max - xScale.min) / interval;\n        if (xValues.length > count) {\n            count = xValues.length;\n        }\n    }\n    var range = xScale.range;\n    var normalizedSize = 1 / count;\n    var wr = 1;\n    if (coordinate.isPolar) {\n        if (coordinate.isTransposed && count > 1) {\n            // 极坐标下多层环图\n            wr = theme.multiplePieWidthRatio;\n        }\n        else {\n            wr = theme.roseWidthRatio;\n        }\n    }\n    else {\n        if (xScale.isLinear) {\n            normalizedSize *= range[1] - range[0];\n        }\n        wr = theme.columnWidthRatio;\n    }\n    normalizedSize *= wr;\n    if (geometry.getAdjust('dodge')) {\n        var dodgeAdjust = geometry.getAdjust('dodge');\n        var dodgeBy = dodgeAdjust.dodgeBy;\n        var dodgeCount = getDodgeCount(dataArray, dodgeBy);\n        normalizedSize = normalizedSize / dodgeCount;\n    }\n    // 最大和最小限制\n    var maxColumnWidth = theme.maxColumnWidth, minColumnWidth = theme.minColumnWidth;\n    var xDimensionLength = getXDimensionLength(geometry.coordinate);\n    if (maxColumnWidth) {\n        var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n        if (normalizedSize > normalizedMaxColumnWidth) {\n            normalizedSize = normalizedMaxColumnWidth;\n        }\n    }\n    if (minColumnWidth) {\n        var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n        if (normalizedSize < normalizedMinColumnWidth) {\n            normalizedSize = normalizedMinColumnWidth;\n        }\n    }\n    return normalizedSize;\n}\n//# sourceMappingURL=shape-size.js.map"]},"metadata":{},"sourceType":"module"}