{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx\";\nimport React from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport axios from 'axios';\nconst configuration = {\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"78f0398aa4msh86be5ac1359b0f1p1838a7jsnad282c6e4e48\"\n  }\n};\nconst countryName = ['Russia', 'China', 'Japan', 'South Korea', 'Canada', 'United Kingdom', 'United States of America', 'Brazil', 'Argentina', 'Nigeria', 'France', 'Germany', 'Ukraine', 'Egypt', 'South Africa', 'India', 'Australia', 'Saudi Arabia', 'Afghanistan', 'Spain', 'Italy'];\nconst userData = [{\n  name: \"Russia\",\n  value: 8672\n}, {\n  name: \"China\",\n  value: 81802\n}, {\n  name: \"Japan\",\n  value: 4257\n}, {\n  name: \"S. Korea\",\n  value: 10384\n}, {\n  name: \"USA\",\n  value: 402471\n}, {\n  name: \"Canada\",\n  value: 18447\n}, {\n  name: \"UK\",\n  value: 55242\n}, {\n  name: \"Brazil\",\n  value: 14152\n}, {\n  name: \"Germany\",\n  value: 109329\n}, {\n  name: \"Nigeria\",\n  value: 254\n}, {\n  name: \"France\",\n  value: 109069\n}, {\n  name: \"Argentina\",\n  value: 1715\n}, {\n  name: \"Ukraine\",\n  value: 1668\n}, {\n  name: \"Egypt\",\n  value: 1450\n}, {\n  name: \"India\",\n  value: 5480\n}, {\n  name: \"Saudi Arabia\",\n  value: 2932\n}, {\n  name: \"Australia\",\n  value: 6013\n}, {\n  name: \"South Africa\",\n  value: 1749\n}, {\n  name: \"Afghanistan\",\n  value: 423\n}, {\n  name: \"Spain\",\n  value: 146690\n}, {\n  name: \"Italy\",\n  value: 135586\n}]; // const userData = [\n//   { name: 'Russia', value: 86.8 },\n//   { name: 'China', value: 106.3 },\n//   { name: 'Japan', value: 94.7 },\n//   { name: 'Mongolia', value: 98 },\n//   { name: 'Canada', value: 98.4 },\n//   { name: 'United Kingdom', value: 97.2 },\n//   { name: 'United States of America', value: 98.3 },\n//   { name: 'Brazil', value: 96.7 },\n//   { name: 'Argentina', value: 95.8 },\n//   { name: 'Algeria', value: 101.3 },\n//   { name: 'France', value: 94.8 },\n//   { name: 'Germany', value: 96.6 },\n//   { name: 'Ukraine', value: 86.3 },\n//   { name: 'Egypt', value: 102.1 },\n//   { name: 'South Africa', value: 101.3 },\n//   { name: 'India', value: 107.6 },\n//   { name: 'Australia', value: 99.9 },\n//   { name: 'Saudi Arabia', value: 130.1 },\n//   { name: 'Afghanistan', value: 106.5 },\n//   { name: 'Kazakhstan', value: 93.4 },\n//   { name: 'Indonesia', value: 101.4 },\n// ];\n\nclass CountryStats extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadData = async callback => {\n      const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n      const json = await response.data;\n      countryName.map(async country => {\n        const countryResponse = await axios.get('https://covid-19-data.p.rapidapi.com/country?name=' + country, configuration);\n        const countryJson = countryResponse.data;\n        userData.push({\n          name: countryJson[0].country,\n          value: countryJson[0].confirmed\n        });\n\n        if (userData && userData.length == countryName.length) {\n          callback(userData, json);\n        }\n      });\n    };\n\n    this.componentDidMount = async () => {\n      // this.loadData((data, json) => {\n      //   this.setState({ countryData: data, geoData: json });\n      //   console.log(data)\n      //   this.renderChart();\n      // })\n      const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n      const json = await response.data;\n      this.setState({\n        countryData: userData,\n        geoData: json\n      });\n      this.renderChart();\n    };\n\n    this.renderChart = () => {\n      const ds = new DataSet();\n      const dv = ds.createView('back').source(this.state.geoData, {\n        type: 'GeoJSON'\n      });\n      const userDv = ds.createView().source(this.state.countryData).transform({\n        geoDataView: dv,\n        field: 'name',\n        type: 'geo.centroid',\n        as: ['longitude', 'latitude']\n      });\n      const chart = new Chart({\n        container: 'container',\n        autoFit: true,\n        height: 500\n      });\n      chart.scale({\n        longitude: {\n          sync: true\n        },\n        latitude: {\n          sync: true\n        }\n      });\n      chart.axis(false);\n      chart.legend({\n        position: 'right'\n      });\n      chart.tooltip({\n        showTitle: false,\n        showMarkers: false\n      });\n      const bgView = chart.createView();\n      bgView.data(dv.rows);\n      bgView.tooltip(false);\n      bgView.polygon().position('longitude*latitude').color('#ebedf0').style({\n        lineWidth: 1,\n        stroke: '#fafbfc'\n      });\n      const userView = chart.createView();\n      userView.data(userDv.rows);\n      userView.point().position('longitude*latitude').color('#1890ff').shape('circle').size('value', [5, 15]).style({\n        lineWidth: 1,\n        stroke: '#1890ff'\n      });\n      userView.interaction('element-active');\n      chart.render();\n    };\n\n    this.state = {\n      geoData: [],\n      countryData: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n      small: true,\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      className: \"border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CardBody, {\n      className: \"pt-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default CountryStats;","map":{"version":3,"sources":["/Users/bobby/Desktop/React_Covid19Visualization/covid19_visualization_react/src/component/statistics/countryStats.component.jsx"],"names":["React","DataSet","Chart","CardHeader","CardBody","Card","axios","configuration","countryName","userData","name","value","CountryStats","Component","constructor","props","loadData","callback","response","get","json","data","map","country","countryResponse","countryJson","push","confirmed","length","componentDidMount","setState","countryData","geoData","renderChart","ds","dv","createView","source","state","type","userDv","transform","geoDataView","field","as","chart","container","autoFit","height","scale","longitude","sync","latitude","axis","legend","position","tooltip","showTitle","showMarkers","bgView","rows","polygon","color","style","lineWidth","stroke","userView","point","shape","size","interaction","render","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\nimport { CardHeader, CardBody, Card } from \"shards-react\";\nimport axios from 'axios'\n\nconst configuration = {\n\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"78f0398aa4msh86be5ac1359b0f1p1838a7jsnad282c6e4e48\"\n  }\n}\n\nconst countryName = [\n\n  'Russia',\n  'China',\n  'Japan',\n  'South Korea',\n  'Canada',\n  'United Kingdom',\n  'United States of America',\n  'Brazil',\n  'Argentina',\n  'Nigeria',\n  'France',\n  'Germany',\n  'Ukraine',\n  'Egypt',\n  'South Africa',\n  'India',\n  'Australia',\n  'Saudi Arabia',\n  'Afghanistan',\n  'Spain',\n  'Italy',\n];\n\nconst userData = [\n  { name: \"Russia\", value: 8672 },\n  { name: \"China\", value: 81802 },\n  { name: \"Japan\", value: 4257 },\n  { name: \"S. Korea\", value: 10384 },\n  { name: \"USA\", value: 402471 },\n  { name: \"Canada\", value: 18447 },\n  { name: \"UK\", value: 55242 },\n  { name: \"Brazil\", value: 14152 },\n  { name: \"Germany\", value: 109329 },\n  { name: \"Nigeria\", value: 254 },\n  { name: \"France\", value: 109069 },\n  { name: \"Argentina\", value: 1715 },\n  { name: \"Ukraine\", value: 1668 },\n  { name: \"Egypt\", value: 1450 },\n  { name: \"India\", value: 5480 },\n  { name: \"Saudi Arabia\", value: 2932 },\n  { name: \"Australia\", value: 6013 },\n  { name: \"South Africa\", value: 1749 },\n  { name: \"Afghanistan\", value: 423 },\n  { name: \"Spain\", value: 146690 },\n  { name: \"Italy\", value: 135586}\n];\n\n// const userData = [\n//   { name: 'Russia', value: 86.8 },\n//   { name: 'China', value: 106.3 },\n//   { name: 'Japan', value: 94.7 },\n//   { name: 'Mongolia', value: 98 },\n//   { name: 'Canada', value: 98.4 },\n//   { name: 'United Kingdom', value: 97.2 },\n//   { name: 'United States of America', value: 98.3 },\n//   { name: 'Brazil', value: 96.7 },\n//   { name: 'Argentina', value: 95.8 },\n//   { name: 'Algeria', value: 101.3 },\n//   { name: 'France', value: 94.8 },\n//   { name: 'Germany', value: 96.6 },\n//   { name: 'Ukraine', value: 86.3 },\n//   { name: 'Egypt', value: 102.1 },\n//   { name: 'South Africa', value: 101.3 },\n//   { name: 'India', value: 107.6 },\n//   { name: 'Australia', value: 99.9 },\n//   { name: 'Saudi Arabia', value: 130.1 },\n//   { name: 'Afghanistan', value: 106.5 },\n//   { name: 'Kazakhstan', value: 93.4 },\n//   { name: 'Indonesia', value: 101.4 },\n// ];\n\nclass CountryStats extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { geoData: [], countryData: [] };\n  }\n\n\n  loadData = async (callback) => {\n\n    const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n    const json = await response.data;\n\n    countryName.map(async country => {\n      const countryResponse = await axios.get('https://covid-19-data.p.rapidapi.com/country?name=' + country, configuration);\n      const countryJson = countryResponse.data;\n      userData.push({ name: countryJson[0].country, value: countryJson[0].confirmed })\n\n      if (userData && userData.length == countryName.length) {\n        callback(userData, json)\n      }\n    });\n  }\n\n  componentDidMount = async () => {\n    // this.loadData((data, json) => {\n    //   this.setState({ countryData: data, geoData: json });\n    //   console.log(data)\n    //   this.renderChart();\n    // })\n\n    const response = await axios.get('https:/g2.antv.vision/en/examples/data/world.geo.json');\n    const json = await response.data;\n\n    this.setState({countryData: userData, geoData: json})\n    this.renderChart();\n  };\n\n  renderChart = () => {\n\n    const ds = new DataSet();\n    const dv = ds.createView('back').source(this.state.geoData, {\n      type: 'GeoJSON',\n    });\n\n    const userDv = ds\n      .createView()\n      .source(this.state.countryData)\n      .transform({\n        geoDataView: dv,\n        field: 'name',\n        type: 'geo.centroid',\n        as: ['longitude', 'latitude'],\n      });\n\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n    });\n\n    chart.scale({\n      longitude: {\n        sync: true,\n      },\n      latitude: {\n        sync: true,\n      },\n    });\n    chart.axis(false);\n\n    chart.legend({ position: 'right' });\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false\n    });\n\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView\n      .polygon()\n      .position('longitude*latitude')\n      .color('#ebedf0')\n      .style({\n        lineWidth: 1,\n        stroke: '#fafbfc',\n      });\n\n    const userView = chart.createView();\n    userView.data(userDv.rows);\n    userView\n      .point()\n      .position('longitude*latitude')\n      .color('#1890ff')\n      .shape('circle')\n      .size('value', [5, 15])\n      .style({\n        lineWidth: 1,\n        stroke: '#1890ff',\n      });\n    userView.interaction('element-active');\n    chart.render();\n  }\n\n  render() {\n\n    return (\n\n      <>\n        <Card small className=\"h-100\">\n          <CardHeader className=\"border-bottom\">\n            <h6 className=\"m-0\">{this.props.title}</h6>\n          </CardHeader>\n          <CardBody className=\"pt-0\">\n            <div id=\"container\" />\n\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n\n}\nexport default CountryStats;"]},"metadata":{},"sourceType":"module"}